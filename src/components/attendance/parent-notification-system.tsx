/**
 * Parent Notification System Component
 * Sprint 4: Attendance System Development
 * İ-EP.APP - Veli Bildirim Sistemi
 */

'use client';

import { useState } from 'react';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Textarea } from '@/components/ui/textarea';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { Badge } from '@/components/ui/badge';
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from '@/components/ui/select';
import { Checkbox } from '@/components/ui/checkbox';
import { Switch } from '@/components/ui/switch';
// import { Progress } from '@/components/ui/progress';
import {
  Send,
  Phone,
  Mail,
  MessageSquare,
  Clock,
  CheckCircle,
  XCircle,
  AlertCircle,
  // Users,
  // Filter,
  // Search,
  Settings,
  Bell,
  History,
  Eye,
  Edit,
} from 'lucide-react';

interface NotificationTemplate {
  id: string;
  name: string;
  type: 'absence' | 'tardiness' | 'chronic' | 'custom';
  channel: 'sms' | 'email' | 'whatsapp' | 'call';
  subject: string;
  content: string;
  variables: string[];
  isActive: boolean;
}

interface PendingNotification {
  id: string;
  student: {
    id: string;
    name: string;
    number: string;
    class: string;
  };
  parent: {
    name: string;
    phone: string;
    email: string;
    preferredChannel: 'sms' | 'email' | 'whatsapp' | 'call';
  };
  type: 'absence' | 'tardiness' | 'chronic';
  reason: string;
  date: string;
  priority: 'low' | 'medium' | 'high';
  autoGenerated: boolean;
  scheduledFor?: string;
}

interface NotificationHistory {
  id: string;
  student: {
    name: string;
    number: string;
    class: string;
  };
  parent: {
    name: string;
    phone: string;
    email: string;
  };
  type: 'absence' | 'tardiness' | 'chronic';
  channel: 'sms' | 'email' | 'whatsapp' | 'call';
  status: 'sent' | 'delivered' | 'read' | 'failed';
  sentAt: string;
  deliveredAt?: string;
  readAt?: string;
  content: string;
}

export function ParentNotificationSystem() {
  const [selectedTab, setSelectedTab] = useState<'pending' | 'templates' | 'history' | 'settings'>(
    'pending'
  );
  const [selectedNotifications, setSelectedNotifications] = useState<string[]>([]);
  const [isSending, setIsSending] = useState(false);
  const [autoNotifications, setAutoNotifications] = useState(true);

  // Mock data - gerçek uygulamada API'den gelecek
  const [pendingNotifications] = useState<PendingNotification[]>([
    {
      id: '1',
      student: {
        id: '1',
        name: 'Ali Veli',
        number: '2025001',
        class: '5-A',
      },
      parent: {
        name: 'Ahmet Veli',
        phone: '+90 555 123 4567',
        email: 'ahmet.veli@parent.com',
        preferredChannel: 'sms',
      },
      type: 'absence',
      reason: 'Bugün devamsızlık',
      date: '2025-01-15',
      priority: 'medium',
      autoGenerated: true,
    },
    {
      id: '2',
      student: {
        id: '2',
        name: 'Ayşe Yılmaz',
        number: '2025002',
        class: '5-B',
      },
      parent: {
        name: 'Mehmet Yılmaz',
        phone: '+90 555 234 5678',
        email: 'mehmet.yilmaz@parent.com',
        preferredChannel: 'whatsapp',
      },
      type: 'chronic',
      reason: '3 gün ardışık devamsızlık',
      date: '2025-01-15',
      priority: 'high',
      autoGenerated: true,
    },
    {
      id: '3',
      student: {
        id: '3',
        name: 'Mehmet Kaya',
        number: '2025003',
        class: '6-A',
      },
      parent: {
        name: 'Fatma Kaya',
        phone: '+90 555 345 6789',
        email: 'fatma.kaya@parent.com',
        preferredChannel: 'email',
      },
      type: 'tardiness',
      reason: 'Geç kalma',
      date: '2025-01-15',
      priority: 'low',
      autoGenerated: false,
    },
  ]);

  const [notificationTemplates] = useState<NotificationTemplate[]>([
    {
      id: '1',
      name: 'Devamsızlık Bildirimi',
      type: 'absence',
      channel: 'sms',
      subject: 'Devamsızlık Bildirimi',
      content:
        'Sayın {parent_name}, {student_name} adlı öğrenciniz {date} tarihinde devamsızlık yapmıştır.',
      variables: ['parent_name', 'student_name', 'date'],
      isActive: true,
    },
    {
      id: '2',
      name: 'Geç Kalma Bildirimi',
      type: 'tardiness',
      channel: 'sms',
      subject: 'Geç Kalma Bildirimi',
      content:
        'Sayın {parent_name}, {student_name} adlı öğrenciniz bugün {time} saatinde okula gelmiştir.',
      variables: ['parent_name', 'student_name', 'time'],
      isActive: true,
    },
    {
      id: '3',
      name: 'Kronik Devamsızlık Uyarısı',
      type: 'chronic',
      channel: 'email',
      subject: 'Kronik Devamsızlık Uyarısı',
      content:
        'Sayın {parent_name}, {student_name} adlı öğrencinizin devamsızlık oranı %{rate} olmuştur. Lütfen okulla iletişime geçiniz.',
      variables: ['parent_name', 'student_name', 'rate'],
      isActive: true,
    },
  ]);

  const [notificationHistory] = useState<NotificationHistory[]>([
    {
      id: '1',
      student: {
        name: 'Ali Veli',
        number: '2025001',
        class: '5-A',
      },
      parent: {
        name: 'Ahmet Veli',
        phone: '+90 555 123 4567',
        email: 'ahmet.veli@parent.com',
      },
      type: 'absence',
      channel: 'sms',
      status: 'delivered',
      sentAt: '2025-01-14T09:30:00',
      deliveredAt: '2025-01-14T09:31:00',
      content:
        'Sayın Ahmet Veli, Ali Veli adlı öğrenciniz 14.01.2025 tarihinde devamsızlık yapmıştır.',
    },
    {
      id: '2',
      student: {
        name: 'Ayşe Yılmaz',
        number: '2025002',
        class: '5-B',
      },
      parent: {
        name: 'Mehmet Yılmaz',
        phone: '+90 555 234 5678',
        email: 'mehmet.yilmaz@parent.com',
      },
      type: 'chronic',
      channel: 'email',
      status: 'read',
      sentAt: '2025-01-13T16:45:00',
      deliveredAt: '2025-01-13T16:46:00',
      readAt: '2025-01-13T17:15:00',
      content:
        'Sayın Mehmet Yılmaz, Ayşe Yılmaz adlı öğrencinizin devamsızlık oranı %25 olmuştur. Lütfen okulla iletişime geçiniz.',
    },
  ]);

  const handleNotificationSelection = (notificationId: string, checked: boolean) => {
    if (checked) {
      setSelectedNotifications((prev) => [...prev, notificationId]);
    } else {
      setSelectedNotifications((prev) => prev.filter((id) => id !== notificationId));
    }
  };

  const handleSelectAll = (checked: boolean) => {
    if (checked) {
      setSelectedNotifications(pendingNotifications.map((n) => n.id));
    } else {
      setSelectedNotifications([]);
    }
  };

  const sendNotifications = async () => {
    setIsSending(true);

    try {
      // API call will be implemented here
      console.log('Sending notifications:', selectedNotifications);

      // Simulate API call
      await new Promise((resolve) => setTimeout(resolve, 2000));

      alert(`${selectedNotifications.length} bildirim gönderildi!`);
      setSelectedNotifications([]);
    } catch (error) {
      console.error('Error sending notifications:', error);
      alert('Bildirimler gönderilirken hata oluştu!');
    } finally {
      setIsSending(false);
    }
  };

  const getTypeIcon = (type: string) => {
    switch (type) {
      case 'absence':
        return <XCircle className="h-4 w-4" />;
      case 'tardiness':
        return <Clock className="h-4 w-4" />;
      case 'chronic':
        return <AlertCircle className="h-4 w-4" />;
      default:
        return <Bell className="h-4 w-4" />;
    }
  };

  const getTypeLabel = (type: string) => {
    const labels = {
      absence: 'Devamsızlık',
      tardiness: 'Geç Kalma',
      chronic: 'Kronik Devamsızlık',
    };
    return labels[type as keyof typeof labels] || type;
  };

  const getChannelIcon = (channel: string) => {
    switch (channel) {
      case 'sms':
        return <MessageSquare className="h-4 w-4" />;
      case 'email':
        return <Mail className="h-4 w-4" />;
      case 'whatsapp':
        return <MessageSquare className="h-4 w-4" />;
      case 'call':
        return <Phone className="h-4 w-4" />;
      default:
        return <Bell className="h-4 w-4" />;
    }
  };

  const getChannelLabel = (channel: string) => {
    const labels = {
      sms: 'SMS',
      email: 'E-posta',
      whatsapp: 'WhatsApp',
      call: 'Telefon',
    };
    return labels[channel as keyof typeof labels] || channel;
  };

  const getPriorityBadge = (priority: string) => {
    switch (priority) {
      case 'high':
        return 'bg-red-100 text-red-800';
      case 'medium':
        return 'bg-yellow-100 text-yellow-800';
      case 'low':
        return 'bg-green-100 text-green-800';
      default:
        return 'bg-gray-100 text-gray-800';
    }
  };

  const getStatusBadge = (status: string) => {
    switch (status) {
      case 'sent':
        return 'bg-blue-100 text-blue-800';
      case 'delivered':
        return 'bg-green-100 text-green-800';
      case 'read':
        return 'bg-green-100 text-green-800';
      case 'failed':
        return 'bg-red-100 text-red-800';
      default:
        return 'bg-gray-100 text-gray-800';
    }
  };

  const getStatusIcon = (status: string) => {
    switch (status) {
      case 'sent':
        return <Send className="h-4 w-4" />;
      case 'delivered':
        return <CheckCircle className="h-4 w-4" />;
      case 'read':
        return <Eye className="h-4 w-4" />;
      case 'failed':
        return <XCircle className="h-4 w-4" />;
      default:
        return <Clock className="h-4 w-4" />;
    }
  };

  return (
    <div className="space-y-6">
      {/* Header */}
      <div className="flex items-center justify-between">
        <h2 className="text-2xl font-bold">Veli Bildirim Sistemi</h2>
        <div className="flex items-center gap-4">
          <div className="flex items-center gap-2">
            <Switch checked={autoNotifications} onCheckedChange={setAutoNotifications} />
            <Label>Otomatik Bildirimler</Label>
          </div>
          <Button
            onClick={sendNotifications}
            disabled={selectedNotifications.length === 0 || isSending}
          >
            {isSending ? (
              <>
                <Clock className="mr-2 h-4 w-4 animate-spin" />
                Gönderiliyor...
              </>
            ) : (
              <>
                <Send className="mr-2 h-4 w-4" />
                Seçilenleri Gönder ({selectedNotifications.length})
              </>
            )}
          </Button>
        </div>
      </div>

      {/* Navigation */}
      <div className="flex gap-2">
        <Button
          variant={selectedTab === 'pending' ? 'default' : 'outline'}
          onClick={() => setSelectedTab('pending')}
        >
          <Bell className="mr-2 h-4 w-4" />
          Bekleyen Bildirimler
        </Button>
        <Button
          variant={selectedTab === 'templates' ? 'default' : 'outline'}
          onClick={() => setSelectedTab('templates')}
        >
          <Edit className="mr-2 h-4 w-4" />
          Şablonlar
        </Button>
        <Button
          variant={selectedTab === 'history' ? 'default' : 'outline'}
          onClick={() => setSelectedTab('history')}
        >
          <History className="mr-2 h-4 w-4" />
          Geçmiş
        </Button>
        <Button
          variant={selectedTab === 'settings' ? 'default' : 'outline'}
          onClick={() => setSelectedTab('settings')}
        >
          <Settings className="mr-2 h-4 w-4" />
          Ayarlar
        </Button>
      </div>

      {/* Pending Notifications */}
      {selectedTab === 'pending' && (
        <Card>
          <CardHeader>
            <div className="flex items-center justify-between">
              <div>
                <CardTitle>Bekleyen Bildirimler</CardTitle>
                <CardDescription>
                  Gönderilmesi gereken {pendingNotifications.length} bildirim
                </CardDescription>
              </div>
              <div className="flex items-center gap-2">
                <Checkbox
                  checked={selectedNotifications.length === pendingNotifications.length}
                  onCheckedChange={handleSelectAll}
                />
                <Label>Hepsini Seç</Label>
              </div>
            </div>
          </CardHeader>
          <CardContent>
            <div className="space-y-4">
              {pendingNotifications.map((notification) => (
                <div
                  key={notification.id}
                  className={`rounded-lg border p-4 ${
                    selectedNotifications.includes(notification.id)
                      ? 'border-blue-500 bg-blue-50'
                      : ''
                  }`}
                >
                  <div className="flex items-center justify-between">
                    <div className="flex items-center gap-4">
                      <Checkbox
                        checked={selectedNotifications.includes(notification.id)}
                        onCheckedChange={(checked) =>
                          handleNotificationSelection(notification.id, checked as boolean)
                        }
                      />

                      <div className="flex items-center gap-2">
                        {getTypeIcon(notification.type)}
                        <Badge
                          variant="outline"
                          className={getPriorityBadge(notification.priority)}
                        >
                          {getTypeLabel(notification.type)}
                        </Badge>
                        {notification.autoGenerated && <Badge variant="secondary">Otomatik</Badge>}
                      </div>

                      <div>
                        <h3 className="font-medium">{notification.student.name}</h3>
                        <p className="text-sm text-gray-600">
                          #{notification.student.number} • {notification.student.class}
                        </p>
                      </div>
                    </div>

                    <div className="flex items-center gap-4">
                      <div className="text-right">
                        <p className="text-sm font-medium">{notification.parent.name}</p>
                        <p className="text-sm text-gray-600">
                          {getChannelLabel(notification.parent.preferredChannel)}
                        </p>
                      </div>

                      <div className="flex items-center gap-2">
                        {getChannelIcon(notification.parent.preferredChannel)}
                        <span className="text-sm">{notification.parent.phone}</span>
                      </div>
                    </div>
                  </div>

                  <div className="mt-3 text-sm text-gray-600">
                    <p>{notification.reason}</p>
                    <p className="mt-1">
                      Tarih: {new Date(notification.date).toLocaleDateString('tr-TR')}
                    </p>
                  </div>
                </div>
              ))}
            </div>
          </CardContent>
        </Card>
      )}

      {/* Templates */}
      {selectedTab === 'templates' && (
        <Card>
          <CardHeader>
            <CardTitle>Bildirim Şablonları</CardTitle>
            <CardDescription>
              Otomatik bildirimler için önceden tanımlanmış şablonlar
            </CardDescription>
          </CardHeader>
          <CardContent>
            <div className="space-y-4">
              {notificationTemplates.map((template) => (
                <div key={template.id} className="rounded-lg border p-4">
                  <div className="mb-3 flex items-center justify-between">
                    <div className="flex items-center gap-2">
                      <h3 className="font-medium">{template.name}</h3>
                      <Badge variant="outline">{getTypeLabel(template.type)}</Badge>
                      <Badge variant="secondary">{getChannelLabel(template.channel)}</Badge>
                      {template.isActive && <Badge variant="default">Aktif</Badge>}
                    </div>
                    <div className="flex gap-2">
                      <Button variant="outline" size="sm">
                        <Edit className="mr-2 h-4 w-4" />
                        Düzenle
                      </Button>
                      <Switch checked={template.isActive} onCheckedChange={() => {}} />
                    </div>
                  </div>

                  <div className="space-y-2">
                    <div>
                      <Label className="text-sm font-medium">Konu</Label>
                      <p className="text-sm text-gray-600">{template.subject}</p>
                    </div>
                    <div>
                      <Label className="text-sm font-medium">İçerik</Label>
                      <p className="text-sm text-gray-600">{template.content}</p>
                    </div>
                    <div>
                      <Label className="text-sm font-medium">Değişkenler</Label>
                      <div className="mt-1 flex flex-wrap gap-1">
                        {template.variables.map((variable, index) => (
                          <Badge key={index} variant="outline" className="text-xs">
                            {'{' + variable + '}'}
                          </Badge>
                        ))}
                      </div>
                    </div>
                  </div>
                </div>
              ))}
            </div>
          </CardContent>
        </Card>
      )}

      {/* History */}
      {selectedTab === 'history' && (
        <Card>
          <CardHeader>
            <CardTitle>Bildirim Geçmişi</CardTitle>
            <CardDescription>Gönderilmiş bildirimlerin detayları ve durumları</CardDescription>
          </CardHeader>
          <CardContent>
            <div className="space-y-4">
              {notificationHistory.map((notification) => (
                <div key={notification.id} className="rounded-lg border p-4">
                  <div className="mb-3 flex items-center justify-between">
                    <div className="flex items-center gap-4">
                      <div className="flex items-center gap-2">
                        {getTypeIcon(notification.type)}
                        <Badge variant="outline">{getTypeLabel(notification.type)}</Badge>
                        <Badge variant="outline" className={getStatusBadge(notification.status)}>
                          {getStatusIcon(notification.status)}
                          <span className="ml-1 capitalize">{notification.status}</span>
                        </Badge>
                      </div>

                      <div>
                        <h3 className="font-medium">{notification.student.name}</h3>
                        <p className="text-sm text-gray-600">
                          #{notification.student.number} • {notification.student.class}
                        </p>
                      </div>
                    </div>

                    <div className="text-right">
                      <p className="text-sm font-medium">{notification.parent.name}</p>
                      <p className="text-sm text-gray-600">
                        {getChannelLabel(notification.channel)} • {notification.parent.phone}
                      </p>
                    </div>
                  </div>

                  <div className="space-y-2">
                    <div>
                      <Label className="text-sm font-medium">İçerik</Label>
                      <p className="text-sm text-gray-600">{notification.content}</p>
                    </div>

                    <div className="flex gap-6 text-sm text-gray-600">
                      <div>
                        <span className="font-medium">Gönderilme:</span>{' '}
                        {new Date(notification.sentAt).toLocaleString('tr-TR')}
                      </div>
                      {notification.deliveredAt && (
                        <div>
                          <span className="font-medium">Teslim edilme:</span>{' '}
                          {new Date(notification.deliveredAt).toLocaleString('tr-TR')}
                        </div>
                      )}
                      {notification.readAt && (
                        <div>
                          <span className="font-medium">Okunma:</span>{' '}
                          {new Date(notification.readAt).toLocaleString('tr-TR')}
                        </div>
                      )}
                    </div>
                  </div>
                </div>
              ))}
            </div>
          </CardContent>
        </Card>
      )}

      {/* Settings */}
      {selectedTab === 'settings' && (
        <Card>
          <CardHeader>
            <CardTitle>Bildirim Ayarları</CardTitle>
            <CardDescription>Otomatik bildirim sisteminin genel ayarları</CardDescription>
          </CardHeader>
          <CardContent>
            <div className="space-y-6">
              <div className="space-y-4">
                <h3 className="text-lg font-medium">Otomatik Bildirimler</h3>

                <div className="space-y-3">
                  <div className="flex items-center justify-between">
                    <div>
                      <Label>Devamsızlık Bildirimi</Label>
                      <p className="text-sm text-gray-600">
                        Her devamsızlık için otomatik bildirim gönder
                      </p>
                    </div>
                    <Switch defaultChecked />
                  </div>

                  <div className="flex items-center justify-between">
                    <div>
                      <Label>Geç Kalma Bildirimi</Label>
                      <p className="text-sm text-gray-600">
                        Geç kalma durumunda otomatik bildirim gönder
                      </p>
                    </div>
                    <Switch defaultChecked />
                  </div>

                  <div className="flex items-center justify-between">
                    <div>
                      <Label>Kronik Devamsızlık Uyarısı</Label>
                      <p className="text-sm text-gray-600">
                        Yüksek devamsızlık oranında uyarı gönder
                      </p>
                    </div>
                    <Switch defaultChecked />
                  </div>
                </div>
              </div>

              <div className="space-y-4">
                <h3 className="text-lg font-medium">Gönderim Ayarları</h3>

                <div className="grid grid-cols-1 gap-4 md:grid-cols-2">
                  <div className="space-y-2">
                    <Label>Varsayılan Kanal</Label>
                    <Select defaultValue="sms">
                      <SelectTrigger>
                        <SelectValue />
                      </SelectTrigger>
                      <SelectContent>
                        <SelectItem value="sms">SMS</SelectItem>
                        <SelectItem value="email">E-posta</SelectItem>
                        <SelectItem value="whatsapp">WhatsApp</SelectItem>
                      </SelectContent>
                    </Select>
                  </div>

                  <div className="space-y-2">
                    <Label>Gönderim Saati</Label>
                    <Input type="time" defaultValue="09:00" />
                  </div>

                  <div className="space-y-2">
                    <Label>Kronik Devamsızlık Eşiği (%)</Label>
                    <Input type="number" defaultValue="20" />
                  </div>

                  <div className="space-y-2">
                    <Label>Tekrar Gönderim (saat)</Label>
                    <Input type="number" defaultValue="24" />
                  </div>
                </div>
              </div>

              <div className="space-y-4">
                <h3 className="text-lg font-medium">Şablon Ayarları</h3>

                <div className="space-y-3">
                  <div>
                    <Label>Okul İmzası</Label>
                    <Textarea
                      placeholder="Bildirim sonunda görünecek imza"
                      defaultValue="Saygılarımızla,
İ-EP.APP Okul Yönetimi"
                    />
                  </div>

                  <div>
                    <Label>İletişim Bilgileri</Label>
                    <Textarea
                      placeholder="Okul iletişim bilgileri"
                      defaultValue="Telefon: 0212 123 45 67
E-posta: info@okul.com"
                    />
                  </div>
                </div>
              </div>
            </div>
          </CardContent>
        </Card>
      )}
    </div>
  );
}
