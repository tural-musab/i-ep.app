a8942f674994d366ef703ec2e6bf01bc
/**
 * Assignment Repository Implementation
 * Sprint 2 BL-001: Repository Pattern Foundation
 * Ä°-EP.APP - Assignment Management
 */ "use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    AssignmentRepository: function() {
        return AssignmentRepository;
    },
    AssignmentSubmissionRepository: function() {
        return AssignmentSubmissionRepository;
    }
});
const _baserepository = require("./base-repository");
class AssignmentRepository extends _baserepository.BaseRepository {
    constructor(tenantId = 'default-tenant'){
        super('assignments', tenantId);
    }
    /**
   * Find assignments by class ID
   */ async findByClassId(classId, options = {}) {
        return this.findAll({
            ...options,
            filters: {
                class_id: classId
            }
        });
    }
    /**
   * Find assignments by teacher ID
   */ async findByTeacherId(teacherId, options = {}) {
        return this.findAll({
            ...options,
            filters: {
                teacher_id: teacherId
            }
        });
    }
    /**
   * Find assignments by type
   */ async findByType(type, options = {}) {
        return this.findAll({
            ...options,
            filters: {
                type
            }
        });
    }
    /**
   * Find assignments by subject
   */ async findBySubject(subject, options = {}) {
        return this.findAll({
            ...options,
            filters: {
                subject
            }
        });
    }
    /**
   * Find assignments due within date range
   */ async findByDueDateRange(startDate, endDate, options = {}) {
        const { page = 1, limit = 10, sortBy = 'due_date', sortOrder = 'asc' } = options;
        const from = (page - 1) * limit;
        const to = from + limit - 1;
        const { data, error, count } = await this.getBaseQuery().gte('due_date', startDate).lte('due_date', endDate).order(sortBy, {
            ascending: sortOrder === 'asc'
        }).range(from, to).select('*', {
            count: 'exact'
        });
        if (error) {
            throw new Error(`Repository error: ${error.message}`);
        }
        const totalPages = Math.ceil((count || 0) / limit);
        return {
            data: data,
            count: count || 0,
            page,
            totalPages,
            hasMore: page < totalPages
        };
    }
    /**
   * Find upcoming assignments
   */ async findUpcoming(daysAhead = 7, options = {}) {
        const startDate = new Date().toISOString();
        const endDate = new Date(Date.now() + daysAhead * 24 * 60 * 60 * 1000).toISOString();
        return this.findByDueDateRange(startDate, endDate, options);
    }
    /**
   * Find overdue assignments
   */ async findOverdue(options = {}) {
        const { page = 1, limit = 10, sortBy = 'due_date', sortOrder = 'desc' } = options;
        const from = (page - 1) * limit;
        const to = from + limit - 1;
        const now = new Date().toISOString();
        const { data, error, count } = await this.getBaseQuery().lt('due_date', now).eq('status', 'published').order(sortBy, {
            ascending: sortOrder === 'asc'
        }).range(from, to).select('*', {
            count: 'exact'
        });
        if (error) {
            throw new Error(`Repository error: ${error.message}`);
        }
        const totalPages = Math.ceil((count || 0) / limit);
        return {
            data: data,
            count: count || 0,
            page,
            totalPages,
            hasMore: page < totalPages
        };
    }
    /**
   * Search assignments by title
   */ async searchByTitle(searchTerm, options = {}) {
        const { page = 1, limit = 10, sortBy = 'created_at', sortOrder = 'desc' } = options;
        const from = (page - 1) * limit;
        const to = from + limit - 1;
        const { data, error, count } = await this.getBaseQuery().ilike('title', `%${searchTerm}%`).order(sortBy, {
            ascending: sortOrder === 'asc'
        }).range(from, to).select('*', {
            count: 'exact'
        });
        if (error) {
            throw new Error(`Repository error: ${error.message}`);
        }
        const totalPages = Math.ceil((count || 0) / limit);
        return {
            data: data,
            count: count || 0,
            page,
            totalPages,
            hasMore: page < totalPages
        };
    }
    /**
   * Find assignment with relations
   */ async findWithRelations(id) {
        const { data, error } = await this.supabase.from('assignments').select(`
        *,
        class:classes!class_id (
          id,
          name,
          grade,
          section
        ),
        teacher:teachers!teacher_id (
          id,
          name,
          email,
          subject
        )
      `).eq('id', id).eq('tenant_id', this.tenantId).single();
        if (error) {
            if (error.code === 'PGRST116') {
                return null; // Not found
            }
            throw new Error(`Repository error: ${error.message}`);
        }
        return data;
    }
    /**
   * Get assignment statistics
   */ async getStatistics(assignmentId) {
        const { data, error } = await this.supabase.rpc('get_assignment_statistics', {
            assignment_id: assignmentId,
            tenant_id: this.tenantId
        });
        if (error) {
            throw new Error(`Repository error: ${error.message}`);
        }
        return data || {
            totalSubmissions: 0,
            gradedSubmissions: 0,
            averageScore: 0,
            completionRate: 0,
            onTimeSubmissions: 0,
            lateSubmissions: 0
        };
    }
    /**
   * Update assignment status
   */ async updateStatus(assignmentId, status) {
        return this.update(assignmentId, {
            status
        });
    }
    /**
   * Publish assignment
   */ async publish(assignmentId) {
        return this.updateStatus(assignmentId, 'published');
    }
    /**
   * Archive assignment
   */ async archive(assignmentId) {
        return this.updateStatus(assignmentId, 'archived');
    }
    /**
   * Update assignment due date
   */ async updateDueDate(assignmentId, dueDate) {
        return this.update(assignmentId, {
            due_date: dueDate
        });
    }
    /**
   * Get assignments for student
   */ async findForStudent(studentId, options = {}) {
        const { page = 1, limit = 10, sortBy = 'due_date', sortOrder = 'asc' } = options;
        const from = (page - 1) * limit;
        const to = from + limit - 1;
        // Get student's class first
        const { data: student, error: studentError } = await this.supabase.from('students').select('class_id').eq('id', studentId).eq('tenant_id', this.tenantId).single();
        if (studentError) {
            throw new Error(`Repository error: ${studentError.message}`);
        }
        const { data, error, count } = await this.getBaseQuery().eq('class_id', student.class_id).eq('status', 'published').order(sortBy, {
            ascending: sortOrder === 'asc'
        }).range(from, to).select('*', {
            count: 'exact'
        });
        if (error) {
            throw new Error(`Repository error: ${error.message}`);
        }
        const totalPages = Math.ceil((count || 0) / limit);
        return {
            data: data,
            count: count || 0,
            page,
            totalPages,
            hasMore: page < totalPages
        };
    }
    /**
   * Bulk update assignment class
   */ async bulkUpdateClass(assignmentIds, classId) {
        const { error } = await this.supabase.from('assignments').update({
            class_id: classId,
            updated_at: new Date().toISOString()
        }).in('id', assignmentIds).eq('tenant_id', this.tenantId);
        if (error) {
            throw new Error(`Repository error: ${error.message}`);
        }
        return true;
    }
    /**
   * Clone assignment
   */ async clone(assignmentId, updates = {}) {
        const originalAssignment = await this.findById(assignmentId);
        if (!originalAssignment) {
            throw new Error('Assignment not found');
        }
        const { id, created_at, updated_at, tenant_id, ...assignmentData } = originalAssignment;
        const clonedAssignment = {
            ...assignmentData,
            title: `${assignmentData.title} (Copy)`,
            status: 'draft',
            ...updates
        };
        return this.create(clonedAssignment);
    }
}
class AssignmentSubmissionRepository extends _baserepository.BaseRepository {
    constructor(tenantId = 'default-tenant'){
        super('assignment_submissions', tenantId);
    }
    /**
   * Find submissions by assignment ID
   */ async findByAssignmentId(assignmentId, options = {}) {
        return this.findAll({
            ...options,
            filters: {
                assignment_id: assignmentId
            }
        });
    }
    /**
   * Find submissions by student ID
   */ async findByStudentId(studentId, options = {}) {
        return this.findAll({
            ...options,
            filters: {
                student_id: studentId
            }
        });
    }
    /**
   * Find submission by assignment and student
   */ async findByAssignmentAndStudent(assignmentId, studentId) {
        const { data, error } = await this.getBaseQuery().eq('assignment_id', assignmentId).eq('student_id', studentId).single();
        if (error) {
            if (error.code === 'PGRST116') {
                return null; // Not found
            }
            throw new Error(`Repository error: ${error.message}`);
        }
        return data;
    }
    /**
   * Grade submission
   */ async grade(submissionId, score, feedback, gradedBy) {
        return this.update(submissionId, {
            score,
            feedback,
            graded_by: gradedBy,
            graded_at: new Date().toISOString(),
            status: 'graded'
        });
    }
    /**
   * Return graded submission
   */ async returnGraded(submissionId) {
        return this.update(submissionId, {
            status: 'returned'
        });
    }
    /**
   * Get ungraded submissions
   */ async findUngraded(options = {}) {
        return this.findAll({
            ...options,
            filters: {
                status: 'submitted'
            }
        });
    }
}

//# sourceMappingURL=data:application/json;base64,