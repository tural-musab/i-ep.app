{"version":3,"sources":["/Users/turanmusabosman/Projects/i-ep.app/src/lib/repository/assignment-repository.ts"],"sourcesContent":["/**\n * Assignment Repository Implementation\n * Sprint 2 BL-001: Repository Pattern Foundation\n * Ä°-EP.APP - Assignment Management\n */\n\nimport { BaseRepository, BaseEntity, QueryOptions, QueryResult } from './base-repository';\n\nexport interface Assignment extends BaseEntity {\n  title: string;\n  description?: string;\n  type: 'homework' | 'exam' | 'project' | 'quiz' | 'presentation';\n  subject: string;\n  class_id: string;\n  teacher_id: string;\n  due_date: string;\n  max_score: number;\n  is_graded: boolean;\n  status: 'draft' | 'published' | 'completed' | 'archived';\n  instructions?: string;\n  attachments?: string[];\n  rubric?: {\n    criteria: string;\n    points: number;\n    description: string;\n  }[];\n  metadata?: Record<string, any>;\n}\n\nexport interface AssignmentWithRelations extends Assignment {\n  class?: {\n    id: string;\n    name: string;\n    grade: string;\n    section: string;\n  };\n  teacher?: {\n    id: string;\n    name: string;\n    email: string;\n    subject: string;\n  };\n  submissions?: {\n    id: string;\n    student_id: string;\n    student_name: string;\n    submission_date: string;\n    score?: number;\n    status: string;\n  }[];\n  statistics?: {\n    total_submissions: number;\n    graded_submissions: number;\n    average_score: number;\n    completion_rate: number;\n  };\n}\n\nexport interface AssignmentSubmission extends BaseEntity {\n  assignment_id: string;\n  student_id: string;\n  submission_date: string;\n  content?: string;\n  attachments?: string[];\n  score?: number;\n  feedback?: string;\n  status: 'submitted' | 'graded' | 'returned' | 'late';\n  graded_by?: string;\n  graded_at?: string;\n  metadata?: Record<string, any>;\n}\n\nexport class AssignmentRepository extends BaseRepository<Assignment> {\n  constructor(tenantId: string = 'default-tenant') {\n    super('assignments', tenantId);\n  }\n\n  /**\n   * Find assignments by class ID\n   */\n  async findByClassId(\n    classId: string,\n    options: QueryOptions = {}\n  ): Promise<QueryResult<Assignment>> {\n    return this.findAll({\n      ...options,\n      filters: { class_id: classId },\n    });\n  }\n\n  /**\n   * Find assignments by teacher ID\n   */\n  async findByTeacherId(\n    teacherId: string,\n    options: QueryOptions = {}\n  ): Promise<QueryResult<Assignment>> {\n    return this.findAll({\n      ...options,\n      filters: { teacher_id: teacherId },\n    });\n  }\n\n  /**\n   * Find assignments by type\n   */\n  async findByType(\n    type: Assignment['type'],\n    options: QueryOptions = {}\n  ): Promise<QueryResult<Assignment>> {\n    return this.findAll({\n      ...options,\n      filters: { type },\n    });\n  }\n\n  /**\n   * Find assignments by subject\n   */\n  async findBySubject(\n    subject: string,\n    options: QueryOptions = {}\n  ): Promise<QueryResult<Assignment>> {\n    return this.findAll({\n      ...options,\n      filters: { subject },\n    });\n  }\n\n  /**\n   * Find assignments due within date range\n   */\n  async findByDueDateRange(\n    startDate: string,\n    endDate: string,\n    options: QueryOptions = {}\n  ): Promise<QueryResult<Assignment>> {\n    const { page = 1, limit = 10, sortBy = 'due_date', sortOrder = 'asc' } = options;\n\n    const from = (page - 1) * limit;\n    const to = from + limit - 1;\n\n    const { data, error, count } = await this.getBaseQuery()\n      .gte('due_date', startDate)\n      .lte('due_date', endDate)\n      .order(sortBy, { ascending: sortOrder === 'asc' })\n      .range(from, to)\n      .select('*', { count: 'exact' });\n\n    if (error) {\n      throw new Error(`Repository error: ${error.message}`);\n    }\n\n    const totalPages = Math.ceil((count || 0) / limit);\n\n    return {\n      data: data as Assignment[],\n      count: count || 0,\n      page,\n      totalPages,\n      hasMore: page < totalPages,\n    };\n  }\n\n  /**\n   * Find upcoming assignments\n   */\n  async findUpcoming(\n    daysAhead: number = 7,\n    options: QueryOptions = {}\n  ): Promise<QueryResult<Assignment>> {\n    const startDate = new Date().toISOString();\n    const endDate = new Date(Date.now() + daysAhead * 24 * 60 * 60 * 1000).toISOString();\n\n    return this.findByDueDateRange(startDate, endDate, options);\n  }\n\n  /**\n   * Find overdue assignments\n   */\n  async findOverdue(options: QueryOptions = {}): Promise<QueryResult<Assignment>> {\n    const { page = 1, limit = 10, sortBy = 'due_date', sortOrder = 'desc' } = options;\n\n    const from = (page - 1) * limit;\n    const to = from + limit - 1;\n    const now = new Date().toISOString();\n\n    const { data, error, count } = await this.getBaseQuery()\n      .lt('due_date', now)\n      .eq('status', 'published')\n      .order(sortBy, { ascending: sortOrder === 'asc' })\n      .range(from, to)\n      .select('*', { count: 'exact' });\n\n    if (error) {\n      throw new Error(`Repository error: ${error.message}`);\n    }\n\n    const totalPages = Math.ceil((count || 0) / limit);\n\n    return {\n      data: data as Assignment[],\n      count: count || 0,\n      page,\n      totalPages,\n      hasMore: page < totalPages,\n    };\n  }\n\n  /**\n   * Search assignments by title\n   */\n  async searchByTitle(\n    searchTerm: string,\n    options: QueryOptions = {}\n  ): Promise<QueryResult<Assignment>> {\n    const { page = 1, limit = 10, sortBy = 'created_at', sortOrder = 'desc' } = options;\n\n    const from = (page - 1) * limit;\n    const to = from + limit - 1;\n\n    const { data, error, count } = await this.getBaseQuery()\n      .ilike('title', `%${searchTerm}%`)\n      .order(sortBy, { ascending: sortOrder === 'asc' })\n      .range(from, to)\n      .select('*', { count: 'exact' });\n\n    if (error) {\n      throw new Error(`Repository error: ${error.message}`);\n    }\n\n    const totalPages = Math.ceil((count || 0) / limit);\n\n    return {\n      data: data as Assignment[],\n      count: count || 0,\n      page,\n      totalPages,\n      hasMore: page < totalPages,\n    };\n  }\n\n  /**\n   * Find assignment with relations\n   */\n  async findWithRelations(id: string): Promise<AssignmentWithRelations | null> {\n    const { data, error } = await this.supabase\n      .from('assignments')\n      .select(\n        `\n        *,\n        class:classes!class_id (\n          id,\n          name,\n          grade,\n          section\n        ),\n        teacher:teachers!teacher_id (\n          id,\n          name,\n          email,\n          subject\n        )\n      `\n      )\n      .eq('id', id)\n      .eq('tenant_id', this.tenantId)\n      .single();\n\n    if (error) {\n      if (error.code === 'PGRST116') {\n        return null; // Not found\n      }\n      throw new Error(`Repository error: ${error.message}`);\n    }\n\n    return data as AssignmentWithRelations;\n  }\n\n  /**\n   * Get assignment statistics\n   */\n  async getStatistics(assignmentId: string): Promise<{\n    totalSubmissions: number;\n    gradedSubmissions: number;\n    averageScore: number;\n    completionRate: number;\n    onTimeSubmissions: number;\n    lateSubmissions: number;\n  }> {\n    const { data, error } = await this.supabase.rpc('get_assignment_statistics', {\n      assignment_id: assignmentId,\n      tenant_id: this.tenantId,\n    });\n\n    if (error) {\n      throw new Error(`Repository error: ${error.message}`);\n    }\n\n    return (\n      data || {\n        totalSubmissions: 0,\n        gradedSubmissions: 0,\n        averageScore: 0,\n        completionRate: 0,\n        onTimeSubmissions: 0,\n        lateSubmissions: 0,\n      }\n    );\n  }\n\n  /**\n   * Update assignment status\n   */\n  async updateStatus(\n    assignmentId: string,\n    status: Assignment['status']\n  ): Promise<Assignment | null> {\n    return this.update(assignmentId, { status });\n  }\n\n  /**\n   * Publish assignment\n   */\n  async publish(assignmentId: string): Promise<Assignment | null> {\n    return this.updateStatus(assignmentId, 'published');\n  }\n\n  /**\n   * Archive assignment\n   */\n  async archive(assignmentId: string): Promise<Assignment | null> {\n    return this.updateStatus(assignmentId, 'archived');\n  }\n\n  /**\n   * Update assignment due date\n   */\n  async updateDueDate(assignmentId: string, dueDate: string): Promise<Assignment | null> {\n    return this.update(assignmentId, { due_date: dueDate });\n  }\n\n  /**\n   * Get assignments for student\n   */\n  async findForStudent(\n    studentId: string,\n    options: QueryOptions = {}\n  ): Promise<QueryResult<Assignment>> {\n    const { page = 1, limit = 10, sortBy = 'due_date', sortOrder = 'asc' } = options;\n\n    const from = (page - 1) * limit;\n    const to = from + limit - 1;\n\n    // Get student's class first\n    const { data: student, error: studentError } = await this.supabase\n      .from('students')\n      .select('class_id')\n      .eq('id', studentId)\n      .eq('tenant_id', this.tenantId)\n      .single();\n\n    if (studentError) {\n      throw new Error(`Repository error: ${studentError.message}`);\n    }\n\n    const { data, error, count } = await this.getBaseQuery()\n      .eq('class_id', student.class_id)\n      .eq('status', 'published')\n      .order(sortBy, { ascending: sortOrder === 'asc' })\n      .range(from, to)\n      .select('*', { count: 'exact' });\n\n    if (error) {\n      throw new Error(`Repository error: ${error.message}`);\n    }\n\n    const totalPages = Math.ceil((count || 0) / limit);\n\n    return {\n      data: data as Assignment[],\n      count: count || 0,\n      page,\n      totalPages,\n      hasMore: page < totalPages,\n    };\n  }\n\n  /**\n   * Bulk update assignment class\n   */\n  async bulkUpdateClass(assignmentIds: string[], classId: string): Promise<boolean> {\n    const { error } = await this.supabase\n      .from('assignments')\n      .update({\n        class_id: classId,\n        updated_at: new Date().toISOString(),\n      })\n      .in('id', assignmentIds)\n      .eq('tenant_id', this.tenantId);\n\n    if (error) {\n      throw new Error(`Repository error: ${error.message}`);\n    }\n\n    return true;\n  }\n\n  /**\n   * Clone assignment\n   */\n  async clone(assignmentId: string, updates: Partial<Assignment> = {}): Promise<Assignment> {\n    const originalAssignment = await this.findById(assignmentId);\n    if (!originalAssignment) {\n      throw new Error('Assignment not found');\n    }\n\n    const { id, created_at, updated_at, tenant_id, ...assignmentData } = originalAssignment;\n\n    const clonedAssignment = {\n      ...assignmentData,\n      title: `${assignmentData.title} (Copy)`,\n      status: 'draft' as const,\n      ...updates,\n    };\n\n    return this.create(clonedAssignment);\n  }\n}\n\n/**\n * Assignment Submission Repository\n */\nexport class AssignmentSubmissionRepository extends BaseRepository<AssignmentSubmission> {\n  constructor(tenantId: string = 'default-tenant') {\n    super('assignment_submissions', tenantId);\n  }\n\n  /**\n   * Find submissions by assignment ID\n   */\n  async findByAssignmentId(\n    assignmentId: string,\n    options: QueryOptions = {}\n  ): Promise<QueryResult<AssignmentSubmission>> {\n    return this.findAll({\n      ...options,\n      filters: { assignment_id: assignmentId },\n    });\n  }\n\n  /**\n   * Find submissions by student ID\n   */\n  async findByStudentId(\n    studentId: string,\n    options: QueryOptions = {}\n  ): Promise<QueryResult<AssignmentSubmission>> {\n    return this.findAll({\n      ...options,\n      filters: { student_id: studentId },\n    });\n  }\n\n  /**\n   * Find submission by assignment and student\n   */\n  async findByAssignmentAndStudent(\n    assignmentId: string,\n    studentId: string\n  ): Promise<AssignmentSubmission | null> {\n    const { data, error } = await this.getBaseQuery()\n      .eq('assignment_id', assignmentId)\n      .eq('student_id', studentId)\n      .single();\n\n    if (error) {\n      if (error.code === 'PGRST116') {\n        return null; // Not found\n      }\n      throw new Error(`Repository error: ${error.message}`);\n    }\n\n    return data as AssignmentSubmission;\n  }\n\n  /**\n   * Grade submission\n   */\n  async grade(\n    submissionId: string,\n    score: number,\n    feedback?: string,\n    gradedBy?: string\n  ): Promise<AssignmentSubmission | null> {\n    return this.update(submissionId, {\n      score,\n      feedback,\n      graded_by: gradedBy,\n      graded_at: new Date().toISOString(),\n      status: 'graded',\n    });\n  }\n\n  /**\n   * Return graded submission\n   */\n  async returnGraded(submissionId: string): Promise<AssignmentSubmission | null> {\n    return this.update(submissionId, { status: 'returned' });\n  }\n\n  /**\n   * Get ungraded submissions\n   */\n  async findUngraded(options: QueryOptions = {}): Promise<QueryResult<AssignmentSubmission>> {\n    return this.findAll({\n      ...options,\n      filters: { status: 'submitted' },\n    });\n  }\n}\n"],"names":["AssignmentRepository","AssignmentSubmissionRepository","BaseRepository","constructor","tenantId","findByClassId","classId","options","findAll","filters","class_id","findByTeacherId","teacherId","teacher_id","findByType","type","findBySubject","subject","findByDueDateRange","startDate","endDate","page","limit","sortBy","sortOrder","from","to","data","error","count","getBaseQuery","gte","lte","order","ascending","range","select","Error","message","totalPages","Math","ceil","hasMore","findUpcoming","daysAhead","Date","toISOString","now","findOverdue","lt","eq","searchByTitle","searchTerm","ilike","findWithRelations","id","supabase","single","code","getStatistics","assignmentId","rpc","assignment_id","tenant_id","totalSubmissions","gradedSubmissions","averageScore","completionRate","onTimeSubmissions","lateSubmissions","updateStatus","status","update","publish","archive","updateDueDate","dueDate","due_date","findForStudent","studentId","student","studentError","bulkUpdateClass","assignmentIds","updated_at","in","clone","updates","originalAssignment","findById","created_at","assignmentData","clonedAssignment","title","create","findByAssignmentId","findByStudentId","student_id","findByAssignmentAndStudent","grade","submissionId","score","feedback","gradedBy","graded_by","graded_at","returnGraded","findUngraded"],"mappings":"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"}