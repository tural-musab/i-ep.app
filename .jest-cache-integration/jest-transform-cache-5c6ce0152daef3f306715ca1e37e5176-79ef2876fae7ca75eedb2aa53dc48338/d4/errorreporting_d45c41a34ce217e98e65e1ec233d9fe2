862756fa841436f721eb8e0a03673307
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    reportApiError: function() {
        return reportApiError;
    },
    reportError: function() {
        return reportError;
    },
    reportRedisError: function() {
        return reportRedisError;
    },
    reportTenantError: function() {
        return reportTenantError;
    },
    reportUIError: function() {
        return reportUIError;
    },
    startPerformanceTracking: function() {
        return startPerformanceTracking;
    }
});
const _nextjs = /*#__PURE__*/ _interop_require_wildcard(require("@sentry/nextjs"));
function _getRequireWildcardCache(nodeInterop) {
    if (typeof WeakMap !== "function") return null;
    var cacheBabelInterop = new WeakMap();
    var cacheNodeInterop = new WeakMap();
    return (_getRequireWildcardCache = function(nodeInterop) {
        return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
    })(nodeInterop);
}
function _interop_require_wildcard(obj, nodeInterop) {
    if (!nodeInterop && obj && obj.__esModule) {
        return obj;
    }
    if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
        return {
            default: obj
        };
    }
    var cache = _getRequireWildcardCache(nodeInterop);
    if (cache && cache.has(obj)) {
        return cache.get(obj);
    }
    var newObj = {
        __proto__: null
    };
    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for(var key in obj){
        if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
            if (desc && (desc.get || desc.set)) {
                Object.defineProperty(newObj, key, desc);
            } else {
                newObj[key] = obj[key];
            }
        }
    }
    newObj.default = obj;
    if (cache) {
        cache.set(obj, newObj);
    }
    return newObj;
}
function reportError(error, context = {}, tags = {}, level = 'error') {
    // Tenant ID ekleme (kullanılabilirse)
    if (typeof window !== 'undefined') {
        const tenantId = localStorage.getItem('currentTenantId');
        if (tenantId) {
            tags.tenant_id = tenantId;
        }
    }
    if (error instanceof Error) {
        // Mevcut kullanıcı bilgisini ayarla (varsa)
        if (context.userId) {
            _nextjs.setUser({
                id: String(context.userId)
            });
        }
        // Etiketleri ayarla
        Object.keys(tags).forEach((tagKey)=>{
            _nextjs.setTag(tagKey, tags[tagKey]);
        });
        // Ek bağlam verilerini ekle
        _nextjs.setContext('additionalData', context);
        // Hatayı raporla
        _nextjs.captureException(error, {
            level,
            tags,
            extra: context
        });
    } else {
        // Error olmayan değerler için
        _nextjs.captureMessage(typeof error === 'string' ? error : 'Bilinmeyen hata', {
            level,
            tags,
            extra: {
                ...context,
                originalError: error
            }
        });
    }
}
function reportApiError(error, apiInfo, userId) {
    reportError(error, {
        userId,
        api: apiInfo.endpoint,
        method: apiInfo.method,
        statusCode: apiInfo.statusCode,
        requestData: apiInfo.requestData
    }, {
        error_type: 'api_error',
        endpoint: apiInfo.endpoint
    });
}
function reportUIError(error, uiInfo, userId) {
    reportError(error, {
        userId,
        component: uiInfo.component,
        action: uiInfo.action,
        additionalData: uiInfo.additionalData
    }, {
        error_type: 'ui_error',
        component: uiInfo.component
    });
}
function startPerformanceTracking(name, op, data) {
    try {
        // Sentry API değişikliği nedeniyle fonksiyon şu anda bir mock döndürüyor
        // Gerçek implementasyon için güncel Sentry dökümanlarına bakınız
        console.log(`Performance tracking başlatıldı: ${name} (${op})`);
        // Basit bir mock transaction nesnesi
        return {
            name,
            op,
            data,
            finish: ()=>console.log(`Performance tracking tamamlandı: ${name}`)
        };
    } catch (e) {
        console.error('Performans izleme başlatılamadı:', e);
        return undefined;
    }
}
function reportRedisError(error, operation, key, tenantId) {
    reportError(error, {
        operation,
        key,
        tenantId
    }, {
        error_type: 'redis_error',
        operation
    });
}
function reportTenantError(error, tenantId, operation, additionalData) {
    reportError(error, {
        tenantId,
        operation,
        additionalData
    }, {
        error_type: 'tenant_error',
        tenant_id: tenantId,
        operation
    });
}

//# sourceMappingURL=data:application/json;base64,