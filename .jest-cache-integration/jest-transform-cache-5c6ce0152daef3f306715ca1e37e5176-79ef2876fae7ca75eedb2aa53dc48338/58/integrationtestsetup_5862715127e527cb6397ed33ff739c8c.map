{"version":3,"names":["createClient","require","IntegrationTestManager","constructor","supabase","process","env","NEXT_PUBLIC_SUPABASE_URL","SUPABASE_SERVICE_ROLE_KEY","testTenantId","TEST_TENANT_ID","cleanupTasks","setupTestEnvironment","console","log","cleanupTestData","ensureTestTenant","cleanupTestEnvironment","cleanup","error","warn","message","Error","data","existingTenant","from","select","eq","single","insert","id","name","subdomain","domain","status","settings","locale","timezone","academic_year","tables","table","delete","includes","err","createTestUser","userData","defaultUser","_objectSpread","Date","now","Math","random","toString","substr","email","tenant_id","role","created_at","toISOString","updated_at","push","createTestClass","classData","defaultClass","grade_level","createTestAssignment","assignmentData","defaultAssignment","title","description","due_date","testDatabaseConnection","limit","success","testRedisConnection","Redis","redis","url","REDIS_URL","UPSTASH_REDIS_URL","token","UPSTASH_REDIS_TOKEN","testKey","set","ex","result","get","del","global","testManager","module","exports"],"sources":["integration-test-setup.js"],"sourcesContent":["/* eslint-disable @typescript-eslint/no-require-imports */\n/**\n * İ-EP.APP - Integration Test Utilities & Setup\n * Gerçek database ve Redis bağlantıları için test setup utilities\n */\n\nconst { createClient } = require('@supabase/supabase-js');\n\n/**\n * Integration Test Data Manager\n * Gerçek database ile clean fixtures için test data yönetimi\n */\nclass IntegrationTestManager {\n  constructor() {\n    this.supabase = createClient(\n      process.env.NEXT_PUBLIC_SUPABASE_URL,\n      process.env.SUPABASE_SERVICE_ROLE_KEY\n    );\n    this.testTenantId = process.env.TEST_TENANT_ID;\n    this.cleanupTasks = [];\n  }\n\n  /**\n   * Test tenant için clean environment hazırlar\n   */\n  async setupTestEnvironment() {\n    console.log('🧹 Setting up clean test environment...');\n    \n    // Clean existing test data\n    await this.cleanupTestData();\n    \n    // Create test tenant if not exists\n    await this.ensureTestTenant();\n    \n    console.log('✅ Test environment ready');\n  }\n\n  /**\n   * Test sonrası cleanup yapar\n   */\n  async cleanupTestEnvironment() {\n    console.log('🧹 Cleaning up test environment...');\n    \n    // Execute all cleanup tasks\n    for (const cleanup of this.cleanupTasks) {\n      try {\n        await cleanup();\n      } catch (error) {\n        console.warn('⚠️  Cleanup task failed:', error.message);\n      }\n    }\n    \n    // Final cleanup of test data\n    await this.cleanupTestData();\n    \n    console.log('✅ Test environment cleaned');\n  }\n\n  /**\n   * Test tenant'ın var olduğundan emin olur\n   */\n  async ensureTestTenant() {\n    if (!this.testTenantId) {\n      throw new Error('TEST_TENANT_ID environment variable is required');\n    }\n\n    const { data: existingTenant } = await this.supabase\n      .from('tenants')\n      .select('id')\n      .eq('id', this.testTenantId)\n      .single();\n\n    if (!existingTenant) {\n      const { error } = await this.supabase\n        .from('tenants')\n        .insert({\n          id: this.testTenantId,\n          name: 'Test School',\n          subdomain: 'test-school',\n          domain: 'test.i-ep.app',\n          status: 'active',\n          settings: {\n            locale: 'tr',\n            timezone: 'Europe/Istanbul',\n            academic_year: '2024-2025'\n          }\n        });\n\n      if (error) {\n        console.warn('⚠️  Could not create test tenant:', error.message);\n      } else {\n        console.log('✅ Test tenant created');\n      }\n    }\n  }\n\n  /**\n   * Test data'yı temizler\n   */\n  async cleanupTestData() {\n    const tables = [\n      'grade_comments',\n      'grades', \n      'attendance_records',\n      'assignments',\n      'users',\n      'classes',\n      'subjects'\n    ];\n\n    for (const table of tables) {\n      try {\n        const { error } = await this.supabase\n          .from(table)\n          .delete()\n          .eq('tenant_id', this.testTenantId);\n\n        if (error && !error.message.includes('does not exist')) {\n          console.warn(`⚠️  Could not clean ${table}:`, error.message);\n        }\n      } catch (err) {\n        // Table might not exist yet, ignore\n      }\n    }\n  }\n\n  /**\n   * Test user oluşturur ve cleanup task ekler\n   */\n  async createTestUser(userData = {}) {\n    const defaultUser = {\n      id: `test-user-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`,\n      email: `test-${Date.now()}@i-ep.app`,\n      tenant_id: this.testTenantId,\n      role: 'student',\n      name: 'Test User',\n      created_at: new Date().toISOString(),\n      updated_at: new Date().toISOString(),\n      ...userData\n    };\n\n    const { data, error } = await this.supabase\n      .from('users')\n      .insert(defaultUser)\n      .select()\n      .single();\n\n    if (error) {\n      throw new Error(`Failed to create test user: ${error.message}`);\n    }\n\n    // Add cleanup task\n    this.cleanupTasks.push(async () => {\n      await this.supabase\n        .from('users')\n        .delete()\n        .eq('id', data.id);\n    });\n\n    return data;\n  }\n\n  /**\n   * Test class oluşturur\n   */\n  async createTestClass(classData = {}) {\n    const defaultClass = {\n      id: `test-class-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`,\n      tenant_id: this.testTenantId,\n      name: 'Test Sınıfı',\n      grade_level: 9,\n      academic_year: '2024-2025',\n      created_at: new Date().toISOString(),\n      updated_at: new Date().toISOString(),\n      ...classData\n    };\n\n    const { data, error } = await this.supabase\n      .from('classes')\n      .insert(defaultClass)\n      .select()\n      .single();\n\n    if (error) {\n      throw new Error(`Failed to create test class: ${error.message}`);\n    }\n\n    // Add cleanup task\n    this.cleanupTasks.push(async () => {\n      await this.supabase\n        .from('classes')\n        .delete()\n        .eq('id', data.id);\n    });\n\n    return data;\n  }\n\n  /**\n   * Test assignment oluşturur\n   */\n  async createTestAssignment(assignmentData = {}) {\n    const defaultAssignment = {\n      id: `test-assignment-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`,\n      tenant_id: this.testTenantId,\n      title: 'Test Ödevi',\n      description: 'Bu bir test ödevi açıklamasıdır',\n      due_date: new Date(Date.now() + 7 * 24 * 60 * 60 * 1000).toISOString(), // 1 week from now\n      status: 'active',\n      created_at: new Date().toISOString(),\n      updated_at: new Date().toISOString(),\n      ...assignmentData\n    };\n\n    const { data, error } = await this.supabase\n      .from('assignments')\n      .insert(defaultAssignment)\n      .select()\n      .single();\n\n    if (error) {\n      throw new Error(`Failed to create test assignment: ${error.message}`);\n    }\n\n    // Add cleanup task\n    this.cleanupTasks.push(async () => {\n      await this.supabase\n        .from('assignments')\n        .delete()\n        .eq('id', data.id);\n    });\n\n    return data;\n  }\n\n  /**\n   * Database bağlantısını test eder\n   */\n  async testDatabaseConnection() {\n    try {\n      const { data, error } = await this.supabase\n        .from('tenants')\n        .select('id')\n        .limit(1);\n\n      return { success: !error, error: error?.message };\n    } catch (err) {\n      return { success: false, error: err.message };\n    }\n  }\n\n  /**\n   * Redis bağlantısını test eder\n   */\n  async testRedisConnection() {\n    try {\n      const { Redis } = require('@upstash/redis');\n      const redis = new Redis({\n        url: process.env.REDIS_URL || process.env.UPSTASH_REDIS_URL,\n        token: process.env.UPSTASH_REDIS_TOKEN || 'test-token',\n      });\n\n      const testKey = `integration-test-${Date.now()}`;\n      await redis.set(testKey, 'test-value', { ex: 5 });\n      const result = await redis.get(testKey);\n      await redis.del(testKey);\n\n      return { \n        success: result === 'test-value', \n        error: result !== 'test-value' ? 'Redis read/write test failed' : null \n      };\n    } catch (err) {\n      return { success: false, error: err.message };\n    }\n  }\n}\n\n// Global instance for use in tests\nglobal.testManager = new IntegrationTestManager();\n\n// Export for direct imports\nmodule.exports = {\n  IntegrationTestManager,\n  testManager: global.testManager\n};\n\nconsole.log('🔧 Integration test utilities loaded');\nconsole.log('🎯 TestManager available globally as testManager');\nconsole.log('📊 Clean fixtures and database utilities ready');"],"mappings":"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","ignoreList":[]}