{"version":3,"sources":["/Users/turanmusabosman/Projects/i-ep.app/src/lib/repository/attendance-repository.ts"],"sourcesContent":["/**\n * Enhanced Attendance Repository Implementation\n * Phase 3: Attendance System - Complete Implementation\n * İ-EP.APP - Devamsızlık Yönetimi\n *\n * Features:\n * - Database functions integration\n * - Advanced statistics and analytics\n * - Parent notification system\n * - Bulk operations\n * - Enterprise-grade features\n */\n\nimport { SupabaseClient } from '@supabase/supabase-js';\n\n// Core interfaces\nexport interface AttendanceRecord {\n  id: string;\n  tenant_id: string;\n  student_id: string;\n  class_id: string;\n  date: string;\n  status: 'present' | 'absent' | 'late' | 'excused' | 'sick';\n  time_in?: string;\n  time_out?: string;\n  notes?: string;\n  marked_by: string;\n  marked_at: string;\n  parent_notified: boolean;\n  notification_sent_at?: string;\n  excuse_reason?: string;\n  excuse_document?: string;\n  metadata?: Record<string, any>;\n  created_at: string;\n  updated_at: string;\n}\n\nexport interface AttendanceNotification {\n  id: string;\n  tenant_id: string;\n  attendance_record_id: string;\n  student_id: string;\n  parent_id?: string;\n  notification_type: 'sms' | 'email' | 'push';\n  notification_status: 'pending' | 'sent' | 'delivered' | 'failed';\n  message_content: string;\n  sent_at?: string;\n  delivered_at?: string;\n  error_message?: string;\n  metadata?: Record<string, any>;\n  created_at: string;\n  updated_at: string;\n}\n\nexport interface AttendanceSettings {\n  id: string;\n  tenant_id: string;\n  class_id?: string;\n  auto_notify_parents: boolean;\n  notify_on_absence: boolean;\n  notify_on_late: boolean;\n  chronic_absence_threshold: number;\n  consecutive_absence_alert: number;\n  school_start_time: string;\n  school_end_time: string;\n  late_threshold_minutes: number;\n  settings: Record<string, any>;\n  created_at: string;\n  updated_at: string;\n}\n\n// Statistics interfaces\nexport interface AttendanceStats {\n  total_days: number;\n  present_days: number;\n  absent_days: number;\n  late_days: number;\n  excused_days: number;\n  sick_days: number;\n  attendance_rate: number;\n}\n\nexport interface ClassAttendanceSummary {\n  total_students: number;\n  present_count: number;\n  absent_count: number;\n  late_count: number;\n  excused_count: number;\n  sick_count: number;\n  attendance_rate: number;\n}\n\nexport interface AttendanceTrend {\n  date: string;\n  status: string;\n  weekly_rate: number;\n  monthly_rate: number;\n}\n\nexport interface ChronicAbsentee {\n  student_id: string;\n  student_name: string;\n  class_name: string;\n  total_days: number;\n  absent_days: number;\n  absence_rate: number;\n  consecutive_absences: number;\n}\n\nexport interface PerfectAttendanceStudent {\n  student_id: string;\n  student_name: string;\n  class_name: string;\n  total_days: number;\n  present_days: number;\n  late_days: number;\n}\n\nexport interface AttendanceReportData {\n  date: string;\n  student_id: string;\n  student_name: string;\n  class_name: string;\n  status: string;\n  time_in?: string;\n  time_out?: string;\n  notes?: string;\n  marked_by_name: string;\n}\n\n// Query interfaces\nexport interface AttendanceQuery {\n  studentId?: string;\n  classId?: string;\n  date?: Date;\n  startDate?: Date;\n  endDate?: Date;\n  status?: string;\n  limit?: number;\n  offset?: number;\n}\n\nexport interface NotificationQuery {\n  studentId?: string;\n  parentId?: string;\n  status?: string;\n  type?: string;\n  limit?: number;\n  offset?: number;\n}\n\nexport interface BulkAttendanceRecord {\n  studentId: string;\n  status: 'present' | 'absent' | 'late' | 'excused' | 'sick';\n  timeIn?: string;\n  timeOut?: string;\n  notes?: string;\n  excuseReason?: string;\n  markedBy: string;\n}\n\nexport class AttendanceRepository {\n  constructor(\n    private supabase: SupabaseClient,\n    private tenantId: string\n  ) {}\n\n  // =============================================\n  // CORE ATTENDANCE OPERATIONS\n  // =============================================\n\n  /**\n   * Create new attendance record\n   */\n  async createAttendance(data: {\n    studentId: string;\n    classId: string;\n    date: Date;\n    status: AttendanceRecord['status'];\n    timeIn?: string;\n    timeOut?: string;\n    notes?: string;\n    excuseReason?: string;\n    excuseDocument?: string;\n    markedBy: string;\n  }): Promise<AttendanceRecord> {\n    const { data: result, error } = await this.supabase\n      .from('attendance_records')\n      .insert({\n        tenant_id: this.tenantId,\n        student_id: data.studentId,\n        class_id: data.classId,\n        date: data.date.toISOString().split('T')[0],\n        status: data.status,\n        time_in: data.timeIn,\n        time_out: data.timeOut,\n        notes: data.notes,\n        excuse_reason: data.excuseReason,\n        excuse_document: data.excuseDocument,\n        marked_by: data.markedBy,\n        marked_at: new Date().toISOString(),\n        parent_notified: false,\n      })\n      .select()\n      .single();\n\n    if (error) {\n      throw new Error(`Failed to create attendance record: ${error.message}`);\n    }\n\n    return result;\n  }\n\n  /**\n   * Update attendance record\n   */\n  async updateAttendance(\n    id: string,\n    data: Partial<{\n      status: AttendanceRecord['status'];\n      timeIn: string;\n      timeOut: string;\n      notes: string;\n      excuseReason: string;\n      excuseDocument: string;\n      markedBy: string;\n    }>\n  ): Promise<AttendanceRecord> {\n    const { data: result, error } = await this.supabase\n      .from('attendance_records')\n      .update({\n        ...data,\n        marked_at: new Date().toISOString(),\n      })\n      .eq('id', id)\n      .eq('tenant_id', this.tenantId)\n      .select()\n      .single();\n\n    if (error) {\n      throw new Error(`Failed to update attendance record: ${error.message}`);\n    }\n\n    return result;\n  }\n\n  /**\n   * Delete attendance record\n   */\n  async deleteAttendance(id: string): Promise<void> {\n    const { error } = await this.supabase\n      .from('attendance_records')\n      .delete()\n      .eq('id', id)\n      .eq('tenant_id', this.tenantId);\n\n    if (error) {\n      throw new Error(`Failed to delete attendance record: ${error.message}`);\n    }\n  }\n\n  /**\n   * Get attendance record by ID\n   */\n  async getAttendanceById(id: string): Promise<AttendanceRecord | null> {\n    const { data, error } = await this.supabase\n      .from('attendance_records')\n      .select('*')\n      .eq('id', id)\n      .eq('tenant_id', this.tenantId)\n      .single();\n\n    if (error) {\n      if (error.code === 'PGRST116') {\n        return null; // Not found\n      }\n      throw new Error(`Failed to get attendance record: ${error.message}`);\n    }\n\n    return data;\n  }\n\n  /**\n   * Get attendance records with filtering\n   */\n  async getAttendanceRecords(query: AttendanceQuery): Promise<AttendanceRecord[]> {\n    let supabaseQuery = this.supabase\n      .from('attendance_records')\n      .select('*')\n      .eq('tenant_id', this.tenantId);\n\n    // Apply filters\n    if (query.studentId) {\n      supabaseQuery = supabaseQuery.eq('student_id', query.studentId);\n    }\n    if (query.classId) {\n      supabaseQuery = supabaseQuery.eq('class_id', query.classId);\n    }\n    if (query.date) {\n      supabaseQuery = supabaseQuery.eq('date', query.date.toISOString().split('T')[0]);\n    }\n    if (query.startDate) {\n      supabaseQuery = supabaseQuery.gte('date', query.startDate.toISOString().split('T')[0]);\n    }\n    if (query.endDate) {\n      supabaseQuery = supabaseQuery.lte('date', query.endDate.toISOString().split('T')[0]);\n    }\n    if (query.status) {\n      supabaseQuery = supabaseQuery.eq('status', query.status);\n    }\n\n    // Apply pagination\n    if (query.limit) {\n      supabaseQuery = supabaseQuery.limit(query.limit);\n    }\n    if (query.offset) {\n      supabaseQuery = supabaseQuery.range(query.offset, query.offset + (query.limit || 50) - 1);\n    }\n\n    // Order by date (newest first)\n    supabaseQuery = supabaseQuery.order('date', { ascending: false });\n\n    const { data, error } = await supabaseQuery;\n\n    if (error) {\n      throw new Error(`Failed to get attendance records: ${error.message}`);\n    }\n\n    return data || [];\n  }\n\n  /**\n   * Get attendance records count\n   */\n  async getAttendanceRecordsCount(query: AttendanceQuery): Promise<number> {\n    let supabaseQuery = this.supabase\n      .from('attendance_records')\n      .select('*', { count: 'exact', head: true })\n      .eq('tenant_id', this.tenantId);\n\n    // Apply same filters as getAttendanceRecords\n    if (query.studentId) {\n      supabaseQuery = supabaseQuery.eq('student_id', query.studentId);\n    }\n    if (query.classId) {\n      supabaseQuery = supabaseQuery.eq('class_id', query.classId);\n    }\n    if (query.date) {\n      supabaseQuery = supabaseQuery.eq('date', query.date.toISOString().split('T')[0]);\n    }\n    if (query.startDate) {\n      supabaseQuery = supabaseQuery.gte('date', query.startDate.toISOString().split('T')[0]);\n    }\n    if (query.endDate) {\n      supabaseQuery = supabaseQuery.lte('date', query.endDate.toISOString().split('T')[0]);\n    }\n    if (query.status) {\n      supabaseQuery = supabaseQuery.eq('status', query.status);\n    }\n\n    const { count, error } = await supabaseQuery;\n\n    if (error) {\n      throw new Error(`Failed to get attendance records count: ${error.message}`);\n    }\n\n    return count || 0;\n  }\n\n  /**\n   * Get attendance by student and date\n   */\n  async getAttendanceByStudentAndDate(\n    studentId: string,\n    date: Date\n  ): Promise<AttendanceRecord | null> {\n    const { data, error } = await this.supabase\n      .from('attendance_records')\n      .select('*')\n      .eq('student_id', studentId)\n      .eq('date', date.toISOString().split('T')[0])\n      .eq('tenant_id', this.tenantId)\n      .single();\n\n    if (error) {\n      if (error.code === 'PGRST116') {\n        return null; // Not found\n      }\n      throw new Error(`Failed to get attendance record: ${error.message}`);\n    }\n\n    return data;\n  }\n\n  /**\n   * Create bulk attendance records\n   */\n  async createBulkAttendance(\n    classId: string,\n    date: Date,\n    attendanceRecords: BulkAttendanceRecord[]\n  ): Promise<AttendanceRecord[]> {\n    const records = attendanceRecords.map((record) => ({\n      tenant_id: this.tenantId,\n      student_id: record.studentId,\n      class_id: classId,\n      date: date.toISOString().split('T')[0],\n      status: record.status,\n      time_in: record.timeIn,\n      time_out: record.timeOut,\n      notes: record.notes,\n      excuse_reason: record.excuseReason,\n      marked_by: record.markedBy,\n      marked_at: new Date().toISOString(),\n      parent_notified: false,\n    }));\n\n    const { data, error } = await this.supabase\n      .from('attendance_records')\n      .upsert(records, {\n        onConflict: 'student_id,date',\n        ignoreDuplicates: false,\n      })\n      .select();\n\n    if (error) {\n      throw new Error(`Failed to create bulk attendance records: ${error.message}`);\n    }\n\n    return data || [];\n  }\n\n  // =============================================\n  // STATISTICS AND ANALYTICS\n  // =============================================\n\n  /**\n   * Get student attendance statistics\n   */\n  async getStudentAttendanceStats(\n    studentId: string,\n    startDate?: Date,\n    endDate?: Date\n  ): Promise<AttendanceStats> {\n    const { data, error } = await this.supabase.rpc('get_student_attendance_stats', {\n      p_student_id: studentId,\n      p_tenant_id: this.tenantId,\n      p_start_date: startDate?.toISOString().split('T')[0] || null,\n      p_end_date: endDate?.toISOString().split('T')[0] || null,\n    });\n\n    if (error) {\n      throw new Error(`Failed to get student attendance stats: ${error.message}`);\n    }\n\n    return (\n      data || {\n        total_days: 0,\n        present_days: 0,\n        absent_days: 0,\n        late_days: 0,\n        excused_days: 0,\n        sick_days: 0,\n        attendance_rate: 0,\n      }\n    );\n  }\n\n  /**\n   * Get class attendance summary\n   */\n  async getClassAttendanceSummary(classId: string, date?: Date): Promise<ClassAttendanceSummary> {\n    const { data, error } = await this.supabase.rpc('get_class_attendance_summary', {\n      p_class_id: classId,\n      p_tenant_id: this.tenantId,\n      p_date: date?.toISOString().split('T')[0] || new Date().toISOString().split('T')[0],\n    });\n\n    if (error) {\n      throw new Error(`Failed to get class attendance summary: ${error.message}`);\n    }\n\n    return (\n      data || {\n        total_students: 0,\n        present_count: 0,\n        absent_count: 0,\n        late_count: 0,\n        excused_count: 0,\n        sick_count: 0,\n        attendance_rate: 0,\n      }\n    );\n  }\n\n  /**\n   * Get attendance trends\n   */\n  async getAttendanceTrends(studentId: string, days: number = 30): Promise<AttendanceTrend[]> {\n    const { data, error } = await this.supabase.rpc('get_attendance_trends', {\n      p_student_id: studentId,\n      p_tenant_id: this.tenantId,\n      p_days: days,\n    });\n\n    if (error) {\n      throw new Error(`Failed to get attendance trends: ${error.message}`);\n    }\n\n    return data || [];\n  }\n\n  /**\n   * Get chronic absentees\n   */\n  async getChronicAbsentees(\n    classId?: string,\n    threshold: number = 20,\n    days: number = 30\n  ): Promise<ChronicAbsentee[]> {\n    const { data, error } = await this.supabase.rpc('get_chronic_absentees', {\n      p_tenant_id: this.tenantId,\n      p_class_id: classId || null,\n      p_threshold: threshold,\n      p_days: days,\n    });\n\n    if (error) {\n      throw new Error(`Failed to get chronic absentees: ${error.message}`);\n    }\n\n    return data || [];\n  }\n\n  /**\n   * Get perfect attendance students\n   */\n  async getPerfectAttendanceStudents(\n    classId?: string,\n    startDate?: Date,\n    endDate?: Date\n  ): Promise<PerfectAttendanceStudent[]> {\n    const { data, error } = await this.supabase.rpc('get_perfect_attendance_students', {\n      p_tenant_id: this.tenantId,\n      p_class_id: classId || null,\n      p_start_date: startDate?.toISOString().split('T')[0] || null,\n      p_end_date: endDate?.toISOString().split('T')[0] || null,\n    });\n\n    if (error) {\n      throw new Error(`Failed to get perfect attendance students: ${error.message}`);\n    }\n\n    return data || [];\n  }\n\n  /**\n   * Get attendance report data\n   */\n  async getAttendanceReport(\n    classId?: string,\n    startDate?: Date,\n    endDate?: Date,\n    studentId?: string\n  ): Promise<AttendanceReportData[]> {\n    const { data, error } = await this.supabase.rpc('get_attendance_report', {\n      p_tenant_id: this.tenantId,\n      p_class_id: classId || null,\n      p_start_date: startDate?.toISOString().split('T')[0] || null,\n      p_end_date: endDate?.toISOString().split('T')[0] || null,\n      p_student_id: studentId || null,\n    });\n\n    if (error) {\n      throw new Error(`Failed to get attendance report: ${error.message}`);\n    }\n\n    return data || [];\n  }\n\n  // =============================================\n  // NOTIFICATIONS\n  // =============================================\n\n  /**\n   * Trigger parent notification\n   */\n  async triggerParentNotification(attendanceRecordId: string): Promise<void> {\n    // This would be implemented with actual notification service\n    // For now, we'll just mark the record as needing notification\n    await this.supabase\n      .from('attendance_records')\n      .update({ parent_notified: true, notification_sent_at: new Date().toISOString() })\n      .eq('id', attendanceRecordId)\n      .eq('tenant_id', this.tenantId);\n  }\n\n  /**\n   * Send attendance notification\n   */\n  async sendAttendanceNotification(\n    attendanceRecordId: string,\n    notificationType: 'sms' | 'email' | 'push' = 'email',\n    customMessage?: string,\n    recipientOverride?: string\n  ): Promise<AttendanceNotification> {\n    // Get attendance record details\n    const attendanceRecord = await this.getAttendanceById(attendanceRecordId);\n    if (!attendanceRecord) {\n      throw new Error('Attendance record not found');\n    }\n\n    // Create notification record\n    const { data, error } = await this.supabase\n      .from('attendance_notifications')\n      .insert({\n        tenant_id: this.tenantId,\n        attendance_record_id: attendanceRecordId,\n        student_id: attendanceRecord.student_id,\n        notification_type: notificationType,\n        notification_status: 'pending',\n        message_content:\n          customMessage ||\n          `Attendance update for ${attendanceRecord.date}: ${attendanceRecord.status}`,\n      })\n      .select()\n      .single();\n\n    if (error) {\n      throw new Error(`Failed to create notification: ${error.message}`);\n    }\n\n    // Here you would integrate with actual notification service (SMS, email, push)\n    // For now, we'll just mark it as sent\n    await this.updateNotificationStatus(data.id, 'sent', new Date());\n\n    return data;\n  }\n\n  /**\n   * Get attendance notifications\n   */\n  async getAttendanceNotifications(query: NotificationQuery): Promise<AttendanceNotification[]> {\n    let supabaseQuery = this.supabase\n      .from('attendance_notifications')\n      .select('*')\n      .eq('tenant_id', this.tenantId);\n\n    // Apply filters\n    if (query.studentId) {\n      supabaseQuery = supabaseQuery.eq('student_id', query.studentId);\n    }\n    if (query.parentId) {\n      supabaseQuery = supabaseQuery.eq('parent_id', query.parentId);\n    }\n    if (query.status) {\n      supabaseQuery = supabaseQuery.eq('notification_status', query.status);\n    }\n    if (query.type) {\n      supabaseQuery = supabaseQuery.eq('notification_type', query.type);\n    }\n\n    // Apply pagination\n    if (query.limit) {\n      supabaseQuery = supabaseQuery.limit(query.limit);\n    }\n    if (query.offset) {\n      supabaseQuery = supabaseQuery.range(query.offset, query.offset + (query.limit || 50) - 1);\n    }\n\n    // Order by created_at (newest first)\n    supabaseQuery = supabaseQuery.order('created_at', { ascending: false });\n\n    const { data, error } = await supabaseQuery;\n\n    if (error) {\n      throw new Error(`Failed to get attendance notifications: ${error.message}`);\n    }\n\n    return data || [];\n  }\n\n  /**\n   * Get attendance notifications count\n   */\n  async getAttendanceNotificationsCount(query: NotificationQuery): Promise<number> {\n    let supabaseQuery = this.supabase\n      .from('attendance_notifications')\n      .select('*', { count: 'exact', head: true })\n      .eq('tenant_id', this.tenantId);\n\n    // Apply same filters as getAttendanceNotifications\n    if (query.studentId) {\n      supabaseQuery = supabaseQuery.eq('student_id', query.studentId);\n    }\n    if (query.parentId) {\n      supabaseQuery = supabaseQuery.eq('parent_id', query.parentId);\n    }\n    if (query.status) {\n      supabaseQuery = supabaseQuery.eq('notification_status', query.status);\n    }\n    if (query.type) {\n      supabaseQuery = supabaseQuery.eq('notification_type', query.type);\n    }\n\n    const { count, error } = await supabaseQuery;\n\n    if (error) {\n      throw new Error(`Failed to get attendance notifications count: ${error.message}`);\n    }\n\n    return count || 0;\n  }\n\n  /**\n   * Update notification status\n   */\n  async updateNotificationStatus(\n    notificationId: string,\n    status: 'pending' | 'sent' | 'delivered' | 'failed',\n    deliveredAt?: Date,\n    errorMessage?: string\n  ): Promise<AttendanceNotification> {\n    const { data, error } = await this.supabase\n      .from('attendance_notifications')\n      .update({\n        notification_status: status,\n        delivered_at: deliveredAt?.toISOString(),\n        error_message: errorMessage,\n      })\n      .eq('id', notificationId)\n      .eq('tenant_id', this.tenantId)\n      .select()\n      .single();\n\n    if (error) {\n      throw new Error(`Failed to update notification status: ${error.message}`);\n    }\n\n    return data;\n  }\n\n  // =============================================\n  // VALIDATION HELPERS\n  // =============================================\n\n  /**\n   * Verify student access\n   */\n  async verifyStudentAccess(studentId: string): Promise<boolean> {\n    const { data, error } = await this.supabase\n      .from('students')\n      .select('id')\n      .eq('id', studentId)\n      .eq('tenant_id', this.tenantId)\n      .single();\n\n    return !error && !!data;\n  }\n\n  /**\n   * Verify class access\n   */\n  async verifyClassAccess(classId: string): Promise<boolean> {\n    const { data, error } = await this.supabase\n      .from('classes')\n      .select('id')\n      .eq('id', classId)\n      .eq('tenant_id', this.tenantId)\n      .single();\n\n    return !error && !!data;\n  }\n\n  // =============================================\n  // SETTINGS\n  // =============================================\n\n  /**\n   * Get attendance settings\n   */\n  async getAttendanceSettings(classId?: string): Promise<AttendanceSettings | null> {\n    const { data, error } = await this.supabase\n      .from('attendance_settings')\n      .select('*')\n      .eq('tenant_id', this.tenantId)\n      .eq('class_id', classId || null)\n      .single();\n\n    if (error) {\n      if (error.code === 'PGRST116') {\n        return null; // Not found\n      }\n      throw new Error(`Failed to get attendance settings: ${error.message}`);\n    }\n\n    return data;\n  }\n\n  /**\n   * Update attendance settings\n   */\n  async updateAttendanceSettings(\n    classId: string | null,\n    settings: Partial<AttendanceSettings>\n  ): Promise<AttendanceSettings> {\n    const { data, error } = await this.supabase\n      .from('attendance_settings')\n      .upsert({\n        tenant_id: this.tenantId,\n        class_id: classId,\n        ...settings,\n      })\n      .select()\n      .single();\n\n    if (error) {\n      throw new Error(`Failed to update attendance settings: ${error.message}`);\n    }\n\n    return data;\n  }\n}\n"],"names":["AttendanceRepository","constructor","supabase","tenantId","createAttendance","data","result","error","from","insert","tenant_id","student_id","studentId","class_id","classId","date","toISOString","split","status","time_in","timeIn","time_out","timeOut","notes","excuse_reason","excuseReason","excuse_document","excuseDocument","marked_by","markedBy","marked_at","Date","parent_notified","select","single","Error","message","updateAttendance","id","update","eq","deleteAttendance","delete","getAttendanceById","code","getAttendanceRecords","query","supabaseQuery","startDate","gte","endDate","lte","limit","offset","range","order","ascending","getAttendanceRecordsCount","count","head","getAttendanceByStudentAndDate","createBulkAttendance","attendanceRecords","records","map","record","upsert","onConflict","ignoreDuplicates","getStudentAttendanceStats","rpc","p_student_id","p_tenant_id","p_start_date","p_end_date","total_days","present_days","absent_days","late_days","excused_days","sick_days","attendance_rate","getClassAttendanceSummary","p_class_id","p_date","total_students","present_count","absent_count","late_count","excused_count","sick_count","getAttendanceTrends","days","p_days","getChronicAbsentees","threshold","p_threshold","getPerfectAttendanceStudents","getAttendanceReport","triggerParentNotification","attendanceRecordId","notification_sent_at","sendAttendanceNotification","notificationType","customMessage","recipientOverride","attendanceRecord","attendance_record_id","notification_type","notification_status","message_content","updateNotificationStatus","getAttendanceNotifications","parentId","type","getAttendanceNotificationsCount","notificationId","deliveredAt","errorMessage","delivered_at","error_message","verifyStudentAccess","verifyClassAccess","getAttendanceSettings","updateAttendanceSettings","settings"],"mappings":"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"}