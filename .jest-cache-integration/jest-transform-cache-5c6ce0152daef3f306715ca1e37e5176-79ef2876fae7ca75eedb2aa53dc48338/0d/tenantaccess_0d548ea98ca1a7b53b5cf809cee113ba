f93e1a9d56e45cbdcc36ad76ffd2a80f
/**
 * Tenant erişim kontrolü modülü
 *
 * Bu modül, kullanıcıların tenant verilerine erişim hakkını
 * RLS fonksiyonlarını kullanarak kontrol eder.
 */ "use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    checkTeacherClassAccess: function() {
        return checkTeacherClassAccess;
    },
    checkTeacherStudentAccess: function() {
        return checkTeacherStudentAccess;
    },
    checkTenantAccess: function() {
        return checkTenantAccess;
    },
    getAccessDeniedLogs: function() {
        return getAccessDeniedLogs;
    },
    logAccessDenied: function() {
        return logAccessDenied;
    }
});
const _server = require("../supabase/server");
async function checkTenantAccess(userId, tenantId) {
    try {
        if (!userId || !tenantId) {
            return false;
        }
        const supabase = (0, _server.createServerSupabaseClient)();
        // Önce süper admin kontrolü yap
        const { data: isSuperAdmin, error: superAdminError } = await supabase.rpc('is_super_admin');
        if (superAdminError) {
            console.error('Süper admin kontrolü hatası:', superAdminError);
        } else if (isSuperAdmin) {
            // Süper admin her tenant'a erişebilir
            return true;
        }
        // Sonra tenant admin kontrolü yap
        const { data: isTenantAdmin, error: tenantAdminError } = await supabase.rpc('is_tenant_admin', {
            tenant_id: tenantId
        });
        if (tenantAdminError) {
            console.error('Tenant admin kontrolü hatası:', tenantAdminError);
            return false;
        }
        return !!isTenantAdmin;
    } catch (error) {
        console.error('Tenant erişim kontrolü hatası:', error);
        return false;
    }
}
async function checkTeacherStudentAccess(teacherId, studentId) {
    try {
        if (!teacherId || !studentId) {
            return false;
        }
        const supabase = (0, _server.createServerSupabaseClient)();
        // Önce süper admin kontrolü yap
        const { data: isSuperAdmin, error: superAdminError } = await supabase.rpc('is_super_admin');
        if (superAdminError) {
            console.error('Süper admin kontrolü hatası:', superAdminError);
        } else if (isSuperAdmin) {
            // Süper admin her öğrenciye erişebilir
            return true;
        }
        // Sonra öğretmenin öğrenciye erişim kontrolü yap
        const { data: hasAccess, error: accessError } = await supabase.rpc('teacher_has_student', {
            teacher_id: teacherId,
            student_id: studentId
        });
        if (accessError) {
            console.error('Öğretmen-öğrenci erişim kontrolü hatası:', accessError);
            return false;
        }
        return !!hasAccess;
    } catch (error) {
        console.error('Öğretmen-öğrenci erişim kontrolü hatası:', error);
        return false;
    }
}
async function checkTeacherClassAccess(teacherId, classId) {
    try {
        if (!teacherId || !classId) {
            return false;
        }
        const supabase = (0, _server.createServerSupabaseClient)();
        // Önce süper admin kontrolü yap
        const { data: isSuperAdmin, error: superAdminError } = await supabase.rpc('is_super_admin');
        if (superAdminError) {
            console.error('Süper admin kontrolü hatası:', superAdminError);
        } else if (isSuperAdmin) {
            // Süper admin her sınıfa erişebilir
            return true;
        }
        // Sonra öğretmenin sınıfa erişim kontrolü yap
        const { data: hasAccess, error: accessError } = await supabase.rpc('teacher_has_class', {
            teacher_id: teacherId,
            class_id: classId
        });
        if (accessError) {
            console.error('Öğretmen-sınıf erişim kontrolü hatası:', accessError);
            return false;
        }
        return !!hasAccess;
    } catch (error) {
        console.error('Öğretmen-sınıf erişim kontrolü hatası:', error);
        return false;
    }
}
async function logAccessDenied(userId, tenantId, schemaName, tableName, operation, reason, details) {
    try {
        const supabase = (0, _server.createServerSupabaseClient)();
        // SQL sorgusu kullanarak doğrudan audit şemasına ekleme yapalım
        await supabase.rpc('execute_raw_query', {
            query_text: `
        INSERT INTO audit.access_denied_logs (
          user_id, tenant_id, schema_name, table_name, 
          command, error_message, session_info, timestamp
        ) VALUES (
          $1, $2, $3, $4, $5, $6, $7, $8
        )
      `,
            params: [
                userId,
                tenantId,
                schemaName,
                tableName,
                operation,
                reason,
                JSON.stringify(details || {}),
                new Date().toISOString()
            ]
        });
    } catch (error) {
        console.error('Erişim reddi kayıt hatası:', error);
    }
}
async function getAccessDeniedLogs(tenantId, startDate, endDate) {
    try {
        const supabase = (0, _server.createServerSupabaseClient)();
        // SQL sorgusu kullanarak erişim reddi loglarını getir
        const { data, error } = await supabase.rpc('execute_raw_query', {
            query_text: `
        SELECT 
          schema_name,
          table_name,
          command,
          COUNT(*) as denied_count,
          MAX(timestamp) as most_recent_timestamp,
          MIN(error_message) as sample_error_message
        FROM audit.access_denied_logs
        WHERE tenant_id = $1
          AND timestamp BETWEEN $2 AND $3
        GROUP BY schema_name, table_name, command
        ORDER BY denied_count DESC
      `,
            params: [
                tenantId,
                startDate?.toISOString() || new Date(Date.now() - 86400000).toISOString(),
                endDate?.toISOString() || new Date().toISOString()
            ]
        });
        if (error) {
            console.error('Erişim reddi logları getirme hatası:', error);
            return [];
        }
        return data || [];
    } catch (error) {
        console.error('Erişim reddi logları getirme hatası:', error);
        return [];
    }
}

//# sourceMappingURL=data:application/json;base64,