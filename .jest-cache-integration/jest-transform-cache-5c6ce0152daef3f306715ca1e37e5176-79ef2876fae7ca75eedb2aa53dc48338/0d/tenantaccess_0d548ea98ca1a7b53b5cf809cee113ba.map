{"version":3,"sources":["/Users/turanmusabosman/Projects/i-ep.app/src/lib/tenant/tenant-access.ts"],"sourcesContent":["/**\n * Tenant erişim kontrolü modülü\n *\n * Bu modül, kullanıcıların tenant verilerine erişim hakkını\n * RLS fonksiyonlarını kullanarak kontrol eder.\n */\n\nimport { createServerSupabaseClient } from '../supabase/server';\nimport { TenantNotFoundError, TenantAccessDeniedError } from '../errors/tenant-errors';\n\n/**\n * Kullanıcının belirli bir tenant'a erişim hakkını kontrol eder\n *\n * @param userId Kontrol edilecek kullanıcı ID'si\n * @param tenantId Erişilmek istenen tenant ID'si\n * @returns Erişim hakkı varsa true, yoksa false\n */\nexport async function checkTenantAccess(userId: string, tenantId: string): Promise<boolean> {\n  try {\n    if (!userId || !tenantId) {\n      return false;\n    }\n\n    const supabase = createServerSupabaseClient();\n\n    // Önce süper admin kontrolü yap\n    const { data: isSuperAdmin, error: superAdminError } = await supabase.rpc('is_super_admin');\n\n    if (superAdminError) {\n      console.error('Süper admin kontrolü hatası:', superAdminError);\n    } else if (isSuperAdmin) {\n      // Süper admin her tenant'a erişebilir\n      return true;\n    }\n\n    // Sonra tenant admin kontrolü yap\n    const { data: isTenantAdmin, error: tenantAdminError } = await supabase.rpc('is_tenant_admin', {\n      tenant_id: tenantId,\n    });\n\n    if (tenantAdminError) {\n      console.error('Tenant admin kontrolü hatası:', tenantAdminError);\n      return false;\n    }\n\n    return !!isTenantAdmin;\n  } catch (error) {\n    console.error('Tenant erişim kontrolü hatası:', error);\n    return false;\n  }\n}\n\n/**\n * Kullanıcının belirli bir öğrenciye erişim hakkını kontrol eder\n *\n * @param teacherId Öğretmen ID'si\n * @param studentId Öğrenci ID'si\n * @returns Erişim hakkı varsa true, yoksa false\n */\nexport async function checkTeacherStudentAccess(\n  teacherId: string,\n  studentId: string\n): Promise<boolean> {\n  try {\n    if (!teacherId || !studentId) {\n      return false;\n    }\n\n    const supabase = createServerSupabaseClient();\n\n    // Önce süper admin kontrolü yap\n    const { data: isSuperAdmin, error: superAdminError } = await supabase.rpc('is_super_admin');\n\n    if (superAdminError) {\n      console.error('Süper admin kontrolü hatası:', superAdminError);\n    } else if (isSuperAdmin) {\n      // Süper admin her öğrenciye erişebilir\n      return true;\n    }\n\n    // Sonra öğretmenin öğrenciye erişim kontrolü yap\n    const { data: hasAccess, error: accessError } = await supabase.rpc('teacher_has_student', {\n      teacher_id: teacherId,\n      student_id: studentId,\n    });\n\n    if (accessError) {\n      console.error('Öğretmen-öğrenci erişim kontrolü hatası:', accessError);\n      return false;\n    }\n\n    return !!hasAccess;\n  } catch (error) {\n    console.error('Öğretmen-öğrenci erişim kontrolü hatası:', error);\n    return false;\n  }\n}\n\n/**\n * Kullanıcının belirli bir sınıfa erişim hakkını kontrol eder\n *\n * @param teacherId Öğretmen ID'si\n * @param classId Sınıf ID'si\n * @returns Erişim hakkı varsa true, yoksa false\n */\nexport async function checkTeacherClassAccess(\n  teacherId: string,\n  classId: string\n): Promise<boolean> {\n  try {\n    if (!teacherId || !classId) {\n      return false;\n    }\n\n    const supabase = createServerSupabaseClient();\n\n    // Önce süper admin kontrolü yap\n    const { data: isSuperAdmin, error: superAdminError } = await supabase.rpc('is_super_admin');\n\n    if (superAdminError) {\n      console.error('Süper admin kontrolü hatası:', superAdminError);\n    } else if (isSuperAdmin) {\n      // Süper admin her sınıfa erişebilir\n      return true;\n    }\n\n    // Sonra öğretmenin sınıfa erişim kontrolü yap\n    const { data: hasAccess, error: accessError } = await supabase.rpc('teacher_has_class', {\n      teacher_id: teacherId,\n      class_id: classId,\n    });\n\n    if (accessError) {\n      console.error('Öğretmen-sınıf erişim kontrolü hatası:', accessError);\n      return false;\n    }\n\n    return !!hasAccess;\n  } catch (error) {\n    console.error('Öğretmen-sınıf erişim kontrolü hatası:', error);\n    return false;\n  }\n}\n\n/**\n * Erişim reddedildiğinde kayıt tut\n *\n * @param userId Erişimi reddedilen kullanıcı ID'si\n * @param tenantId İlgili tenant ID'si\n * @param schemaName Şema adı\n * @param tableName Tablo adı\n * @param operation İşlem türü (okuma, yazma, silme vb)\n * @param reason Reddetme nedeni\n * @param details Ek detaylar\n */\nexport async function logAccessDenied(\n  userId: string,\n  tenantId: string,\n  schemaName: string,\n  tableName: string,\n  operation: string,\n  reason: string,\n  details?: Record<string, any>\n): Promise<void> {\n  try {\n    const supabase = createServerSupabaseClient();\n\n    // SQL sorgusu kullanarak doğrudan audit şemasına ekleme yapalım\n    await supabase.rpc('execute_raw_query', {\n      query_text: `\n        INSERT INTO audit.access_denied_logs (\n          user_id, tenant_id, schema_name, table_name, \n          command, error_message, session_info, timestamp\n        ) VALUES (\n          $1, $2, $3, $4, $5, $6, $7, $8\n        )\n      `,\n      params: [\n        userId,\n        tenantId,\n        schemaName,\n        tableName,\n        operation,\n        reason,\n        JSON.stringify(details || {}),\n        new Date().toISOString(),\n      ],\n    });\n  } catch (error) {\n    console.error('Erişim reddi kayıt hatası:', error);\n  }\n}\n\n/**\n * Belirli bir tenant için erişim reddi loglarını getir\n *\n * @param tenantId İlgili tenant ID'si\n * @param startDate Başlangıç tarihi (isteğe bağlı)\n * @param endDate Bitiş tarihi (isteğe bağlı)\n * @returns Erişim reddi logları\n */\nexport async function getAccessDeniedLogs(\n  tenantId: string,\n  startDate?: Date,\n  endDate?: Date\n): Promise<any[]> {\n  try {\n    const supabase = createServerSupabaseClient();\n\n    // SQL sorgusu kullanarak erişim reddi loglarını getir\n    const { data, error } = await supabase.rpc('execute_raw_query', {\n      query_text: `\n        SELECT \n          schema_name,\n          table_name,\n          command,\n          COUNT(*) as denied_count,\n          MAX(timestamp) as most_recent_timestamp,\n          MIN(error_message) as sample_error_message\n        FROM audit.access_denied_logs\n        WHERE tenant_id = $1\n          AND timestamp BETWEEN $2 AND $3\n        GROUP BY schema_name, table_name, command\n        ORDER BY denied_count DESC\n      `,\n      params: [\n        tenantId,\n        startDate?.toISOString() || new Date(Date.now() - 86400000).toISOString(), // Son 24 saat\n        endDate?.toISOString() || new Date().toISOString(),\n      ],\n    });\n\n    if (error) {\n      console.error('Erişim reddi logları getirme hatası:', error);\n      return [];\n    }\n\n    return (data as any[]) || [];\n  } catch (error) {\n    console.error('Erişim reddi logları getirme hatası:', error);\n    return [];\n  }\n}\n"],"names":["checkTeacherClassAccess","checkTeacherStudentAccess","checkTenantAccess","getAccessDeniedLogs","logAccessDenied","userId","tenantId","supabase","createServerSupabaseClient","data","isSuperAdmin","error","superAdminError","rpc","console","isTenantAdmin","tenantAdminError","tenant_id","teacherId","studentId","hasAccess","accessError","teacher_id","student_id","classId","class_id","schemaName","tableName","operation","reason","details","query_text","params","JSON","stringify","Date","toISOString","startDate","endDate","now"],"mappings":"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"}