95f2202df24bb370d51ddd8ecdcd4810
/**
 * İ-EP.APP Rate Limiter Integration Tests
 *
 * Bu test suite rate limiter middleware'inin doğru çalıştığını kontrol eder:
 * - Tenant bazlı rate limiting
 * - Window reset işlevselliği
 * - 429 Too Many Requests yanıtları
 */ "use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
const _rateLimiter = require("../../middleware/rateLimiter");
function _getRequireWildcardCache(nodeInterop) {
    if (typeof WeakMap !== "function") return null;
    var cacheBabelInterop = new WeakMap();
    var cacheNodeInterop = new WeakMap();
    return (_getRequireWildcardCache = function(nodeInterop) {
        return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
    })(nodeInterop);
}
function _interop_require_wildcard(obj, nodeInterop) {
    if (!nodeInterop && obj && obj.__esModule) {
        return obj;
    }
    if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
        return {
            default: obj
        };
    }
    var cache = _getRequireWildcardCache(nodeInterop);
    if (cache && cache.has(obj)) {
        return cache.get(obj);
    }
    var newObj = {
        __proto__: null
    };
    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for(var key in obj){
        if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
            if (desc && (desc.get || desc.set)) {
                Object.defineProperty(newObj, key, desc);
            } else {
                newObj[key] = obj[key];
            }
        }
    }
    newObj.default = obj;
    if (cache) {
        cache.set(obj, newObj);
    }
    return newObj;
}
// Mock environment variables to preserve original ones
const originalEnv = process.env;
// Mock NextRequest factory function
function mockNextRequest(url, tenantId) {
    return {
        nextUrl: {
            pathname: new URL(url).pathname
        },
        headers: {
            get: (key)=>{
                if (key === 'x-tenant-id') return tenantId || null;
                return null;
            }
        }
    };
}
describe('Rate Limiter Middleware Integration Tests', ()=>{
    beforeEach(()=>{
        // Clear rate limit store before each test
        (0, _rateLimiter.clearRateLimitStore)();
        // Set test environment variables
        process.env = {
            ...originalEnv,
            RATE_LIMIT_WINDOW_MS: '5000',
            RATE_LIMIT_MAX: '3'
        };
    });
    afterEach(()=>{
        // Restore original environment
        process.env = originalEnv;
    });
    describe('Rate Limiter Core Logic', ()=>{
        it('should track requests per tenant correctly', async ()=>{
            const { rateLimiterMiddleware } = await Promise.resolve().then(()=>/*#__PURE__*/ _interop_require_wildcard(require("../../middleware/rateLimiter")));
            const request = mockNextRequest('http://localhost:3000/api/test', 'tenant-1');
            // First 3 requests should be allowed
            expect(rateLimiterMiddleware(request)).toBeNull();
            expect(rateLimiterMiddleware(request)).toBeNull();
            expect(rateLimiterMiddleware(request)).toBeNull();
            // Fourth request should be rate limited
            const response = rateLimiterMiddleware(request);
            expect(response).not.toBeNull();
            expect(response?.status).toBe(429);
        });
        it('should isolate rate limits between tenants', async ()=>{
            const { rateLimiterMiddleware } = await Promise.resolve().then(()=>/*#__PURE__*/ _interop_require_wildcard(require("../../middleware/rateLimiter")));
            const tenant1Request = mockNextRequest('http://localhost:3000/api/test', 'tenant-1');
            const tenant2Request = mockNextRequest('http://localhost:3000/api/test', 'tenant-2');
            // Use up rate limit for tenant-1
            rateLimiterMiddleware(tenant1Request);
            rateLimiterMiddleware(tenant1Request);
            rateLimiterMiddleware(tenant1Request);
            // Tenant-1 should be rate limited
            const tenant1Response = rateLimiterMiddleware(tenant1Request);
            expect(tenant1Response?.status).toBe(429);
            // Tenant-2 should still be allowed
            const tenant2Response = rateLimiterMiddleware(tenant2Request);
            expect(tenant2Response).toBeNull();
        });
        it('should handle requests without tenant-id (use default)', async ()=>{
            const { rateLimiterMiddleware } = await Promise.resolve().then(()=>/*#__PURE__*/ _interop_require_wildcard(require("../../middleware/rateLimiter")));
            const request = mockNextRequest('http://localhost:3000/api/test'); // No tenant-id
            // Should work with default tenant
            expect(rateLimiterMiddleware(request)).toBeNull();
            expect(rateLimiterMiddleware(request)).toBeNull();
            expect(rateLimiterMiddleware(request)).toBeNull();
            // Fourth request should be rate limited
            const response = rateLimiterMiddleware(request);
            expect(response?.status).toBe(429);
        });
        it('should skip rate limiting for non-API routes', async ()=>{
            const { rateLimiterMiddleware } = await Promise.resolve().then(()=>/*#__PURE__*/ _interop_require_wildcard(require("../../middleware/rateLimiter")));
            const request = mockNextRequest('http://localhost:3000/dashboard', 'tenant-1');
            const response = rateLimiterMiddleware(request);
            expect(response).toBeNull(); // Should skip rate limiting
        });
        it('should return proper 429 response with headers', async ()=>{
            const { rateLimiterMiddleware } = await Promise.resolve().then(()=>/*#__PURE__*/ _interop_require_wildcard(require("../../middleware/rateLimiter")));
            const request = mockNextRequest('http://localhost:3000/api/test', 'tenant-1');
            // Use up rate limit
            rateLimiterMiddleware(request);
            rateLimiterMiddleware(request);
            rateLimiterMiddleware(request);
            // Fourth request should return 429 with proper headers
            const response = rateLimiterMiddleware(request);
            expect(response?.status).toBe(429);
            expect(response?.headers.get('Retry-After')).toBeTruthy();
            expect(response?.headers.get('X-RateLimit-Limit')).toBe('3');
            expect(response?.headers.get('X-RateLimit-Remaining')).toBe('0');
        });
        it('should reset rate limit after window expires', (done)=>{
            Promise.resolve().then(()=>/*#__PURE__*/ _interop_require_wildcard(require("../../middleware/rateLimiter"))).then(({ rateLimiterMiddleware })=>{
                const request = mockNextRequest('http://localhost:3000/api/test', 'tenant-1');
                // Use up the rate limit
                rateLimiterMiddleware(request);
                rateLimiterMiddleware(request);
                rateLimiterMiddleware(request);
                // Should be rate limited
                const blockedResponse = rateLimiterMiddleware(request);
                expect(blockedResponse?.status).toBe(429);
                // Wait for window to expire (5 seconds + buffer)
                setTimeout(()=>{
                    const allowedResponse = rateLimiterMiddleware(request);
                    expect(allowedResponse).toBeNull(); // Should be allowed again
                    done();
                }, 5100);
            });
        }, 10000);
    });
    describe('Configuration Handling', ()=>{
        it('should handle missing environment variables gracefully', async ()=>{
            // Remove environment variables
            delete process.env.RATE_LIMIT_WINDOW_MS;
            delete process.env.RATE_LIMIT_MAX;
            const { rateLimiterMiddleware } = await Promise.resolve().then(()=>/*#__PURE__*/ _interop_require_wildcard(require("../../middleware/rateLimiter")));
            const request = mockNextRequest('http://localhost:3000/api/test', 'tenant-1');
            const response = rateLimiterMiddleware(request);
            expect(response).toBeNull(); // Should work with defaults
        });
        it('should handle invalid environment variables', async ()=>{
            process.env.RATE_LIMIT_WINDOW_MS = 'invalid';
            process.env.RATE_LIMIT_MAX = 'invalid';
            const { rateLimiterMiddleware } = await Promise.resolve().then(()=>/*#__PURE__*/ _interop_require_wildcard(require("../../middleware/rateLimiter")));
            const request = mockNextRequest('http://localhost:3000/api/test', 'tenant-1');
            const response = rateLimiterMiddleware(request);
            expect(response).toBeNull(); // Should handle gracefully
        });
    });
    describe('Utility Functions', ()=>{
        it('should clear rate limit store', async ()=>{
            const { rateLimiterMiddleware } = await Promise.resolve().then(()=>/*#__PURE__*/ _interop_require_wildcard(require("../../middleware/rateLimiter")));
            const request = mockNextRequest('http://localhost:3000/api/test', 'tenant-1');
            // Make some requests
            rateLimiterMiddleware(request);
            rateLimiterMiddleware(request);
            // Verify tenant has some rate limit status
            const statusBefore = (0, _rateLimiter.getRateLimitStatus)('tenant-1');
            expect(statusBefore).not.toBeNull();
            expect(statusBefore?.count).toBe(2);
            // Clear store
            (0, _rateLimiter.clearRateLimitStore)();
            // Verify status is cleared
            const statusAfter = (0, _rateLimiter.getRateLimitStatus)('tenant-1');
            expect(statusAfter).toBeNull();
        });
        it('should track rate limit status correctly', async ()=>{
            const { rateLimiterMiddleware } = await Promise.resolve().then(()=>/*#__PURE__*/ _interop_require_wildcard(require("../../middleware/rateLimiter")));
            const request = mockNextRequest('http://localhost:3000/api/test', 'tenant-1');
            // Initial status should be null
            expect((0, _rateLimiter.getRateLimitStatus)('tenant-1')).toBeNull();
            // Make a request
            rateLimiterMiddleware(request);
            // Status should show count
            const status = (0, _rateLimiter.getRateLimitStatus)('tenant-1');
            expect(status).not.toBeNull();
            expect(status?.count).toBe(1);
            expect(typeof status?.windowStart).toBe('number');
        });
    });
});

//# sourceMappingURL=data:application/json;base64,