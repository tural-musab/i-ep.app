{"version":3,"sources":["/Users/turanmusabosman/Projects/i-ep.app/src/__tests__/integration/quarantine/rateLimiter.test.ts"],"sourcesContent":["/**\n * İ-EP.APP Rate Limiter Integration Tests\n *\n * Bu test suite rate limiter middleware'inin doğru çalıştığını kontrol eder:\n * - Tenant bazlı rate limiting\n * - Window reset işlevselliği\n * - 429 Too Many Requests yanıtları\n */\n\nimport { clearRateLimitStore, getRateLimitStatus } from '../../middleware/rateLimiter';\nimport { NextRequest } from 'next/server';\n\n// Mock environment variables to preserve original ones\nconst originalEnv = process.env;\n\n// Mock tip tanımları\ninterface MockNextRequest {\n  nextUrl: {\n    pathname: string;\n  };\n  headers: {\n    get: (key: string) => string | null;\n  };\n}\n\n// Mock NextRequest factory function\nfunction mockNextRequest(url: string, tenantId?: string): MockNextRequest {\n  return {\n    nextUrl: {\n      pathname: new URL(url).pathname,\n    },\n    headers: {\n      get: (key: string) => {\n        if (key === 'x-tenant-id') return tenantId || null;\n        return null;\n      },\n    },\n  };\n}\n\ndescribe('Rate Limiter Middleware Integration Tests', () => {\n  beforeEach(() => {\n    // Clear rate limit store before each test\n    clearRateLimitStore();\n\n    // Set test environment variables\n    process.env = {\n      ...originalEnv,\n      RATE_LIMIT_WINDOW_MS: '5000', // 5 seconds for faster testing\n      RATE_LIMIT_MAX: '3', // 3 requests max for easier testing\n    };\n  });\n\n  afterEach(() => {\n    // Restore original environment\n    process.env = originalEnv;\n  });\n\n  describe('Rate Limiter Core Logic', () => {\n    it('should track requests per tenant correctly', async () => {\n      const { rateLimiterMiddleware } = await import('../../middleware/rateLimiter');\n\n      const request = mockNextRequest(\n        'http://localhost:3000/api/test',\n        'tenant-1'\n      ) as unknown as NextRequest;\n\n      // First 3 requests should be allowed\n      expect(rateLimiterMiddleware(request)).toBeNull();\n      expect(rateLimiterMiddleware(request)).toBeNull();\n      expect(rateLimiterMiddleware(request)).toBeNull();\n\n      // Fourth request should be rate limited\n      const response = rateLimiterMiddleware(request);\n      expect(response).not.toBeNull();\n      expect(response?.status).toBe(429);\n    });\n\n    it('should isolate rate limits between tenants', async () => {\n      const { rateLimiterMiddleware } = await import('../../middleware/rateLimiter');\n\n      const tenant1Request = mockNextRequest('http://localhost:3000/api/test', 'tenant-1');\n      const tenant2Request = mockNextRequest('http://localhost:3000/api/test', 'tenant-2');\n\n      // Use up rate limit for tenant-1\n      rateLimiterMiddleware(tenant1Request);\n      rateLimiterMiddleware(tenant1Request);\n      rateLimiterMiddleware(tenant1Request);\n\n      // Tenant-1 should be rate limited\n      const tenant1Response = rateLimiterMiddleware(tenant1Request);\n      expect(tenant1Response?.status).toBe(429);\n\n      // Tenant-2 should still be allowed\n      const tenant2Response = rateLimiterMiddleware(tenant2Request);\n      expect(tenant2Response).toBeNull();\n    });\n\n    it('should handle requests without tenant-id (use default)', async () => {\n      const { rateLimiterMiddleware } = await import('../../middleware/rateLimiter');\n\n      const request = mockNextRequest('http://localhost:3000/api/test'); // No tenant-id\n\n      // Should work with default tenant\n      expect(rateLimiterMiddleware(request)).toBeNull();\n      expect(rateLimiterMiddleware(request)).toBeNull();\n      expect(rateLimiterMiddleware(request)).toBeNull();\n\n      // Fourth request should be rate limited\n      const response = rateLimiterMiddleware(request);\n      expect(response?.status).toBe(429);\n    });\n\n    it('should skip rate limiting for non-API routes', async () => {\n      const { rateLimiterMiddleware } = await import('../../middleware/rateLimiter');\n\n      const request = mockNextRequest('http://localhost:3000/dashboard', 'tenant-1');\n      const response = rateLimiterMiddleware(request);\n      expect(response).toBeNull(); // Should skip rate limiting\n    });\n\n    it('should return proper 429 response with headers', async () => {\n      const { rateLimiterMiddleware } = await import('../../middleware/rateLimiter');\n\n      const request = mockNextRequest('http://localhost:3000/api/test', 'tenant-1');\n\n      // Use up rate limit\n      rateLimiterMiddleware(request);\n      rateLimiterMiddleware(request);\n      rateLimiterMiddleware(request);\n\n      // Fourth request should return 429 with proper headers\n      const response = rateLimiterMiddleware(request);\n      expect(response?.status).toBe(429);\n      expect(response?.headers.get('Retry-After')).toBeTruthy();\n      expect(response?.headers.get('X-RateLimit-Limit')).toBe('3');\n      expect(response?.headers.get('X-RateLimit-Remaining')).toBe('0');\n    });\n\n    it('should reset rate limit after window expires', (done) => {\n      import('../../middleware/rateLimiter').then(({ rateLimiterMiddleware }) => {\n        const request = mockNextRequest('http://localhost:3000/api/test', 'tenant-1');\n\n        // Use up the rate limit\n        rateLimiterMiddleware(request);\n        rateLimiterMiddleware(request);\n        rateLimiterMiddleware(request);\n\n        // Should be rate limited\n        const blockedResponse = rateLimiterMiddleware(request);\n        expect(blockedResponse?.status).toBe(429);\n\n        // Wait for window to expire (5 seconds + buffer)\n        setTimeout(() => {\n          const allowedResponse = rateLimiterMiddleware(request);\n          expect(allowedResponse).toBeNull(); // Should be allowed again\n          done();\n        }, 5100);\n      });\n    }, 10000);\n  });\n\n  describe('Configuration Handling', () => {\n    it('should handle missing environment variables gracefully', async () => {\n      // Remove environment variables\n      delete process.env.RATE_LIMIT_WINDOW_MS;\n      delete process.env.RATE_LIMIT_MAX;\n\n      const { rateLimiterMiddleware } = await import('../../middleware/rateLimiter');\n\n      const request = mockNextRequest('http://localhost:3000/api/test', 'tenant-1');\n      const response = rateLimiterMiddleware(request);\n      expect(response).toBeNull(); // Should work with defaults\n    });\n\n    it('should handle invalid environment variables', async () => {\n      process.env.RATE_LIMIT_WINDOW_MS = 'invalid';\n      process.env.RATE_LIMIT_MAX = 'invalid';\n\n      const { rateLimiterMiddleware } = await import('../../middleware/rateLimiter');\n\n      const request = mockNextRequest('http://localhost:3000/api/test', 'tenant-1');\n      const response = rateLimiterMiddleware(request);\n      expect(response).toBeNull(); // Should handle gracefully\n    });\n  });\n\n  describe('Utility Functions', () => {\n    it('should clear rate limit store', async () => {\n      const { rateLimiterMiddleware } = await import('../../middleware/rateLimiter');\n\n      const request = mockNextRequest('http://localhost:3000/api/test', 'tenant-1');\n\n      // Make some requests\n      rateLimiterMiddleware(request);\n      rateLimiterMiddleware(request);\n\n      // Verify tenant has some rate limit status\n      const statusBefore = getRateLimitStatus('tenant-1');\n      expect(statusBefore).not.toBeNull();\n      expect(statusBefore?.count).toBe(2);\n\n      // Clear store\n      clearRateLimitStore();\n\n      // Verify status is cleared\n      const statusAfter = getRateLimitStatus('tenant-1');\n      expect(statusAfter).toBeNull();\n    });\n\n    it('should track rate limit status correctly', async () => {\n      const { rateLimiterMiddleware } = await import('../../middleware/rateLimiter');\n\n      const request = mockNextRequest('http://localhost:3000/api/test', 'tenant-1');\n\n      // Initial status should be null\n      expect(getRateLimitStatus('tenant-1')).toBeNull();\n\n      // Make a request\n      rateLimiterMiddleware(request);\n\n      // Status should show count\n      const status = getRateLimitStatus('tenant-1');\n      expect(status).not.toBeNull();\n      expect(status?.count).toBe(1);\n      expect(typeof status?.windowStart).toBe('number');\n    });\n  });\n});\n"],"names":["originalEnv","process","env","mockNextRequest","url","tenantId","nextUrl","pathname","URL","headers","get","key","describe","beforeEach","clearRateLimitStore","RATE_LIMIT_WINDOW_MS","RATE_LIMIT_MAX","afterEach","it","rateLimiterMiddleware","request","expect","toBeNull","response","not","status","toBe","tenant1Request","tenant2Request","tenant1Response","tenant2Response","toBeTruthy","done","then","blockedResponse","setTimeout","allowedResponse","statusBefore","getRateLimitStatus","count","statusAfter","windowStart"],"mappings":"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"}