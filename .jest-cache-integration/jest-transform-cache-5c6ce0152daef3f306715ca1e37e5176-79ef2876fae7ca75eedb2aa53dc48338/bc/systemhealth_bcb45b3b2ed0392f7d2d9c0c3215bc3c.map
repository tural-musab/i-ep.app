{"version":3,"sources":["/Users/turanmusabosman/Projects/i-ep.app/src/lib/system/system-health.ts"],"sourcesContent":["/**\n * System Health Service\n * Sprint 7: Super Admin Paneli - Sistem Sağlığı İzleme\n *\n * Bu servis sistem bileşenlerinin sağlığını kontrol eder:\n * - Database bağlantısı ve performansı\n * - Redis cache durumu\n * - SSL sertifika durumları\n * - Sistem metrikleri\n */\n\nimport {\n  SystemHealthReport,\n  DatabaseHealth,\n  RedisHealth,\n  SSLHealth,\n  HealthCheck,\n  SystemHealthStatus,\n} from '@/types/system-health';\nimport { redis } from '@/lib/cache/redis';\nimport { supabaseAdmin } from '@/lib/supabase/admin';\nimport { getLogger } from '@/lib/utils/logger';\n\nconst logger = getLogger('system-health');\nconst startTime = Date.now();\n\nexport class SystemHealthService {\n  /**\n   * Tam sistem sağlığı raporu oluşturur\n   */\n  static async generateHealthReport(): Promise<SystemHealthReport> {\n    const timestamp = new Date().toISOString();\n    const checks: HealthCheck[] = [];\n\n    // Paralel sağlık kontrolleri\n    const [databaseHealth, redisHealth, sslHealths] = await Promise.allSettled([\n      this.checkDatabaseHealth(),\n      this.checkRedisHealth(),\n      this.checkSSLHealth(),\n    ]);\n\n    // Database health check\n    const dbHealth =\n      databaseHealth.status === 'fulfilled'\n        ? databaseHealth.value\n        : { connection: false, responseTime: 0 };\n\n    checks.push({\n      name: 'database',\n      status: dbHealth.connection ? 'pass' : 'fail',\n      message: dbHealth.connection ? 'Database connection healthy' : 'Database connection failed',\n      duration: dbHealth.responseTime,\n      timestamp,\n    });\n\n    // Redis health check\n    const redisHealthResult =\n      redisHealth.status === 'fulfilled'\n        ? redisHealth.value\n        : { connection: false, responseTime: 0 };\n\n    checks.push({\n      name: 'redis',\n      status: redisHealthResult.connection ? 'pass' : 'fail',\n      message: redisHealthResult.connection\n        ? 'Redis connection healthy'\n        : 'Redis connection failed',\n      duration: redisHealthResult.responseTime,\n      timestamp,\n    });\n\n    // SSL health checks\n    const sslResults = sslHealths.status === 'fulfilled' ? sslHealths.value : [];\n    const sslFailures = sslResults.filter(\n      (ssl) => ssl.status === 'expired' || ssl.status === 'invalid'\n    );\n    const sslWarnings = sslResults.filter((ssl) => ssl.status === 'expiring');\n\n    checks.push({\n      name: 'ssl_certificates',\n      status: sslFailures.length > 0 ? 'fail' : sslWarnings.length > 0 ? 'warn' : 'pass',\n      message: `${sslResults.length} certificates checked, ${sslFailures.length} failures, ${sslWarnings.length} warnings`,\n      duration: 0,\n      timestamp,\n    });\n\n    // Overall status determination\n    const failedChecks = checks.filter((check) => check.status === 'fail').length;\n    const warnChecks = checks.filter((check) => check.status === 'warn').length;\n\n    let overallStatus: SystemHealthStatus['status'] = 'healthy';\n    if (failedChecks > 0) {\n      overallStatus = 'down';\n    } else if (warnChecks > 0) {\n      overallStatus = 'degraded';\n    }\n\n    const overall: SystemHealthStatus = {\n      status: overallStatus,\n      timestamp,\n      uptime: Math.floor((Date.now() - startTime) / 1000),\n      checks,\n      version: process.env.npm_package_version || '1.0.0',\n      environment: process.env.NODE_ENV || 'development',\n    };\n\n    return {\n      overall,\n      database: dbHealth,\n      redis: redisHealthResult,\n      ssl: sslResults,\n    };\n  }\n\n  /**\n   * Database sağlığını kontrol eder\n   */\n  static async checkDatabaseHealth(): Promise<DatabaseHealth> {\n    const startTime = Date.now();\n\n    try {\n      // Simple connectivity test\n      const { error } = await supabaseAdmin.from('tenants').select('count').limit(1);\n\n      const responseTime = Date.now() - startTime;\n\n      if (error) {\n        logger.error('Database health check failed:', error);\n        return {\n          connection: false,\n          responseTime,\n          lastQuery: 'SELECT count FROM tenants LIMIT 1',\n        };\n      }\n\n      // Get connection stats if available\n      let connectionStats = {};\n      try {\n        const { data: stats } = await supabaseAdmin.rpc('pg_stat_database');\n        if (stats && stats.length > 0) {\n          connectionStats = {\n            activeConnections: stats[0].numbackends || 0,\n            maxConnections: 100, // Default, should be configurable\n          };\n        }\n      } catch (statsError) {\n        // Connection stats are optional\n        logger.warn('Could not fetch connection stats:', statsError);\n      }\n\n      return {\n        connection: true,\n        responseTime,\n        lastQuery: 'SELECT count FROM tenants LIMIT 1',\n        ...connectionStats,\n      };\n    } catch (error) {\n      logger.error('Database health check error:', error);\n      return {\n        connection: false,\n        responseTime: Date.now() - startTime,\n      };\n    }\n  }\n\n  /**\n   * Redis sağlığını kontrol eder\n   */\n  static async checkRedisHealth(): Promise<RedisHealth> {\n    const startTime = Date.now();\n\n    try {\n      // Test Redis connection with ping\n      const pingResult = await redis.ping();\n      const responseTime = Date.now() - startTime;\n\n      if (pingResult !== 'PONG') {\n        return {\n          connection: false,\n          responseTime,\n        };\n      }\n\n      // Get Redis info if available\n      let additionalInfo = {};\n      try {\n        // Get key count from default database\n        const keyCount = await redis.dbsize();\n\n        // Try to get memory info (this might not work with Upstash REST API)\n        additionalInfo = {\n          keyCount: keyCount || 0,\n        };\n      } catch (infoError) {\n        // Additional info is optional\n        logger.warn('Could not fetch Redis additional info:', infoError);\n      }\n\n      return {\n        connection: true,\n        responseTime,\n        ...additionalInfo,\n      };\n    } catch (error) {\n      logger.error('Redis health check error:', error);\n      return {\n        connection: false,\n        responseTime: Date.now() - startTime,\n      };\n    }\n  }\n\n  /**\n   * SSL sertifika durumlarını kontrol eder\n   */\n  static async checkSSLHealth(): Promise<SSLHealth[]> {\n    try {\n      // Get all domains from database\n      const { data: domains, error } = await supabaseAdmin\n        .from('tenant_domains')\n        .select('domain, tenant_id, is_verified')\n        .eq('is_verified', true);\n\n      if (error) {\n        logger.error('Failed to fetch domains for SSL check:', error);\n        return [];\n      }\n\n      if (!domains || domains.length === 0) {\n        return [];\n      }\n\n      // Check SSL for each domain (in parallel, but limited)\n      const sslChecks = domains.slice(0, 10).map((domain) => this.checkDomainSSL(domain.domain));\n\n      const results = await Promise.allSettled(sslChecks);\n\n      return results\n        .filter((result) => result.status === 'fulfilled')\n        .map((result) => (result as PromiseFulfilledResult<SSLHealth>).value)\n        .filter((ssl) => ssl !== null);\n    } catch (error) {\n      logger.error('SSL health check error:', error);\n      return [];\n    }\n  }\n\n  /**\n   * Einzelne Domain için SSL kontrolü\n   */\n  private static async checkDomainSSL(domain: string): Promise<SSLHealth> {\n    try {\n      // For now, we'll do a basic check. In production, you might want to use\n      // a proper SSL certificate checking library\n      const controller = new AbortController();\n      const timeoutId = setTimeout(() => controller.abort(), 5000);\n\n      const response = await fetch(`https://${domain}`, {\n        method: 'HEAD',\n        signal: controller.signal,\n      });\n\n      clearTimeout(timeoutId);\n\n      // Basic SSL validation - if HTTPS request succeeds, SSL is likely valid\n      const isValid = response.ok;\n\n      return {\n        domain,\n        isValid,\n        status: isValid ? 'valid' : 'invalid',\n      };\n    } catch (error) {\n      logger.warn(`SSL check failed for ${domain}:`, error);\n      return {\n        domain,\n        isValid: false,\n        status: 'invalid',\n      };\n    }\n  }\n\n  /**\n   * Hızlı sistem durumu kontrolü (sadece kritik bileşenler)\n   */\n  static async quickHealthCheck(): Promise<{ status: string; timestamp: string }> {\n    const timestamp = new Date().toISOString();\n\n    try {\n      // Parallel quick checks\n      const [dbCheck, redisCheck] = await Promise.allSettled([\n        this.quickDatabaseCheck(),\n        this.quickRedisCheck(),\n      ]);\n\n      const dbHealthy = dbCheck.status === 'fulfilled' && dbCheck.value;\n      const redisHealthy = redisCheck.status === 'fulfilled' && redisCheck.value;\n\n      let status = 'healthy';\n      if (!dbHealthy || !redisHealthy) {\n        status = 'unhealthy';\n      }\n\n      return { status, timestamp };\n    } catch (error) {\n      logger.error('Quick health check failed:', error);\n      return { status: 'unhealthy', timestamp };\n    }\n  }\n\n  private static async quickDatabaseCheck(): Promise<boolean> {\n    try {\n      const { error } = await supabaseAdmin.from('tenants').select('id').limit(1);\n\n      return !error;\n    } catch {\n      return false;\n    }\n  }\n\n  private static async quickRedisCheck(): Promise<boolean> {\n    try {\n      const result = await redis.ping();\n      return result === 'PONG';\n    } catch {\n      return false;\n    }\n  }\n}\n"],"names":["SystemHealthService","logger","getLogger","startTime","Date","now","generateHealthReport","timestamp","toISOString","checks","databaseHealth","redisHealth","sslHealths","Promise","allSettled","checkDatabaseHealth","checkRedisHealth","checkSSLHealth","dbHealth","status","value","connection","responseTime","push","name","message","duration","redisHealthResult","sslResults","sslFailures","filter","ssl","sslWarnings","length","failedChecks","check","warnChecks","overallStatus","overall","uptime","Math","floor","version","process","env","npm_package_version","environment","NODE_ENV","database","redis","error","supabaseAdmin","from","select","limit","lastQuery","connectionStats","data","stats","rpc","activeConnections","numbackends","maxConnections","statsError","warn","pingResult","ping","additionalInfo","keyCount","dbsize","infoError","domains","eq","sslChecks","slice","map","domain","checkDomainSSL","results","result","controller","AbortController","timeoutId","setTimeout","abort","response","fetch","method","signal","clearTimeout","isValid","ok","quickHealthCheck","dbCheck","redisCheck","quickDatabaseCheck","quickRedisCheck","dbHealthy","redisHealthy"],"mappings":"AAAA;;;;;;;;;CASC;;;;+BAiBYA;;;eAAAA;;;uBAPS;uBACQ;wBACJ;AAE1B,MAAMC,SAASC,IAAAA,iBAAS,EAAC;AACzB,MAAMC,YAAYC,KAAKC,GAAG;AAEnB,MAAML;IACX;;GAEC,GACD,aAAaM,uBAAoD;QAC/D,MAAMC,YAAY,IAAIH,OAAOI,WAAW;QACxC,MAAMC,SAAwB,EAAE;QAEhC,6BAA6B;QAC7B,MAAM,CAACC,gBAAgBC,aAAaC,WAAW,GAAG,MAAMC,QAAQC,UAAU,CAAC;YACzE,IAAI,CAACC,mBAAmB;YACxB,IAAI,CAACC,gBAAgB;YACrB,IAAI,CAACC,cAAc;SACpB;QAED,wBAAwB;QACxB,MAAMC,WACJR,eAAeS,MAAM,KAAK,cACtBT,eAAeU,KAAK,GACpB;YAAEC,YAAY;YAAOC,cAAc;QAAE;QAE3Cb,OAAOc,IAAI,CAAC;YACVC,MAAM;YACNL,QAAQD,SAASG,UAAU,GAAG,SAAS;YACvCI,SAASP,SAASG,UAAU,GAAG,gCAAgC;YAC/DK,UAAUR,SAASI,YAAY;YAC/Bf;QACF;QAEA,qBAAqB;QACrB,MAAMoB,oBACJhB,YAAYQ,MAAM,KAAK,cACnBR,YAAYS,KAAK,GACjB;YAAEC,YAAY;YAAOC,cAAc;QAAE;QAE3Cb,OAAOc,IAAI,CAAC;YACVC,MAAM;YACNL,QAAQQ,kBAAkBN,UAAU,GAAG,SAAS;YAChDI,SAASE,kBAAkBN,UAAU,GACjC,6BACA;YACJK,UAAUC,kBAAkBL,YAAY;YACxCf;QACF;QAEA,oBAAoB;QACpB,MAAMqB,aAAahB,WAAWO,MAAM,KAAK,cAAcP,WAAWQ,KAAK,GAAG,EAAE;QAC5E,MAAMS,cAAcD,WAAWE,MAAM,CACnC,CAACC,MAAQA,IAAIZ,MAAM,KAAK,aAAaY,IAAIZ,MAAM,KAAK;QAEtD,MAAMa,cAAcJ,WAAWE,MAAM,CAAC,CAACC,MAAQA,IAAIZ,MAAM,KAAK;QAE9DV,OAAOc,IAAI,CAAC;YACVC,MAAM;YACNL,QAAQU,YAAYI,MAAM,GAAG,IAAI,SAASD,YAAYC,MAAM,GAAG,IAAI,SAAS;YAC5ER,SAAS,GAAGG,WAAWK,MAAM,CAAC,uBAAuB,EAAEJ,YAAYI,MAAM,CAAC,WAAW,EAAED,YAAYC,MAAM,CAAC,SAAS,CAAC;YACpHP,UAAU;YACVnB;QACF;QAEA,+BAA+B;QAC/B,MAAM2B,eAAezB,OAAOqB,MAAM,CAAC,CAACK,QAAUA,MAAMhB,MAAM,KAAK,QAAQc,MAAM;QAC7E,MAAMG,aAAa3B,OAAOqB,MAAM,CAAC,CAACK,QAAUA,MAAMhB,MAAM,KAAK,QAAQc,MAAM;QAE3E,IAAII,gBAA8C;QAClD,IAAIH,eAAe,GAAG;YACpBG,gBAAgB;QAClB,OAAO,IAAID,aAAa,GAAG;YACzBC,gBAAgB;QAClB;QAEA,MAAMC,UAA8B;YAClCnB,QAAQkB;YACR9B;YACAgC,QAAQC,KAAKC,KAAK,CAAC,AAACrC,CAAAA,KAAKC,GAAG,KAAKF,SAAQ,IAAK;YAC9CM;YACAiC,SAASC,QAAQC,GAAG,CAACC,mBAAmB,IAAI;YAC5CC,aAAaH,QAAQC,GAAG,CAACG,QAAQ,IAAI;QACvC;QAEA,OAAO;YACLT;YACAU,UAAU9B;YACV+B,OAAOtB;YACPI,KAAKH;QACP;IACF;IAEA;;GAEC,GACD,aAAab,sBAA+C;QAC1D,MAAMZ,YAAYC,KAAKC,GAAG;QAE1B,IAAI;YACF,2BAA2B;YAC3B,MAAM,EAAE6C,KAAK,EAAE,GAAG,MAAMC,oBAAa,CAACC,IAAI,CAAC,WAAWC,MAAM,CAAC,SAASC,KAAK,CAAC;YAE5E,MAAMhC,eAAelB,KAAKC,GAAG,KAAKF;YAElC,IAAI+C,OAAO;gBACTjD,OAAOiD,KAAK,CAAC,iCAAiCA;gBAC9C,OAAO;oBACL7B,YAAY;oBACZC;oBACAiC,WAAW;gBACb;YACF;YAEA,oCAAoC;YACpC,IAAIC,kBAAkB,CAAC;YACvB,IAAI;gBACF,MAAM,EAAEC,MAAMC,KAAK,EAAE,GAAG,MAAMP,oBAAa,CAACQ,GAAG,CAAC;gBAChD,IAAID,SAASA,MAAMzB,MAAM,GAAG,GAAG;oBAC7BuB,kBAAkB;wBAChBI,mBAAmBF,KAAK,CAAC,EAAE,CAACG,WAAW,IAAI;wBAC3CC,gBAAgB;oBAClB;gBACF;YACF,EAAE,OAAOC,YAAY;gBACnB,gCAAgC;gBAChC9D,OAAO+D,IAAI,CAAC,qCAAqCD;YACnD;YAEA,OAAO;gBACL1C,YAAY;gBACZC;gBACAiC,WAAW;gBACX,GAAGC,eAAe;YACpB;QACF,EAAE,OAAON,OAAO;YACdjD,OAAOiD,KAAK,CAAC,gCAAgCA;YAC7C,OAAO;gBACL7B,YAAY;gBACZC,cAAclB,KAAKC,GAAG,KAAKF;YAC7B;QACF;IACF;IAEA;;GAEC,GACD,aAAaa,mBAAyC;QACpD,MAAMb,YAAYC,KAAKC,GAAG;QAE1B,IAAI;YACF,kCAAkC;YAClC,MAAM4D,aAAa,MAAMhB,YAAK,CAACiB,IAAI;YACnC,MAAM5C,eAAelB,KAAKC,GAAG,KAAKF;YAElC,IAAI8D,eAAe,QAAQ;gBACzB,OAAO;oBACL5C,YAAY;oBACZC;gBACF;YACF;YAEA,8BAA8B;YAC9B,IAAI6C,iBAAiB,CAAC;YACtB,IAAI;gBACF,sCAAsC;gBACtC,MAAMC,WAAW,MAAMnB,YAAK,CAACoB,MAAM;gBAEnC,qEAAqE;gBACrEF,iBAAiB;oBACfC,UAAUA,YAAY;gBACxB;YACF,EAAE,OAAOE,WAAW;gBAClB,8BAA8B;gBAC9BrE,OAAO+D,IAAI,CAAC,0CAA0CM;YACxD;YAEA,OAAO;gBACLjD,YAAY;gBACZC;gBACA,GAAG6C,cAAc;YACnB;QACF,EAAE,OAAOjB,OAAO;YACdjD,OAAOiD,KAAK,CAAC,6BAA6BA;YAC1C,OAAO;gBACL7B,YAAY;gBACZC,cAAclB,KAAKC,GAAG,KAAKF;YAC7B;QACF;IACF;IAEA;;GAEC,GACD,aAAac,iBAAuC;QAClD,IAAI;YACF,gCAAgC;YAChC,MAAM,EAAEwC,MAAMc,OAAO,EAAErB,KAAK,EAAE,GAAG,MAAMC,oBAAa,CACjDC,IAAI,CAAC,kBACLC,MAAM,CAAC,kCACPmB,EAAE,CAAC,eAAe;YAErB,IAAItB,OAAO;gBACTjD,OAAOiD,KAAK,CAAC,0CAA0CA;gBACvD,OAAO,EAAE;YACX;YAEA,IAAI,CAACqB,WAAWA,QAAQtC,MAAM,KAAK,GAAG;gBACpC,OAAO,EAAE;YACX;YAEA,uDAAuD;YACvD,MAAMwC,YAAYF,QAAQG,KAAK,CAAC,GAAG,IAAIC,GAAG,CAAC,CAACC,SAAW,IAAI,CAACC,cAAc,CAACD,OAAOA,MAAM;YAExF,MAAME,UAAU,MAAMjE,QAAQC,UAAU,CAAC2D;YAEzC,OAAOK,QACJhD,MAAM,CAAC,CAACiD,SAAWA,OAAO5D,MAAM,KAAK,aACrCwD,GAAG,CAAC,CAACI,SAAW,AAACA,OAA6C3D,KAAK,EACnEU,MAAM,CAAC,CAACC,MAAQA,QAAQ;QAC7B,EAAE,OAAOmB,OAAO;YACdjD,OAAOiD,KAAK,CAAC,2BAA2BA;YACxC,OAAO,EAAE;QACX;IACF;IAEA;;GAEC,GACD,aAAqB2B,eAAeD,MAAc,EAAsB;QACtE,IAAI;YACF,wEAAwE;YACxE,4CAA4C;YAC5C,MAAMI,aAAa,IAAIC;YACvB,MAAMC,YAAYC,WAAW,IAAMH,WAAWI,KAAK,IAAI;YAEvD,MAAMC,WAAW,MAAMC,MAAM,CAAC,QAAQ,EAAEV,QAAQ,EAAE;gBAChDW,QAAQ;gBACRC,QAAQR,WAAWQ,MAAM;YAC3B;YAEAC,aAAaP;YAEb,wEAAwE;YACxE,MAAMQ,UAAUL,SAASM,EAAE;YAE3B,OAAO;gBACLf;gBACAc;gBACAvE,QAAQuE,UAAU,UAAU;YAC9B;QACF,EAAE,OAAOxC,OAAO;YACdjD,OAAO+D,IAAI,CAAC,CAAC,qBAAqB,EAAEY,OAAO,CAAC,CAAC,EAAE1B;YAC/C,OAAO;gBACL0B;gBACAc,SAAS;gBACTvE,QAAQ;YACV;QACF;IACF;IAEA;;GAEC,GACD,aAAayE,mBAAmE;QAC9E,MAAMrF,YAAY,IAAIH,OAAOI,WAAW;QAExC,IAAI;YACF,wBAAwB;YACxB,MAAM,CAACqF,SAASC,WAAW,GAAG,MAAMjF,QAAQC,UAAU,CAAC;gBACrD,IAAI,CAACiF,kBAAkB;gBACvB,IAAI,CAACC,eAAe;aACrB;YAED,MAAMC,YAAYJ,QAAQ1E,MAAM,KAAK,eAAe0E,QAAQzE,KAAK;YACjE,MAAM8E,eAAeJ,WAAW3E,MAAM,KAAK,eAAe2E,WAAW1E,KAAK;YAE1E,IAAID,SAAS;YACb,IAAI,CAAC8E,aAAa,CAACC,cAAc;gBAC/B/E,SAAS;YACX;YAEA,OAAO;gBAAEA;gBAAQZ;YAAU;QAC7B,EAAE,OAAO2C,OAAO;YACdjD,OAAOiD,KAAK,CAAC,8BAA8BA;YAC3C,OAAO;gBAAE/B,QAAQ;gBAAaZ;YAAU;QAC1C;IACF;IAEA,aAAqBwF,qBAAuC;QAC1D,IAAI;YACF,MAAM,EAAE7C,KAAK,EAAE,GAAG,MAAMC,oBAAa,CAACC,IAAI,CAAC,WAAWC,MAAM,CAAC,MAAMC,KAAK,CAAC;YAEzE,OAAO,CAACJ;QACV,EAAE,OAAM;YACN,OAAO;QACT;IACF;IAEA,aAAqB8C,kBAAoC;QACvD,IAAI;YACF,MAAMjB,SAAS,MAAM9B,YAAK,CAACiB,IAAI;YAC/B,OAAOa,WAAW;QACpB,EAAE,OAAM;YACN,OAAO;QACT;IACF;AACF"}