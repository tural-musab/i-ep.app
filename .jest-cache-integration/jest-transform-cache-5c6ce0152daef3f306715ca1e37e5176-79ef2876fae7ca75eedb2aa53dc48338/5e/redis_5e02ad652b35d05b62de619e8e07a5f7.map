{"version":3,"sources":["/Users/turanmusabosman/Projects/i-ep.app/src/lib/cache/redis.ts"],"sourcesContent":["import { Redis } from '@upstash/redis';\nimport { reportRedisError } from '@/utils/error-reporting';\n\n// Upstash Redis bağlantısı (REST API)\nexport const redis = new Redis({\n  url: process.env.UPSTASH_REDIS_URL || '',\n  token: process.env.UPSTASH_REDIS_TOKEN || '',\n});\n\n// Redis bağlantısını test et (ping)\nredis\n  .ping()\n  .then(() => {\n    console.log('✅ Redis bağlantısı başarılı (Upstash REST API)');\n  })\n  .catch((err: Error) => {\n    console.error('❌ Redis bağlantı hatası:', err);\n    reportRedisError(err, 'connect');\n  });\n\n/**\n * Önbellek anahtarı oluştur (tenant izolasyonu sağlar)\n */\nexport function createCacheKey(tenantId: string, key: string): string {\n  return `tenant:${tenantId}:${key}`;\n}\n\n/**\n * Değeri önbellekten al\n */\nexport async function getCachedValue<T>(tenantId: string, key: string): Promise<T | null> {\n  try {\n    const cacheKey = createCacheKey(tenantId, key);\n    const cachedData = await redis.get(cacheKey);\n    return cachedData ? JSON.parse(cachedData as string) : null;\n  } catch (error) {\n    console.error('Önbellekten veri alınırken hata oluştu:', error);\n    reportRedisError(error, 'get', key, tenantId);\n    return null;\n  }\n}\n\n/**\n * Değeri önbelleğe kaydet\n */\nexport async function setCachedValue<T>(\n  tenantId: string,\n  key: string,\n  value: T,\n  expirySeconds = 3600 // 1 saat\n): Promise<void> {\n  try {\n    const cacheKey = createCacheKey(tenantId, key);\n    await redis.set(cacheKey, JSON.stringify(value), {\n      ex: expirySeconds,\n    });\n  } catch (error) {\n    console.error('Önbelleğe veri kaydedilirken hata oluştu:', error);\n    reportRedisError(error, 'set', key, tenantId);\n  }\n}\n\n/**\n * Önbellekteki bir değeri sil\n */\nexport async function deleteCachedValue(tenantId: string, key: string): Promise<void> {\n  try {\n    const cacheKey = createCacheKey(tenantId, key);\n    await redis.del(cacheKey);\n  } catch (error) {\n    console.error('Önbellekteki veri silinirken hata oluştu:', error);\n    reportRedisError(error, 'delete', key, tenantId);\n  }\n}\n\n/**\n * Belirli bir kalıba uyan tüm önbellek anahtarlarını temizle\n */\nexport async function clearCachePattern(tenantId: string, pattern: string): Promise<void> {\n  try {\n    const cachePattern = createCacheKey(tenantId, pattern);\n    const keys = await redis.keys(cachePattern);\n\n    if (keys && keys.length > 0) {\n      await redis.del(...keys);\n    }\n  } catch (error) {\n    console.error('Önbellek temizlenirken hata oluştu:', error);\n    reportRedisError(error, 'clearPattern', pattern, tenantId);\n  }\n}\n\n/**\n * Tenant'a ait tüm önbellekleri temizle\n */\nexport async function clearTenantCache(tenantId: string): Promise<void> {\n  try {\n    const cachePattern = createCacheKey(tenantId, '*');\n    const keys = await redis.keys(cachePattern);\n\n    if (keys && keys.length > 0) {\n      await redis.del(...keys);\n    }\n  } catch (error) {\n    console.error(`${tenantId} için önbellek temizlenirken hata oluştu:`, error);\n    reportRedisError(error, 'clearTenantCache', '*', tenantId);\n  }\n}\n\n/**\n * Önbellekleme decorator'ü (sınıf metotları için)\n */\nexport function Cached(\n  expirySeconds: number = 3600,\n  keyGenerator?: (tenantId: string, ...args: any[]) => string\n) {\n  return function (target: any, propertyKey: string, descriptor: PropertyDescriptor) {\n    const originalMethod = descriptor.value;\n\n    descriptor.value = async function (...args: any[]) {\n      // İlk parametrenin tenantId olduğunu varsayıyoruz\n      const tenantId = args[0];\n\n      if (!tenantId) {\n        return originalMethod.apply(this, args);\n      }\n\n      // Önbellek anahtarını oluştur\n      const key = keyGenerator\n        ? keyGenerator(tenantId, ...args.slice(1))\n        : `${propertyKey}:${JSON.stringify(args.slice(1))}`;\n\n      try {\n        // Önbellekten veriyi almaya çalış\n        const cachedValue = await getCachedValue(tenantId, key);\n\n        if (cachedValue !== null) {\n          return cachedValue;\n        }\n\n        // Önbellekte yoksa, metodu çalıştır\n        const result = await originalMethod.apply(this, args);\n\n        // Sonucu önbelleğe ekle\n        if (result !== null && result !== undefined) {\n          await setCachedValue(tenantId, key, result, expirySeconds);\n        }\n\n        return result;\n      } catch (error) {\n        console.error(`Önbellekleme hatası (${propertyKey}):`, error);\n        reportRedisError(error, 'decorator', propertyKey, tenantId);\n        // Hata durumunda orijinal metodu çalıştır\n        return originalMethod.apply(this, args);\n      }\n    };\n\n    return descriptor;\n  };\n}\n"],"names":["Cached","clearCachePattern","clearTenantCache","createCacheKey","deleteCachedValue","getCachedValue","redis","setCachedValue","Redis","url","process","env","UPSTASH_REDIS_URL","token","UPSTASH_REDIS_TOKEN","ping","then","console","log","catch","err","error","reportRedisError","tenantId","key","cacheKey","cachedData","get","JSON","parse","value","expirySeconds","set","stringify","ex","del","pattern","cachePattern","keys","length","keyGenerator","target","propertyKey","descriptor","originalMethod","args","apply","slice","cachedValue","result","undefined"],"mappings":"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"}