4a62fc2847a47914f61fd7ee16b762e9
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    Cached: function() {
        return Cached;
    },
    clearCachePattern: function() {
        return clearCachePattern;
    },
    clearTenantCache: function() {
        return clearTenantCache;
    },
    createCacheKey: function() {
        return createCacheKey;
    },
    deleteCachedValue: function() {
        return deleteCachedValue;
    },
    getCachedValue: function() {
        return getCachedValue;
    },
    redis: function() {
        return redis;
    },
    setCachedValue: function() {
        return setCachedValue;
    }
});
const _redis = require("@upstash/redis");
const _errorreporting = require("../../utils/error-reporting");
const redis = new _redis.Redis({
    url: process.env.UPSTASH_REDIS_URL || '',
    token: process.env.UPSTASH_REDIS_TOKEN || ''
});
// Redis bağlantısını test et (ping)
redis.ping().then(()=>{
    console.log('✅ Redis bağlantısı başarılı (Upstash REST API)');
}).catch((err)=>{
    console.error('❌ Redis bağlantı hatası:', err);
    (0, _errorreporting.reportRedisError)(err, 'connect');
});
function createCacheKey(tenantId, key) {
    return `tenant:${tenantId}:${key}`;
}
async function getCachedValue(tenantId, key) {
    try {
        const cacheKey = createCacheKey(tenantId, key);
        const cachedData = await redis.get(cacheKey);
        return cachedData ? JSON.parse(cachedData) : null;
    } catch (error) {
        console.error('Önbellekten veri alınırken hata oluştu:', error);
        (0, _errorreporting.reportRedisError)(error, 'get', key, tenantId);
        return null;
    }
}
async function setCachedValue(tenantId, key, value, expirySeconds = 3600 // 1 saat
) {
    try {
        const cacheKey = createCacheKey(tenantId, key);
        await redis.set(cacheKey, JSON.stringify(value), {
            ex: expirySeconds
        });
    } catch (error) {
        console.error('Önbelleğe veri kaydedilirken hata oluştu:', error);
        (0, _errorreporting.reportRedisError)(error, 'set', key, tenantId);
    }
}
async function deleteCachedValue(tenantId, key) {
    try {
        const cacheKey = createCacheKey(tenantId, key);
        await redis.del(cacheKey);
    } catch (error) {
        console.error('Önbellekteki veri silinirken hata oluştu:', error);
        (0, _errorreporting.reportRedisError)(error, 'delete', key, tenantId);
    }
}
async function clearCachePattern(tenantId, pattern) {
    try {
        const cachePattern = createCacheKey(tenantId, pattern);
        const keys = await redis.keys(cachePattern);
        if (keys && keys.length > 0) {
            await redis.del(...keys);
        }
    } catch (error) {
        console.error('Önbellek temizlenirken hata oluştu:', error);
        (0, _errorreporting.reportRedisError)(error, 'clearPattern', pattern, tenantId);
    }
}
async function clearTenantCache(tenantId) {
    try {
        const cachePattern = createCacheKey(tenantId, '*');
        const keys = await redis.keys(cachePattern);
        if (keys && keys.length > 0) {
            await redis.del(...keys);
        }
    } catch (error) {
        console.error(`${tenantId} için önbellek temizlenirken hata oluştu:`, error);
        (0, _errorreporting.reportRedisError)(error, 'clearTenantCache', '*', tenantId);
    }
}
function Cached(expirySeconds = 3600, keyGenerator) {
    return function(target, propertyKey, descriptor) {
        const originalMethod = descriptor.value;
        descriptor.value = async function(...args) {
            // İlk parametrenin tenantId olduğunu varsayıyoruz
            const tenantId = args[0];
            if (!tenantId) {
                return originalMethod.apply(this, args);
            }
            // Önbellek anahtarını oluştur
            const key = keyGenerator ? keyGenerator(tenantId, ...args.slice(1)) : `${propertyKey}:${JSON.stringify(args.slice(1))}`;
            try {
                // Önbellekten veriyi almaya çalış
                const cachedValue = await getCachedValue(tenantId, key);
                if (cachedValue !== null) {
                    return cachedValue;
                }
                // Önbellekte yoksa, metodu çalıştır
                const result = await originalMethod.apply(this, args);
                // Sonucu önbelleğe ekle
                if (result !== null && result !== undefined) {
                    await setCachedValue(tenantId, key, result, expirySeconds);
                }
                return result;
            } catch (error) {
                console.error(`Önbellekleme hatası (${propertyKey}):`, error);
                (0, _errorreporting.reportRedisError)(error, 'decorator', propertyKey, tenantId);
                // Hata durumunda orijinal metodu çalıştır
                return originalMethod.apply(this, args);
            }
        };
        return descriptor;
    };
}

//# sourceMappingURL=data:application/json;base64,