{"version":3,"sources":["/Users/turanmusabosman/Projects/i-ep.app/src/__tests__/integration/quarantine/tenant-isolation-security.test.ts"],"sourcesContent":["/**\n * @jest-environment node\n */\n\nimport logger from '@/lib/logger';\n\n// Mock veriler ve utilities\nconst mockSupabaseClient = {\n  auth: {\n    getUser: jest.fn(),\n    signInWithPassword: jest.fn(),\n  },\n  from: jest.fn(),\n  rpc: jest.fn(),\n};\n\n// Test scenarios için mock data\nconst TENANT_A_ID = '11111111-1111-1111-1111-111111111111';\nconst TENANT_B_ID = '22222222-2222-2222-2222-222222222222';\n\nconst MOCK_USER_TENANT_A = {\n  id: 'user-tenant-a',\n  tenant_id: TENANT_A_ID,\n  email: 'admin@tenant-a.com',\n  role: 'admin',\n  is_active: true,\n  verification_status: 'verified',\n};\n\ninterface SecurityViolation {\n  user_id: string;\n  target_tenant_id: string;\n  attempted_at: Date;\n  action: string;\n  blocked: boolean;\n}\n\nconst MOCK_SUPER_ADMIN = {\n  id: 'super-admin-user',\n  tenant_id: null,\n  email: 'super@i-ep.app',\n  role: 'super_admin',\n  is_active: true,\n  verification_status: 'verified',\n};\n\ndescribe('Multi-Tenant Security Isolation Tests', () => {\n  beforeEach(() => {\n    jest.clearAllMocks();\n\n    // Logger mock'larını sustur\n    jest.spyOn(console, 'log').mockImplementation(() => {});\n    jest.spyOn(console, 'error').mockImplementation(() => {});\n  });\n\n  afterEach(() => {\n    jest.restoreAllMocks();\n  });\n\n  describe('Tenant Data Isolation', () => {\n    it('should prevent cross-tenant user access', async () => {\n      // Tenant A kullanıcısı Tenant B'deki kullanıcıları görmeye çalışıyor\n      const mockQueryBuilder = {\n        select: jest.fn().mockReturnThis(),\n        eq: jest.fn().mockReturnThis(),\n        single: jest.fn().mockResolvedValue({\n          data: null,\n          error: { message: 'Row Level Security policy violation' },\n        }),\n      };\n\n      mockSupabaseClient.from.mockReturnValue(mockQueryBuilder);\n      mockSupabaseClient.auth.getUser.mockResolvedValue({\n        data: { user: MOCK_USER_TENANT_A },\n        error: null,\n      });\n\n      // Tenant A kullanıcısı olarak Tenant B kullanıcısını okumaya çalış\n      const result = await mockSupabaseClient\n        .from('users')\n        .select('*')\n        .eq('tenant_id', TENANT_B_ID)\n        .single();\n\n      expect(result.error).toBeTruthy();\n      expect(result.error.message).toContain('Row Level Security');\n      expect(result.data).toBeNull();\n\n      logger.info('Cross-tenant user access correctly blocked', {\n        attemptingUser: MOCK_USER_TENANT_A.id,\n        targetTenant: TENANT_B_ID,\n        result: 'BLOCKED',\n      });\n    });\n\n    it('should prevent unauthorized tenant management access', async () => {\n      // Normal kullanıcı tenant management verilerine erişmeye çalışıyor\n      const mockQueryBuilder = {\n        select: jest.fn().mockReturnThis(),\n        eq: jest.fn().mockResolvedValue({\n          data: [],\n          error: { message: 'Insufficient privileges' },\n        }),\n      };\n\n      mockSupabaseClient.from.mockReturnValue(mockQueryBuilder);\n      mockSupabaseClient.auth.getUser.mockResolvedValue({\n        data: { user: { ...MOCK_USER_TENANT_A, role: 'teacher' } },\n        error: null,\n      });\n\n      // Teacher rolü ile management.tenants tablosuna erişim denemesi\n      const result = await mockSupabaseClient.from('tenants').select('*').eq('id', TENANT_A_ID);\n\n      expect(result.error).toBeTruthy();\n      expect(result.data).toEqual([]);\n\n      logger.info('Unauthorized tenant management access blocked', {\n        attemptingUser: MOCK_USER_TENANT_A.id,\n        role: 'teacher',\n        result: 'BLOCKED',\n      });\n    });\n\n    it('should allow super_admin access to all tenants', async () => {\n      // Super admin tüm tenant'lara erişebilmeli\n      const mockTenants = [\n        { id: TENANT_A_ID, name: 'Tenant A' },\n        { id: TENANT_B_ID, name: 'Tenant B' },\n      ];\n\n      const mockQueryBuilder = {\n        select: jest.fn().mockResolvedValue({\n          data: mockTenants,\n          error: null,\n        }),\n      };\n\n      mockSupabaseClient.from.mockReturnValue(mockQueryBuilder);\n      mockSupabaseClient.auth.getUser.mockResolvedValue({\n        data: { user: MOCK_SUPER_ADMIN },\n        error: null,\n      });\n\n      const result = await mockSupabaseClient.from('tenants').select('*');\n\n      expect(result.error).toBeNull();\n      expect(result.data).toHaveLength(2);\n      expect(result.data).toEqual(mockTenants);\n\n      logger.info('Super admin access to all tenants confirmed', {\n        user: MOCK_SUPER_ADMIN.id,\n        tenantsAccessed: mockTenants.length,\n      });\n    });\n\n    it('should enforce tenant isolation in student data', async () => {\n      // Tenant A öğretmeni, Tenant B öğrencilerini görememeli\n      const mockQueryBuilder = {\n        select: jest.fn().mockReturnThis(),\n        eq: jest.fn().mockReturnThis(),\n        in: jest.fn().mockResolvedValue({\n          data: [],\n          error: null, // RLS policies ile filtrelenir, error değil boş array döner\n        }),\n      };\n\n      mockSupabaseClient.from.mockReturnValue(mockQueryBuilder);\n      mockSupabaseClient.auth.getUser.mockResolvedValue({\n        data: { user: { ...MOCK_USER_TENANT_A, role: 'teacher' } },\n        error: null,\n      });\n\n      // Tenant A öğretmeni farklı tenant'taki öğrencileri görmeye çalışıyor\n      const result = await mockSupabaseClient\n        .from('users')\n        .select('*')\n        .eq('tenant_id', TENANT_B_ID)\n        .in('role', ['student']);\n\n      expect(result.error).toBeNull();\n      expect(result.data).toEqual([]); // RLS policy nedeniyle boş sonuç\n\n      logger.info('Cross-tenant student data access blocked', {\n        teacher: MOCK_USER_TENANT_A.id,\n        targetTenant: TENANT_B_ID,\n        result: 'BLOCKED_BY_RLS',\n      });\n    });\n  });\n\n  describe('Role-Based Access Control', () => {\n    it('should prevent students from accessing teacher-only data', async () => {\n      const mockQueryBuilder = {\n        select: jest.fn().mockReturnThis(),\n        eq: jest.fn().mockResolvedValue({\n          data: [],\n          error: { message: 'Insufficient role privileges' },\n        }),\n      };\n\n      mockSupabaseClient.from.mockReturnValue(mockQueryBuilder);\n      mockSupabaseClient.auth.getUser.mockResolvedValue({\n        data: { user: { ...MOCK_USER_TENANT_A, role: 'student' } },\n        error: null,\n      });\n\n      // Öğrenci gradebook verilerine erişmeye çalışıyor\n      const result = await mockSupabaseClient\n        .from('grades')\n        .select('*')\n        .eq('teacher_id', MOCK_USER_TENANT_A.id);\n\n      expect(result.error).toBeTruthy();\n      expect(result.data).toEqual([]);\n\n      logger.info('Student access to teacher data blocked', {\n        student: MOCK_USER_TENANT_A.id,\n        attemptedResource: 'grades',\n        result: 'BLOCKED',\n      });\n    });\n\n    it('should allow teachers to access their own class data', async () => {\n      const mockClassData = [\n        { id: 'class-1', teacher_id: MOCK_USER_TENANT_A.id, name: 'Math 101' },\n      ];\n\n      const mockQueryBuilder = {\n        select: jest.fn().mockReturnThis(),\n        eq: jest.fn().mockResolvedValue({\n          data: mockClassData,\n          error: null,\n        }),\n      };\n\n      mockSupabaseClient.from.mockReturnValue(mockQueryBuilder);\n      mockSupabaseClient.auth.getUser.mockResolvedValue({\n        data: { user: { ...MOCK_USER_TENANT_A, role: 'teacher' } },\n        error: null,\n      });\n\n      const result = await mockSupabaseClient\n        .from('classes')\n        .select('*')\n        .eq('teacher_id', MOCK_USER_TENANT_A.id);\n\n      expect(result.error).toBeNull();\n      expect(result.data).toEqual(mockClassData);\n\n      logger.info('Teacher access to own class data allowed', {\n        teacher: MOCK_USER_TENANT_A.id,\n        classesAccessed: mockClassData.length,\n      });\n    });\n\n    it('should prevent parents from accessing other students data', async () => {\n      const mockQueryBuilder = {\n        select: jest.fn().mockReturnThis(),\n        join: jest.fn().mockReturnThis(),\n        eq: jest.fn().mockResolvedValue({\n          data: [],\n          error: null, // RLS ile filtrelenir\n        }),\n      };\n\n      mockSupabaseClient.from.mockReturnValue(mockQueryBuilder);\n      mockSupabaseClient.auth.getUser.mockResolvedValue({\n        data: { user: { ...MOCK_USER_TENANT_A, role: 'parent' } },\n        error: null,\n      });\n\n      // Veli, kendi çocuğu olmayan öğrencilerin notlarını görmeye çalışıyor\n      const result = await mockSupabaseClient\n        .from('grades')\n        .select('*, students(*)')\n        .eq('students.parent_id', 'different-parent-id');\n\n      expect(result.error).toBeNull();\n      expect(result.data).toEqual([]);\n\n      logger.info('Parent access to other students data blocked', {\n        parent: MOCK_USER_TENANT_A.id,\n        result: 'BLOCKED_BY_RLS',\n      });\n    });\n  });\n\n  describe('API Token Security', () => {\n    it('should prevent cross-tenant API token usage', async () => {\n      const mockQueryBuilder = {\n        select: jest.fn().mockReturnThis(),\n        eq: jest.fn().mockResolvedValue({\n          data: null,\n          error: { message: 'Invalid tenant context for token' },\n        }),\n      };\n\n      mockSupabaseClient.from.mockReturnValue(mockQueryBuilder);\n\n      // Tenant A token'ı ile Tenant B verilerine erişim denemesi\n      const result = await mockSupabaseClient\n        .from('api_tokens')\n        .select('*')\n        .eq('tenant_id', TENANT_B_ID);\n\n      expect(result.error).toBeTruthy();\n      expect(result.data).toBeNull();\n\n      logger.info('Cross-tenant API token usage blocked', {\n        targetTenant: TENANT_B_ID,\n        result: 'BLOCKED',\n      });\n    });\n\n    it('should validate API token scopes', async () => {\n      const mockToken = {\n        id: 'token-1',\n        tenant_id: TENANT_A_ID,\n        scopes: ['read:users', 'write:classes'],\n        expires_at: new Date(Date.now() + 86400000), // 24 hours from now\n      };\n\n      const mockQueryBuilder = {\n        select: jest.fn().mockReturnThis(),\n        eq: jest.fn().mockResolvedValue({\n          data: mockToken,\n          error: null,\n        }),\n      };\n\n      mockSupabaseClient.from.mockReturnValue(mockQueryBuilder);\n\n      const result = await mockSupabaseClient.from('api_tokens').select('*').eq('id', 'token-1');\n\n      expect(result.error).toBeNull();\n      expect(result.data.scopes).toContain('read:users');\n      expect(result.data.scopes).toContain('write:classes');\n      expect(result.data.scopes).not.toContain('admin:tenants');\n\n      logger.info('API token scope validation successful', {\n        tokenId: mockToken.id,\n        scopes: mockToken.scopes,\n      });\n    });\n  });\n\n  describe('Data Modification Security', () => {\n    it('should prevent unauthorized data modification', async () => {\n      const mockQueryBuilder = {\n        update: jest.fn().mockReturnThis(),\n        eq: jest.fn().mockResolvedValue({\n          data: null,\n          error: { message: 'RLS policy prevents modification' },\n        }),\n      };\n\n      mockSupabaseClient.from.mockReturnValue(mockQueryBuilder);\n      mockSupabaseClient.auth.getUser.mockResolvedValue({\n        data: { user: { ...MOCK_USER_TENANT_A, role: 'student' } },\n        error: null,\n      });\n\n      // Öğrenci, notlarını değiştirmeye çalışıyor\n      const result = await mockSupabaseClient\n        .from('grades')\n        .update({ score: 100 })\n        .eq('student_id', MOCK_USER_TENANT_A.id);\n\n      expect(result.error).toBeTruthy();\n      expect(result.data).toBeNull();\n\n      logger.info('Unauthorized grade modification blocked', {\n        student: MOCK_USER_TENANT_A.id,\n        attempted: 'grade_modification',\n        result: 'BLOCKED',\n      });\n    });\n\n    it('should allow authorized admin modifications', async () => {\n      const mockQueryBuilder = {\n        update: jest.fn().mockReturnThis(),\n        eq: jest.fn().mockResolvedValue({\n          data: [{ id: 'user-1', name: 'Updated Name' }],\n          error: null,\n        }),\n      };\n\n      mockSupabaseClient.from.mockReturnValue(mockQueryBuilder);\n      mockSupabaseClient.auth.getUser.mockResolvedValue({\n        data: { user: MOCK_USER_TENANT_A },\n        error: null,\n      });\n\n      // Admin, kendi tenant'ındaki kullanıcı bilgilerini güncelliyor\n      const result = await mockSupabaseClient\n        .from('users')\n        .update({ name: 'Updated Name' })\n        .eq('id', 'user-1');\n\n      expect(result.error).toBeNull();\n      expect(result.data).toHaveLength(1);\n      expect(result.data[0].name).toBe('Updated Name');\n\n      logger.info('Authorized admin modification allowed', {\n        admin: MOCK_USER_TENANT_A.id,\n        action: 'user_update',\n        result: 'ALLOWED',\n      });\n    });\n  });\n\n  describe('Audit Trail Security', () => {\n    it('should log security violations to audit table', async () => {\n      const mockAuditQueryBuilder = {\n        insert: jest.fn().mockResolvedValue({\n          data: [{ id: 'audit-1' }],\n          error: null,\n        }),\n      };\n\n      mockSupabaseClient.from.mockImplementation((table) => {\n        if (table === 'access_denied_logs') {\n          return mockAuditQueryBuilder;\n        }\n        return {\n          select: jest.fn().mockResolvedValue({\n            data: null,\n            error: { message: 'Access denied' },\n          }),\n        };\n      });\n\n      mockSupabaseClient.auth.getUser.mockResolvedValue({\n        data: { user: MOCK_USER_TENANT_A },\n        error: null,\n      });\n\n      // İlk olarak yetkisiz erişim denemesi\n      await mockSupabaseClient.from('tenants').select('*');\n\n      // Audit log kaydının yapıldığını kontrol et\n      const auditResult = await mockSupabaseClient.from('access_denied_logs').insert({\n        user_id: MOCK_USER_TENANT_A.id,\n        attempted_action: 'SELECT on tenants',\n        error_message: 'Access denied',\n        created_at: new Date().toISOString(),\n      });\n\n      expect(auditResult.error).toBeNull();\n      expect(auditResult.data).toHaveLength(1);\n\n      logger.info('Security violation audit logged', {\n        user: MOCK_USER_TENANT_A.id,\n        violation: 'unauthorized_tenant_access',\n        audited: true,\n      });\n    });\n\n    it('should track cross-tenant access attempts', async () => {\n      const securityViolations: SecurityViolation[] = [];\n\n      // Mock cross-tenant access attempt\n      const attemptCrossTenantAccess = async (userId: string, targetTenantId: string) => {\n        const violation: SecurityViolation = {\n          user_id: userId,\n          target_tenant_id: targetTenantId,\n          attempted_at: new Date(),\n          action: 'cross_tenant_data_access',\n          blocked: true,\n        };\n\n        securityViolations.push(violation);\n        return { success: false, violation };\n      };\n\n      // Simüle et: Tenant A kullanıcısı Tenant B'ye erişmeye çalışıyor\n      const result = await attemptCrossTenantAccess(MOCK_USER_TENANT_A.id, TENANT_B_ID);\n\n      expect(result.success).toBe(false);\n      expect(result.violation.blocked).toBe(true);\n      expect(securityViolations).toHaveLength(1);\n      expect(securityViolations[0].user_id).toBe(MOCK_USER_TENANT_A.id);\n      expect(securityViolations[0].target_tenant_id).toBe(TENANT_B_ID);\n\n      logger.info('Cross-tenant access attempt tracked', {\n        violations: securityViolations.length,\n        latestViolation: securityViolations[0],\n      });\n    });\n  });\n\n  describe('Session Security', () => {\n    it('should invalidate sessions on tenant mismatch', async () => {\n      const mockSessionQueryBuilder = {\n        select: jest.fn().mockReturnThis(),\n        eq: jest.fn().mockResolvedValue({\n          data: [],\n          error: null, // No valid sessions found\n        }),\n      };\n\n      mockSupabaseClient.from.mockReturnValue(mockSessionQueryBuilder);\n\n      // Kullanıcı farklı tenant context'inde session aramaya çalışıyor\n      const result = await mockSupabaseClient\n        .from('sessions')\n        .select('*')\n        .eq('tenant_id', TENANT_B_ID); // Wrong tenant\n\n      expect(result.data).toEqual([]);\n\n      logger.info('Invalid tenant session access blocked', {\n        requestedTenant: TENANT_B_ID,\n        result: 'NO_SESSIONS_FOUND',\n      });\n    });\n\n    it('should validate session tenant context', async () => {\n      const validSession = {\n        id: 'session-1',\n        user_id: MOCK_USER_TENANT_A.id,\n        tenant_id: TENANT_A_ID,\n        expires_at: new Date(Date.now() + 3600000), // 1 hour from now\n        is_valid: true,\n      };\n\n      const mockSessionQueryBuilder = {\n        select: jest.fn().mockReturnThis(),\n        eq: jest.fn().mockReturnThis(),\n        single: jest.fn().mockResolvedValue({\n          data: validSession,\n          error: null,\n        }),\n      };\n\n      mockSupabaseClient.from.mockReturnValue(mockSessionQueryBuilder);\n\n      const result = await mockSupabaseClient\n        .from('sessions')\n        .select('*')\n        .eq('user_id', MOCK_USER_TENANT_A.id)\n        .eq('tenant_id', TENANT_A_ID)\n        .single();\n\n      expect(result.error).toBeNull();\n      expect(result.data.tenant_id).toBe(TENANT_A_ID);\n      expect(result.data.user_id).toBe(MOCK_USER_TENANT_A.id);\n\n      logger.info('Valid session tenant context confirmed', {\n        sessionId: validSession.id,\n        userId: validSession.user_id,\n        tenantId: validSession.tenant_id,\n      });\n    });\n  });\n});\n"],"names":["mockSupabaseClient","auth","getUser","jest","fn","signInWithPassword","from","rpc","TENANT_A_ID","TENANT_B_ID","MOCK_USER_TENANT_A","id","tenant_id","email","role","is_active","verification_status","MOCK_SUPER_ADMIN","describe","beforeEach","clearAllMocks","spyOn","console","mockImplementation","afterEach","restoreAllMocks","it","mockQueryBuilder","select","mockReturnThis","eq","single","mockResolvedValue","data","error","message","mockReturnValue","user","result","expect","toBeTruthy","toContain","toBeNull","logger","info","attemptingUser","targetTenant","toEqual","mockTenants","name","toHaveLength","tenantsAccessed","length","in","teacher","student","attemptedResource","mockClassData","teacher_id","classesAccessed","join","parent","mockToken","scopes","expires_at","Date","now","not","tokenId","update","score","attempted","toBe","admin","action","mockAuditQueryBuilder","insert","table","auditResult","user_id","attempted_action","error_message","created_at","toISOString","violation","audited","securityViolations","attemptCrossTenantAccess","userId","targetTenantId","target_tenant_id","attempted_at","blocked","push","success","violations","latestViolation","mockSessionQueryBuilder","requestedTenant","validSession","is_valid","sessionId","tenantId"],"mappings":"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"}