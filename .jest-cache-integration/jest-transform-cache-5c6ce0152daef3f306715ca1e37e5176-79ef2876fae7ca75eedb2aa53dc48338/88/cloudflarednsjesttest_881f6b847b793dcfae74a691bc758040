df575e4b3b7cf18a3f7acc77012e48df
"use strict";
// env module'unu mock'la
jest.mock('@/env', ()=>({
        env: {
            CLOUDFLARE_API_TOKEN: 'test-cf-token',
            CLOUDFLARE_ZONE_ID: '023e105f4ecef8ad9ca31a8372d0c353'
        }
    }));
Object.defineProperty(exports, "__esModule", {
    value: true
});
const _globals = require("@jest/globals");
const _domains = require("../../../lib/cloudflare/domains");
// Global fetch'i mock'la
const mockFetch = jest.fn();
global.fetch = mockFetch;
// Test environment variables
const TEST_ENV = {
    CLOUDFLARE_API_TOKEN: 'test-cf-token',
    CLOUDFLARE_ZONE_ID: '023e105f4ecef8ad9ca31a8372d0c353'
};
(0, _globals.describe)('Cloudflare DNS Integration Tests (Jest Mocked)', ()=>{
    (0, _globals.beforeAll)(()=>{
        // Test ortamı değişkenlerini ayarla
        Object.assign(process.env, TEST_ENV);
    });
    (0, _globals.beforeEach)(()=>{
        mockFetch.mockClear();
    });
    (0, _globals.afterEach)(()=>{
        mockFetch.mockReset();
    });
    (0, _globals.describe)('createSubdomainDNSRecord Tests', ()=>{
        (0, _globals.it)('should successfully create a DNS record for a new subdomain', async ()=>{
            // Arrange
            const testSubdomain = 'test-okulu';
            const rootDomain = 'i-ep.app';
            // Zone ID alma mock'ı
            mockFetch.mockResolvedValueOnce({
                ok: true,
                json: ()=>Promise.resolve({
                        success: true,
                        errors: [],
                        messages: [],
                        result: [
                            {
                                id: '023e105f4ecef8ad9ca31a8372d0c353',
                                name: 'i-ep.app',
                                status: 'active'
                            }
                        ]
                    })
            });
            // DNS record oluşturma mock'ı
            mockFetch.mockResolvedValueOnce({
                ok: true,
                json: ()=>Promise.resolve({
                        success: true,
                        errors: [],
                        messages: [],
                        result: {
                            id: '372e67954025e0ba6aaa6d586b9e0b59',
                            type: 'CNAME',
                            name: `${testSubdomain}.${rootDomain}`,
                            content: 'i-ep.app',
                            proxied: true,
                            ttl: 1
                        }
                    })
            });
            // Act
            const result = await (0, _domains.createDnsRecord)({
                subdomain: testSubdomain,
                rootDomain: rootDomain,
                proxied: true,
                ttl: 1
            });
            // Assert
            (0, _globals.expect)(result).toBeDefined();
            (0, _globals.expect)(result.success).toBe(true);
            (0, _globals.expect)(result.errors).toHaveLength(0);
            (0, _globals.expect)(result.result).toBeDefined();
            (0, _globals.expect)(result.result?.name).toBe(`${testSubdomain}.${rootDomain}`);
            (0, _globals.expect)(result.result?.type).toBe('CNAME');
            (0, _globals.expect)(result.result?.proxied).toBe(true);
            // API çağrılarının doğru yapıldığını kontrol et
            (0, _globals.expect)(mockFetch).toHaveBeenCalledTimes(2);
            // Zone ID alma çağrısı
            (0, _globals.expect)(mockFetch).toHaveBeenNthCalledWith(1, 'https://api.cloudflare.com/client/v4/zones?name=i-ep.app', _globals.expect.objectContaining({
                headers: _globals.expect.objectContaining({
                    Authorization: `Bearer ${TEST_ENV.CLOUDFLARE_API_TOKEN}`
                })
            }));
            // DNS record oluşturma çağrısı
            (0, _globals.expect)(mockFetch).toHaveBeenNthCalledWith(2, `https://api.cloudflare.com/client/v4/zones/${TEST_ENV.CLOUDFLARE_ZONE_ID}/dns_records`, _globals.expect.objectContaining({
                method: 'POST',
                headers: _globals.expect.objectContaining({
                    Authorization: `Bearer ${TEST_ENV.CLOUDFLARE_API_TOKEN}`,
                    'Content-Type': 'application/json'
                }),
                body: _globals.expect.stringContaining(testSubdomain)
            }));
        });
        (0, _globals.it)('should handle DNS record creation when record already exists', async ()=>{
            // Arrange
            const testSubdomain = 'existing-tenant';
            const rootDomain = 'i-ep.app';
            // Zone ID alma başarılı
            mockFetch.mockResolvedValueOnce({
                ok: true,
                json: ()=>Promise.resolve({
                        success: true,
                        result: [
                            {
                                id: TEST_ENV.CLOUDFLARE_ZONE_ID,
                                name: rootDomain
                            }
                        ]
                    })
            });
            // DNS record zaten var hatası
            mockFetch.mockResolvedValueOnce({
                ok: false,
                status: 400,
                json: ()=>Promise.resolve({
                        success: false,
                        errors: [
                            {
                                code: 81053,
                                message: 'DNS record already exists'
                            }
                        ],
                        messages: [],
                        result: null
                    })
            });
            // Act
            const result = await (0, _domains.createDnsRecord)({
                subdomain: testSubdomain,
                rootDomain: rootDomain,
                proxied: true,
                ttl: 1
            });
            // Assert
            (0, _globals.expect)(result).toBeDefined();
            (0, _globals.expect)(result.success).toBe(false);
            (0, _globals.expect)(result.errors).toHaveLength(1);
            (0, _globals.expect)(result.errors[0].message).toBe('DNS record already exists');
            (0, _globals.expect)(result.errors[0].code).toBe(81053);
        });
        (0, _globals.it)('should handle unauthorized API access', async ()=>{
            // Arrange
            const testSubdomain = 'unauthorized-test';
            const rootDomain = 'i-ep.app';
            // Zone ID alma başarılı
            mockFetch.mockResolvedValueOnce({
                ok: true,
                json: ()=>Promise.resolve({
                        success: true,
                        result: [
                            {
                                id: TEST_ENV.CLOUDFLARE_ZONE_ID,
                                name: rootDomain
                            }
                        ]
                    })
            });
            // Yetkisiz erişim hatası
            mockFetch.mockResolvedValueOnce({
                ok: false,
                status: 401,
                json: ()=>Promise.resolve({
                        success: false,
                        errors: [
                            {
                                code: 10000,
                                message: 'Authentication error'
                            }
                        ],
                        messages: []
                    })
            });
            // Act
            const result = await (0, _domains.createDnsRecord)({
                subdomain: testSubdomain,
                rootDomain: rootDomain,
                proxied: true,
                ttl: 1
            });
            // Assert
            (0, _globals.expect)(result).toBeDefined();
            (0, _globals.expect)(result.success).toBe(false);
            (0, _globals.expect)(result.errors).toHaveLength(1);
            (0, _globals.expect)(result.errors[0].message).toBe('Authentication error');
            (0, _globals.expect)(result.errors[0].code).toBe(10000);
        });
        (0, _globals.it)('should handle zone not found error', async ()=>{
            // Arrange
            const testSubdomain = 'test-subdomain';
            const rootDomain = 'nonexistent.com';
            // Zone bulunamadı
            mockFetch.mockResolvedValueOnce({
                ok: true,
                json: ()=>Promise.resolve({
                        success: true,
                        errors: [],
                        messages: [],
                        result: []
                    })
            });
            // Act
            const result = await (0, _domains.createDnsRecord)({
                subdomain: testSubdomain,
                rootDomain: rootDomain,
                proxied: true,
                ttl: 1
            });
            // Assert
            (0, _globals.expect)(result).toBeDefined();
            (0, _globals.expect)(result.success).toBe(false);
            (0, _globals.expect)(result.errors).toHaveLength(1);
            (0, _globals.expect)(result.errors[0].message).toContain('zone bulunamadı');
        });
        (0, _globals.it)('should handle network timeout errors', async ()=>{
            // Arrange
            const testSubdomain = 'timeout-test';
            const rootDomain = 'i-ep.app';
            // Network timeout simülasyonu
            mockFetch.mockRejectedValueOnce(new Error('Network timeout'));
            // Act
            const result = await (0, _domains.createDnsRecord)({
                subdomain: testSubdomain,
                rootDomain: rootDomain,
                proxied: true,
                ttl: 1
            });
            // Assert - Error objesi döndürülmeli (throw edilmez)
            (0, _globals.expect)(result.success).toBe(false);
            (0, _globals.expect)(result.errors).toHaveLength(1);
            (0, _globals.expect)(result.errors[0].message).toContain('zone bulunamadı');
        });
        (0, _globals.it)('should validate required parameters', async ()=>{
            // Act - Boş subdomain
            const result1 = await (0, _domains.createDnsRecord)({
                subdomain: '',
                rootDomain: 'i-ep.app',
                proxied: true,
                ttl: 1
            });
            // Assert - Error objesi döndürülmeli (throw edilmez)
            (0, _globals.expect)(result1.success).toBe(false);
            (0, _globals.expect)(result1.errors).toHaveLength(1);
            // Act - Boş root domain
            const result2 = await (0, _domains.createDnsRecord)({
                subdomain: 'test',
                rootDomain: '',
                proxied: true,
                ttl: 1
            });
            // Assert - Error objesi döndürülmeli (throw edilmez)
            (0, _globals.expect)(result2.success).toBe(false);
            (0, _globals.expect)(result2.errors).toHaveLength(1);
        });
        (0, _globals.it)('should handle rate limit errors gracefully', async ()=>{
            // Arrange
            const testSubdomain = 'ratelimit-test';
            const rootDomain = 'i-ep.app';
            // Zone ID alma başarılı
            mockFetch.mockResolvedValueOnce({
                ok: true,
                json: ()=>Promise.resolve({
                        success: true,
                        result: [
                            {
                                id: TEST_ENV.CLOUDFLARE_ZONE_ID,
                                name: rootDomain
                            }
                        ]
                    })
            });
            // Rate limit hatası
            mockFetch.mockResolvedValueOnce({
                ok: false,
                status: 429,
                json: ()=>Promise.resolve({
                        success: false,
                        errors: [
                            {
                                code: 10013,
                                message: 'Rate limit exceeded'
                            }
                        ],
                        messages: []
                    })
            });
            // Act
            const result = await (0, _domains.createDnsRecord)({
                subdomain: testSubdomain,
                rootDomain: rootDomain,
                proxied: true,
                ttl: 1
            });
            // Assert
            (0, _globals.expect)(result).toBeDefined();
            (0, _globals.expect)(result.success).toBe(false);
            (0, _globals.expect)(result.errors).toHaveLength(1);
            (0, _globals.expect)(result.errors[0].message).toBe('Rate limit exceeded');
            (0, _globals.expect)(result.errors[0].code).toBe(10013);
        });
    });
    (0, _globals.describe)('API Request Format Tests', ()=>{
        (0, _globals.it)('should send properly formatted DNS record creation request', async ()=>{
            // Arrange
            const testSubdomain = 'format-test';
            const rootDomain = 'i-ep.app';
            const customTtl = 300;
            const proxied = false;
            // Zone ID alma
            mockFetch.mockResolvedValueOnce({
                ok: true,
                json: ()=>Promise.resolve({
                        success: true,
                        result: [
                            {
                                id: TEST_ENV.CLOUDFLARE_ZONE_ID,
                                name: rootDomain
                            }
                        ]
                    })
            });
            // DNS record oluşturma
            mockFetch.mockResolvedValueOnce({
                ok: true,
                json: ()=>Promise.resolve({
                        success: true,
                        result: {
                            id: 'test-record-id',
                            type: 'CNAME',
                            name: `${testSubdomain}.${rootDomain}`,
                            content: rootDomain,
                            proxied: proxied,
                            ttl: customTtl
                        }
                    })
            });
            // Act
            await (0, _domains.createDnsRecord)({
                subdomain: testSubdomain,
                rootDomain: rootDomain,
                proxied: proxied,
                ttl: customTtl
            });
            // Assert - İstek formatını kontrol et
            const lastCall = mockFetch.mock.calls[1];
            (0, _globals.expect)(lastCall[1].method).toBe('POST');
            (0, _globals.expect)(lastCall[1].headers['Content-Type']).toBe('application/json');
            (0, _globals.expect)(lastCall[1].headers['Authorization']).toBe(`Bearer ${TEST_ENV.CLOUDFLARE_API_TOKEN}`);
            const requestBody = JSON.parse(lastCall[1].body);
            (0, _globals.expect)(requestBody.type).toBe('CNAME');
            (0, _globals.expect)(requestBody.name).toBe(`${testSubdomain}.${rootDomain}`);
            (0, _globals.expect)(requestBody.content).toBe(rootDomain);
            (0, _globals.expect)(requestBody.proxied).toBe(proxied);
            (0, _globals.expect)(requestBody.ttl).toBe(customTtl);
        });
    });
});

//# sourceMappingURL=data:application/json;base64,