{"version":3,"sources":["/Users/turanmusabosman/Projects/i-ep.app/src/__tests__/integration/quarantine/cloudflare-dns-jest.test.ts"],"sourcesContent":["import { describe, it, expect, beforeEach, afterEach, beforeAll } from '@jest/globals';\n\n// env module'unu mock'la\njest.mock('@/env', () => ({\n  env: {\n    CLOUDFLARE_API_TOKEN: 'test-cf-token',\n    CLOUDFLARE_ZONE_ID: '023e105f4ecef8ad9ca31a8372d0c353',\n  },\n}));\n\nimport { createDnsRecord } from '@/lib/cloudflare/domains';\n\n// Global fetch'i mock'la\nconst mockFetch = jest.fn();\nglobal.fetch = mockFetch;\n\n// Test environment variables\nconst TEST_ENV = {\n  CLOUDFLARE_API_TOKEN: 'test-cf-token',\n  CLOUDFLARE_ZONE_ID: '023e105f4ecef8ad9ca31a8372d0c353',\n};\n\ndescribe('Cloudflare DNS Integration Tests (Jest Mocked)', () => {\n  beforeAll(() => {\n    // Test ortamı değişkenlerini ayarla\n    Object.assign(process.env, TEST_ENV);\n  });\n\n  beforeEach(() => {\n    mockFetch.mockClear();\n  });\n\n  afterEach(() => {\n    mockFetch.mockReset();\n  });\n\n  describe('createSubdomainDNSRecord Tests', () => {\n    it('should successfully create a DNS record for a new subdomain', async () => {\n      // Arrange\n      const testSubdomain = 'test-okulu';\n      const rootDomain = 'i-ep.app';\n\n      // Zone ID alma mock'ı\n      mockFetch.mockResolvedValueOnce({\n        ok: true,\n        json: () =>\n          Promise.resolve({\n            success: true,\n            errors: [],\n            messages: [],\n            result: [\n              {\n                id: '023e105f4ecef8ad9ca31a8372d0c353',\n                name: 'i-ep.app',\n                status: 'active',\n              },\n            ],\n          }),\n      });\n\n      // DNS record oluşturma mock'ı\n      mockFetch.mockResolvedValueOnce({\n        ok: true,\n        json: () =>\n          Promise.resolve({\n            success: true,\n            errors: [],\n            messages: [],\n            result: {\n              id: '372e67954025e0ba6aaa6d586b9e0b59',\n              type: 'CNAME',\n              name: `${testSubdomain}.${rootDomain}`,\n              content: 'i-ep.app',\n              proxied: true,\n              ttl: 1,\n            },\n          }),\n      });\n\n      // Act\n      const result = await createDnsRecord({\n        subdomain: testSubdomain,\n        rootDomain: rootDomain,\n        proxied: true,\n        ttl: 1,\n      });\n\n      // Assert\n      expect(result).toBeDefined();\n      expect(result.success).toBe(true);\n      expect(result.errors).toHaveLength(0);\n      expect(result.result).toBeDefined();\n      expect(result.result?.name).toBe(`${testSubdomain}.${rootDomain}`);\n      expect(result.result?.type).toBe('CNAME');\n      expect(result.result?.proxied).toBe(true);\n\n      // API çağrılarının doğru yapıldığını kontrol et\n      expect(mockFetch).toHaveBeenCalledTimes(2);\n\n      // Zone ID alma çağrısı\n      expect(mockFetch).toHaveBeenNthCalledWith(\n        1,\n        'https://api.cloudflare.com/client/v4/zones?name=i-ep.app',\n        expect.objectContaining({\n          headers: expect.objectContaining({\n            Authorization: `Bearer ${TEST_ENV.CLOUDFLARE_API_TOKEN}`,\n          }),\n        })\n      );\n\n      // DNS record oluşturma çağrısı\n      expect(mockFetch).toHaveBeenNthCalledWith(\n        2,\n        `https://api.cloudflare.com/client/v4/zones/${TEST_ENV.CLOUDFLARE_ZONE_ID}/dns_records`,\n        expect.objectContaining({\n          method: 'POST',\n          headers: expect.objectContaining({\n            Authorization: `Bearer ${TEST_ENV.CLOUDFLARE_API_TOKEN}`,\n            'Content-Type': 'application/json',\n          }),\n          body: expect.stringContaining(testSubdomain),\n        })\n      );\n    });\n\n    it('should handle DNS record creation when record already exists', async () => {\n      // Arrange\n      const testSubdomain = 'existing-tenant';\n      const rootDomain = 'i-ep.app';\n\n      // Zone ID alma başarılı\n      mockFetch.mockResolvedValueOnce({\n        ok: true,\n        json: () =>\n          Promise.resolve({\n            success: true,\n            result: [{ id: TEST_ENV.CLOUDFLARE_ZONE_ID, name: rootDomain }],\n          }),\n      });\n\n      // DNS record zaten var hatası\n      mockFetch.mockResolvedValueOnce({\n        ok: false,\n        status: 400,\n        json: () =>\n          Promise.resolve({\n            success: false,\n            errors: [\n              {\n                code: 81053,\n                message: 'DNS record already exists',\n              },\n            ],\n            messages: [],\n            result: null,\n          }),\n      });\n\n      // Act\n      const result = await createDnsRecord({\n        subdomain: testSubdomain,\n        rootDomain: rootDomain,\n        proxied: true,\n        ttl: 1,\n      });\n\n      // Assert\n      expect(result).toBeDefined();\n      expect(result.success).toBe(false);\n      expect(result.errors).toHaveLength(1);\n      expect(result.errors![0].message).toBe('DNS record already exists');\n      expect(result.errors![0].code).toBe(81053);\n    });\n\n    it('should handle unauthorized API access', async () => {\n      // Arrange\n      const testSubdomain = 'unauthorized-test';\n      const rootDomain = 'i-ep.app';\n\n      // Zone ID alma başarılı\n      mockFetch.mockResolvedValueOnce({\n        ok: true,\n        json: () =>\n          Promise.resolve({\n            success: true,\n            result: [{ id: TEST_ENV.CLOUDFLARE_ZONE_ID, name: rootDomain }],\n          }),\n      });\n\n      // Yetkisiz erişim hatası\n      mockFetch.mockResolvedValueOnce({\n        ok: false,\n        status: 401,\n        json: () =>\n          Promise.resolve({\n            success: false,\n            errors: [\n              {\n                code: 10000,\n                message: 'Authentication error',\n              },\n            ],\n            messages: [],\n          }),\n      });\n\n      // Act\n      const result = await createDnsRecord({\n        subdomain: testSubdomain,\n        rootDomain: rootDomain,\n        proxied: true,\n        ttl: 1,\n      });\n\n      // Assert\n      expect(result).toBeDefined();\n      expect(result.success).toBe(false);\n      expect(result.errors).toHaveLength(1);\n      expect(result.errors![0].message).toBe('Authentication error');\n      expect(result.errors![0].code).toBe(10000);\n    });\n\n    it('should handle zone not found error', async () => {\n      // Arrange\n      const testSubdomain = 'test-subdomain';\n      const rootDomain = 'nonexistent.com';\n\n      // Zone bulunamadı\n      mockFetch.mockResolvedValueOnce({\n        ok: true,\n        json: () =>\n          Promise.resolve({\n            success: true,\n            errors: [],\n            messages: [],\n            result: [], // Boş result, zone bulunamadı\n          }),\n      });\n\n      // Act\n      const result = await createDnsRecord({\n        subdomain: testSubdomain,\n        rootDomain: rootDomain,\n        proxied: true,\n        ttl: 1,\n      });\n\n      // Assert\n      expect(result).toBeDefined();\n      expect(result.success).toBe(false);\n      expect(result.errors).toHaveLength(1);\n      expect(result.errors![0].message).toContain('zone bulunamadı');\n    });\n\n    it('should handle network timeout errors', async () => {\n      // Arrange\n      const testSubdomain = 'timeout-test';\n      const rootDomain = 'i-ep.app';\n\n      // Network timeout simülasyonu\n      mockFetch.mockRejectedValueOnce(new Error('Network timeout'));\n\n      // Act\n      const result = await createDnsRecord({\n        subdomain: testSubdomain,\n        rootDomain: rootDomain,\n        proxied: true,\n        ttl: 1,\n      });\n\n      // Assert - Error objesi döndürülmeli (throw edilmez)\n      expect(result.success).toBe(false);\n      expect(result.errors).toHaveLength(1);\n      expect(result.errors![0].message).toContain('zone bulunamadı');\n    });\n\n    it('should validate required parameters', async () => {\n      // Act - Boş subdomain\n      const result1 = await createDnsRecord({\n        subdomain: '',\n        rootDomain: 'i-ep.app',\n        proxied: true,\n        ttl: 1,\n      });\n\n      // Assert - Error objesi döndürülmeli (throw edilmez)\n      expect(result1.success).toBe(false);\n      expect(result1.errors).toHaveLength(1);\n\n      // Act - Boş root domain\n      const result2 = await createDnsRecord({\n        subdomain: 'test',\n        rootDomain: '',\n        proxied: true,\n        ttl: 1,\n      });\n\n      // Assert - Error objesi döndürülmeli (throw edilmez)\n      expect(result2.success).toBe(false);\n      expect(result2.errors).toHaveLength(1);\n    });\n\n    it('should handle rate limit errors gracefully', async () => {\n      // Arrange\n      const testSubdomain = 'ratelimit-test';\n      const rootDomain = 'i-ep.app';\n\n      // Zone ID alma başarılı\n      mockFetch.mockResolvedValueOnce({\n        ok: true,\n        json: () =>\n          Promise.resolve({\n            success: true,\n            result: [{ id: TEST_ENV.CLOUDFLARE_ZONE_ID, name: rootDomain }],\n          }),\n      });\n\n      // Rate limit hatası\n      mockFetch.mockResolvedValueOnce({\n        ok: false,\n        status: 429,\n        json: () =>\n          Promise.resolve({\n            success: false,\n            errors: [\n              {\n                code: 10013,\n                message: 'Rate limit exceeded',\n              },\n            ],\n            messages: [],\n          }),\n      });\n\n      // Act\n      const result = await createDnsRecord({\n        subdomain: testSubdomain,\n        rootDomain: rootDomain,\n        proxied: true,\n        ttl: 1,\n      });\n\n      // Assert\n      expect(result).toBeDefined();\n      expect(result.success).toBe(false);\n      expect(result.errors).toHaveLength(1);\n      expect(result.errors![0].message).toBe('Rate limit exceeded');\n      expect(result.errors![0].code).toBe(10013);\n    });\n  });\n\n  describe('API Request Format Tests', () => {\n    it('should send properly formatted DNS record creation request', async () => {\n      // Arrange\n      const testSubdomain = 'format-test';\n      const rootDomain = 'i-ep.app';\n      const customTtl = 300;\n      const proxied = false;\n\n      // Zone ID alma\n      mockFetch.mockResolvedValueOnce({\n        ok: true,\n        json: () =>\n          Promise.resolve({\n            success: true,\n            result: [{ id: TEST_ENV.CLOUDFLARE_ZONE_ID, name: rootDomain }],\n          }),\n      });\n\n      // DNS record oluşturma\n      mockFetch.mockResolvedValueOnce({\n        ok: true,\n        json: () =>\n          Promise.resolve({\n            success: true,\n            result: {\n              id: 'test-record-id',\n              type: 'CNAME',\n              name: `${testSubdomain}.${rootDomain}`,\n              content: rootDomain,\n              proxied: proxied,\n              ttl: customTtl,\n            },\n          }),\n      });\n\n      // Act\n      await createDnsRecord({\n        subdomain: testSubdomain,\n        rootDomain: rootDomain,\n        proxied: proxied,\n        ttl: customTtl,\n      });\n\n      // Assert - İstek formatını kontrol et\n      const lastCall = mockFetch.mock.calls[1];\n      expect(lastCall[1].method).toBe('POST');\n      expect(lastCall[1].headers['Content-Type']).toBe('application/json');\n      expect(lastCall[1].headers['Authorization']).toBe(`Bearer ${TEST_ENV.CLOUDFLARE_API_TOKEN}`);\n\n      const requestBody = JSON.parse(lastCall[1].body);\n      expect(requestBody.type).toBe('CNAME');\n      expect(requestBody.name).toBe(`${testSubdomain}.${rootDomain}`);\n      expect(requestBody.content).toBe(rootDomain);\n      expect(requestBody.proxied).toBe(proxied);\n      expect(requestBody.ttl).toBe(customTtl);\n    });\n  });\n});\n"],"names":["jest","mock","env","CLOUDFLARE_API_TOKEN","CLOUDFLARE_ZONE_ID","mockFetch","fn","global","fetch","TEST_ENV","describe","beforeAll","Object","assign","process","beforeEach","mockClear","afterEach","mockReset","it","testSubdomain","rootDomain","mockResolvedValueOnce","ok","json","Promise","resolve","success","errors","messages","result","id","name","status","type","content","proxied","ttl","createDnsRecord","subdomain","expect","toBeDefined","toBe","toHaveLength","toHaveBeenCalledTimes","toHaveBeenNthCalledWith","objectContaining","headers","Authorization","method","body","stringContaining","code","message","toContain","mockRejectedValueOnce","Error","result1","result2","customTtl","lastCall","calls","requestBody","JSON","parse"],"mappings":"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"}