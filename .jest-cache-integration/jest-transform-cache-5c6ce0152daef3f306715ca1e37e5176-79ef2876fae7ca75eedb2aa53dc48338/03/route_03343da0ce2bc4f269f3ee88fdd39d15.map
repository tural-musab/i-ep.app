{"version":3,"sources":["/Users/turanmusabosman/Projects/i-ep.app/src/app/api/super-admin/system-health/route.ts"],"sourcesContent":["/**\n * Super Admin System Health API\n * Sprint 7: Super Admin Paneli - Sistem Sağlığı Endpoint'i\n *\n * Bu endpoint sistem sağlığını kontrol eder ve sadece super admin'ler tarafından erişilebilir.\n *\n * GET /api/super-admin/system-health\n * GET /api/super-admin/system-health/quick\n */\n\nimport { NextRequest, NextResponse } from 'next/server';\nimport { SystemHealthService } from '@/lib/system/system-health';\nimport { supabaseAdmin } from '@/lib/supabase/admin';\nimport { getLogger } from '@/lib/utils/logger';\nimport { HealthCheckResponse } from '@/types/system-health';\n\nconst logger = getLogger('super-admin-health-api');\n\n/**\n * Super Admin yetki kontrolü\n */\nasync function validateSuperAdminAccess(\n  request: NextRequest\n): Promise<{ authorized: boolean; error?: string }> {\n  try {\n    // Authorization header kontrolü\n    const authHeader = request.headers.get('authorization');\n    if (!authHeader || !authHeader.startsWith('Bearer ')) {\n      return { authorized: false, error: 'Authorization header missing or invalid' };\n    }\n\n    const token = authHeader.split(' ')[1];\n\n    // Supabase ile token doğrulama\n    const {\n      data: { user },\n      error: authError,\n    } = await supabaseAdmin.auth.getUser(token);\n\n    if (authError || !user) {\n      logger.warn('Invalid or expired token in system health request');\n      return { authorized: false, error: 'Invalid or expired token' };\n    }\n\n    // Super admin rolü kontrolü\n    const { data: isSuperAdmin, error: roleError } = await supabaseAdmin.rpc('is_super_admin');\n\n    if (roleError) {\n      logger.error('Error checking super admin status:', roleError);\n      return { authorized: false, error: 'Unable to verify admin status' };\n    }\n\n    if (!isSuperAdmin) {\n      logger.warn(`Non-admin user attempted to access system health: ${user.email}`);\n      return { authorized: false, error: 'Super admin access required' };\n    }\n\n    logger.info(`Super admin system health access granted: ${user.email}`);\n    return { authorized: true };\n  } catch (error) {\n    logger.error('Super admin validation error:', error);\n    return { authorized: false, error: 'Authentication verification failed' };\n  }\n}\n\n/**\n * GET /api/super-admin/system-health\n * Tam sistem sağlığı raporu döndürür\n *\n * @swagger\n * /api/super-admin/system-health:\n *   get:\n *     summary: Comprehensive system health report\n *     description: Returns detailed health status of all system components (Database, Redis, SSL, etc.). Requires super admin access.\n *     tags:\n *       - Super Admin\n *       - System Health\n *     security:\n *       - bearerAuth: []\n *     responses:\n *       200:\n *         description: System health report\n *         content:\n *           application/json:\n *             schema:\n *               type: object\n *               properties:\n *                 success:\n *                   type: boolean\n *                 data:\n *                   $ref: '#/components/schemas/SystemHealthReport'\n *                 timestamp:\n *                   type: string\n *                   format: date-time\n *       401:\n *         description: Unauthorized - Super admin access required\n *       500:\n *         description: Health check failed\n */\nexport async function GET(request: NextRequest) {\n  const timestamp = new Date().toISOString();\n\n  try {\n    // Super admin yetki kontrolü\n    const { authorized, error: authError } = await validateSuperAdminAccess(request);\n    if (!authorized) {\n      return NextResponse.json(\n        {\n          success: false,\n          error: authError || 'Unauthorized',\n          timestamp,\n        } satisfies HealthCheckResponse,\n        { status: 401 }\n      );\n    }\n\n    // Full health check\n    logger.info('Performing comprehensive system health check');\n    const healthReport = await SystemHealthService.generateHealthReport();\n\n    // Log system status\n    logger.info(`System health check completed: ${healthReport.overall.status}`, {\n      status: healthReport.overall.status,\n      uptime: healthReport.overall.uptime,\n      checks: healthReport.overall.checks.length,\n      failedChecks: healthReport.overall.checks.filter((c) => c.status === 'fail').length,\n    });\n\n    return NextResponse.json({\n      success: true,\n      data: healthReport,\n      timestamp,\n    } satisfies HealthCheckResponse);\n  } catch (error) {\n    logger.error('System health check failed:', error);\n\n    return NextResponse.json(\n      {\n        success: false,\n        error: error instanceof Error ? error.message : 'Health check failed',\n        timestamp,\n      } satisfies HealthCheckResponse,\n      { status: 500 }\n    );\n  }\n}\n\n/**\n * Health check özeti döndüren alternatif endpoint\n * Bu endpoint cache'lenebilir ve daha sık çağrılabilir\n */\nexport async function HEAD(request: NextRequest) {\n  try {\n    const { authorized } = await validateSuperAdminAccess(request);\n    if (!authorized) {\n      return new NextResponse(null, { status: 401 });\n    }\n\n    const quickResult = await SystemHealthService.quickHealthCheck();\n    const status = quickResult.status === 'healthy' ? 200 : 503;\n\n    return new NextResponse(null, {\n      status,\n      headers: {\n        'X-Health-Status': quickResult.status,\n        'X-Health-Timestamp': quickResult.timestamp,\n        'Cache-Control': 'no-cache, must-revalidate',\n      },\n    });\n  } catch (error) {\n    logger.error('HEAD health check failed:', error);\n    return new NextResponse(null, { status: 500 });\n  }\n}\n"],"names":["GET","HEAD","logger","getLogger","validateSuperAdminAccess","request","authHeader","headers","get","startsWith","authorized","error","token","split","data","user","authError","supabaseAdmin","auth","getUser","warn","isSuperAdmin","roleError","rpc","email","info","timestamp","Date","toISOString","NextResponse","json","success","status","healthReport","SystemHealthService","generateHealthReport","overall","uptime","checks","length","failedChecks","filter","c","Error","message","quickResult","quickHealthCheck"],"mappings":"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"}