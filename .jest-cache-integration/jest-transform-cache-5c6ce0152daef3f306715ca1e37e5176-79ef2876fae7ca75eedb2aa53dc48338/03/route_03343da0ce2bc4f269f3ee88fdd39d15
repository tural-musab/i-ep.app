07d7da287ed0bc0f3144f821733ecfe1
/**
 * Super Admin System Health API
 * Sprint 7: Super Admin Paneli - Sistem Sağlığı Endpoint'i
 *
 * Bu endpoint sistem sağlığını kontrol eder ve sadece super admin'ler tarafından erişilebilir.
 *
 * GET /api/super-admin/system-health
 * GET /api/super-admin/system-health/quick
 */ "use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    GET: function() {
        return GET;
    },
    HEAD: function() {
        return HEAD;
    }
});
const _server = require("next/server");
const _systemhealth = require("../../../../lib/system/system-health");
const _admin = require("../../../../lib/supabase/admin");
const _logger = require("../../../../lib/utils/logger");
const logger = (0, _logger.getLogger)('super-admin-health-api');
/**
 * Super Admin yetki kontrolü
 */ async function validateSuperAdminAccess(request) {
    try {
        // Authorization header kontrolü
        const authHeader = request.headers.get('authorization');
        if (!authHeader || !authHeader.startsWith('Bearer ')) {
            return {
                authorized: false,
                error: 'Authorization header missing or invalid'
            };
        }
        const token = authHeader.split(' ')[1];
        // Supabase ile token doğrulama
        const { data: { user }, error: authError } = await _admin.supabaseAdmin.auth.getUser(token);
        if (authError || !user) {
            logger.warn('Invalid or expired token in system health request');
            return {
                authorized: false,
                error: 'Invalid or expired token'
            };
        }
        // Super admin rolü kontrolü
        const { data: isSuperAdmin, error: roleError } = await _admin.supabaseAdmin.rpc('is_super_admin');
        if (roleError) {
            logger.error('Error checking super admin status:', roleError);
            return {
                authorized: false,
                error: 'Unable to verify admin status'
            };
        }
        if (!isSuperAdmin) {
            logger.warn(`Non-admin user attempted to access system health: ${user.email}`);
            return {
                authorized: false,
                error: 'Super admin access required'
            };
        }
        logger.info(`Super admin system health access granted: ${user.email}`);
        return {
            authorized: true
        };
    } catch (error) {
        logger.error('Super admin validation error:', error);
        return {
            authorized: false,
            error: 'Authentication verification failed'
        };
    }
}
async function GET(request) {
    const timestamp = new Date().toISOString();
    try {
        // Super admin yetki kontrolü
        const { authorized, error: authError } = await validateSuperAdminAccess(request);
        if (!authorized) {
            return _server.NextResponse.json({
                success: false,
                error: authError || 'Unauthorized',
                timestamp
            }, {
                status: 401
            });
        }
        // Full health check
        logger.info('Performing comprehensive system health check');
        const healthReport = await _systemhealth.SystemHealthService.generateHealthReport();
        // Log system status
        logger.info(`System health check completed: ${healthReport.overall.status}`, {
            status: healthReport.overall.status,
            uptime: healthReport.overall.uptime,
            checks: healthReport.overall.checks.length,
            failedChecks: healthReport.overall.checks.filter((c)=>c.status === 'fail').length
        });
        return _server.NextResponse.json({
            success: true,
            data: healthReport,
            timestamp
        });
    } catch (error) {
        logger.error('System health check failed:', error);
        return _server.NextResponse.json({
            success: false,
            error: error instanceof Error ? error.message : 'Health check failed',
            timestamp
        }, {
            status: 500
        });
    }
}
async function HEAD(request) {
    try {
        const { authorized } = await validateSuperAdminAccess(request);
        if (!authorized) {
            return new _server.NextResponse(null, {
                status: 401
            });
        }
        const quickResult = await _systemhealth.SystemHealthService.quickHealthCheck();
        const status = quickResult.status === 'healthy' ? 200 : 503;
        return new _server.NextResponse(null, {
            status,
            headers: {
                'X-Health-Status': quickResult.status,
                'X-Health-Timestamp': quickResult.timestamp,
                'Cache-Control': 'no-cache, must-revalidate'
            }
        });
    } catch (error) {
        logger.error('HEAD health check failed:', error);
        return new _server.NextResponse(null, {
            status: 500
        });
    }
}

//# sourceMappingURL=data:application/json;base64,