{"version":3,"sources":["/Users/turanmusabosman/Projects/i-ep.app/src/__tests__/integration/quarantine/security/sqli.test.ts"],"sourcesContent":["/**\n * SQL Injection Security Tests - Pattern Detection Only\n *\n * Bu test dosyası SQL enjeksiyon pattern'lerini tespit eder.\n * CI environment'ta güvenilir çalışması için basit tutulmuştur.\n */\n\nimport { describe, it, expect } from '@jest/globals';\n\ndescribe('SQL Injection Security Tests', () => {\n  // SQL injection payloads to detect\n  const sqlInjectionPayloads = [\n    \"' OR 1=1--\",\n    \"' OR '1'='1\",\n    \"' UNION SELECT null--\",\n    \"'; DROP TABLE users;--\",\n    \"' OR version()--\",\n    \"' OR current_user--\",\n    '%27%20OR%201%3D1--',\n  ];\n\n  // SQL injection detection patterns\n  const sqlPatterns = [\n    /OR\\s+['\"]?1['\"]?\\s*=\\s*['\"]?1['\"]?/i,\n    /UNION\\s+SELECT/i,\n    /DROP\\s+TABLE/i,\n    /--/,\n    /#/,\n    /\\/\\*/,\n    /information_schema/i,\n    /current_user/i,\n    /version\\(\\)/i,\n    /pg_sleep/i,\n    /WAITFOR\\s+DELAY/i,\n  ];\n\n  describe('SQL Injection Pattern Detection', () => {\n    sqlInjectionPayloads.forEach((payload, index) => {\n      it(`should detect SQL injection pattern #${index + 1}: \"${payload}\"`, () => {\n        const containsSqlInjection = sqlPatterns.some((pattern) => pattern.test(payload));\n\n        expect(containsSqlInjection).toBe(true);\n      });\n    });\n\n    it('should not flag safe inputs', () => {\n      const safeInputs = [\n        'normal search query',\n        'user@example.com',\n        'Student Name',\n        '123456',\n        'safe-string-123',\n      ];\n\n      safeInputs.forEach((input) => {\n        const containsSqlInjection = sqlPatterns.some((pattern) => pattern.test(input));\n\n        expect(containsSqlInjection).toBe(false);\n      });\n    });\n  });\n\n  describe('Input Sanitization Tests', () => {\n    it('should remove dangerous SQL characters', () => {\n      const maliciousInput = \"'; DROP TABLE users; --\";\n      const sanitized = maliciousInput.replace(/[';-]/g, '');\n\n      expect(sanitized).not.toContain(';');\n      expect(sanitized).not.toContain(\"'\");\n      expect(sanitized).not.toContain('--');\n    });\n\n    it('should escape SQL metacharacters', () => {\n      const maliciousInput = \"' OR 1=1 --\";\n      const escaped = maliciousInput.replace(/'/g, \"''\");\n\n      expect(escaped).toBe(\"'' OR 1=1 --\");\n    });\n  });\n\n  describe('URL Parameter Validation', () => {\n    it('should validate URL parameters for SQL injection', () => {\n      const mockUrl = \"http://localhost:3000/api/users?search=' OR 1=1--\";\n      const urlParts = mockUrl.split('?')[1] || '';\n      const params = new URLSearchParams(urlParts);\n      const searchParam = params.get('search') || '';\n\n      const containsSqlInjection = sqlPatterns.some((pattern) => pattern.test(searchParam));\n\n      expect(containsSqlInjection).toBe(true);\n    });\n  });\n\n  describe('Error Message Security', () => {\n    it('should not expose database information in errors', () => {\n      const safeMockErrorResponse = {\n        error: 'Invalid input parameters',\n        message: 'Please check your request and try again',\n      };\n\n      const errorString = JSON.stringify(safeMockErrorResponse);\n      expect(errorString).not.toMatch(/postgresql/i);\n      expect(errorString).not.toMatch(/mysql/i);\n      expect(errorString).not.toMatch(/supabase/i);\n      expect(errorString).not.toMatch(/version/i);\n      expect(errorString).not.toMatch(/table/i);\n    });\n  });\n\n  describe('Performance DoS Protection', () => {\n    it('should handle large payloads efficiently', () => {\n      const largePayload = \"' OR 1=1--\".repeat(1000);\n\n      const startTime = performance.now();\n      const containsSqlInjection = /OR\\s+1\\s*=\\s*1/i.test(largePayload);\n      const endTime = performance.now();\n\n      expect(containsSqlInjection).toBe(true);\n      expect(endTime - startTime).toBeLessThan(100); // Should be fast\n    });\n  });\n});\n"],"names":["describe","sqlInjectionPayloads","sqlPatterns","forEach","payload","index","it","containsSqlInjection","some","pattern","test","expect","toBe","safeInputs","input","maliciousInput","sanitized","replace","not","toContain","escaped","mockUrl","urlParts","split","params","URLSearchParams","searchParam","get","safeMockErrorResponse","error","message","errorString","JSON","stringify","toMatch","largePayload","repeat","startTime","performance","now","endTime","toBeLessThan"],"mappings":"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"}