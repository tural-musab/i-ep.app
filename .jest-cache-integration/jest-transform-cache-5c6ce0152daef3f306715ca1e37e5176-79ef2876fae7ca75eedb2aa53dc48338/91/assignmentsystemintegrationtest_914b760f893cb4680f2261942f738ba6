4979ca9e76806956d855da4d459b619f
/**
 * Assignment System Integration Tests
 * Ä°-EP.APP - Professional Integration Testing
 *
 * Tests the integration between:
 * - Assignment Repository
 * - Assignment Validation
 * - Assignment Types
 * - Database Layer (mocked)
 */ "use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
const _globals = require("@jest/globals");
const _assignmentrepository = require("../lib/repository/assignment-repository");
const _assignmentvalidation = require("../lib/validations/assignment-validation");
const _assignment = require("../types/assignment");
// Mock the Supabase client
_globals.jest.mock('../lib/supabase/client', ()=>({
        supabase: {
            from: _globals.jest.fn(()=>({
                    select: _globals.jest.fn().mockReturnThis(),
                    insert: _globals.jest.fn().mockReturnThis(),
                    update: _globals.jest.fn().mockReturnThis(),
                    delete: _globals.jest.fn().mockReturnThis(),
                    eq: _globals.jest.fn().mockReturnThis(),
                    gte: _globals.jest.fn().mockReturnThis(),
                    lte: _globals.jest.fn().mockReturnThis(),
                    order: _globals.jest.fn().mockReturnThis(),
                    limit: _globals.jest.fn().mockReturnThis(),
                    single: _globals.jest.fn()
                }))
        }
    }));
// Mock Next.js headers for tenant isolation
_globals.jest.mock('next/headers', ()=>({
        cookies: _globals.jest.fn(()=>({
                get: _globals.jest.fn(()=>({
                        value: 'test-tenant-id'
                    }))
            }))
    }));
(0, _globals.describe)('Assignment System Integration Tests', ()=>{
    let assignmentRepository;
    let mockSupabaseFrom;
    (0, _globals.beforeAll)(()=>{
        // Setup global mocks
        const { supabase } = require('../lib/supabase/client');
        mockSupabaseFrom = supabase.from;
    });
    (0, _globals.beforeEach)(()=>{
        // Reset all mocks before each test
        _globals.jest.clearAllMocks();
        // Create fresh repository instance
        assignmentRepository = new _assignmentrepository.AssignmentRepository();
        // Setup default successful responses
        mockSupabaseFrom.mockReturnValue({
            select: _globals.jest.fn().mockReturnThis(),
            insert: _globals.jest.fn().mockReturnThis(),
            update: _globals.jest.fn().mockReturnThis(),
            delete: _globals.jest.fn().mockReturnThis(),
            eq: _globals.jest.fn().mockReturnThis(),
            gte: _globals.jest.fn().mockReturnThis(),
            lte: _globals.jest.fn().mockReturnThis(),
            order: _globals.jest.fn().mockReturnThis(),
            limit: _globals.jest.fn().mockReturnThis(),
            single: _globals.jest.fn().mockResolvedValue({
                data: null,
                error: null
            })
        });
    });
    (0, _globals.afterAll)(()=>{
        _globals.jest.restoreAllMocks();
    });
    (0, _globals.describe)('Assignment Repository Integration', ()=>{
        (0, _globals.describe)('create', ()=>{
            (0, _globals.it)('should create assignment with valid data', async ()=>{
                const validAssignment = {
                    title: 'Mathematics Homework',
                    description: 'Solve problems 1-10 from chapter 3',
                    type: 'homework',
                    subject: 'Mathematics',
                    class_id: 'class-123',
                    teacher_id: 'teacher-456',
                    due_date: '2025-07-20T10:00:00Z',
                    max_score: 100,
                    is_graded: false,
                    status: 'draft',
                    tenant_id: 'test-tenant-id'
                };
                // Mock successful database response
                const mockChain = {
                    select: _globals.jest.fn().mockReturnThis(),
                    insert: _globals.jest.fn().mockReturnThis(),
                    eq: _globals.jest.fn().mockReturnThis(),
                    single: _globals.jest.fn().mockResolvedValue({
                        data: {
                            id: 'assignment-123',
                            ...validAssignment
                        },
                        error: null
                    })
                };
                mockSupabaseFrom.mockReturnValue(mockChain);
                const result = await assignmentRepository.create(validAssignment);
                (0, _globals.expect)(result).toBeDefined();
                (0, _globals.expect)(result.id).toBe('assignment-123');
                (0, _globals.expect)(result.title).toBe('Mathematics Homework');
                (0, _globals.expect)(mockSupabaseFrom).toHaveBeenCalledWith('assignments');
            });
            (0, _globals.it)('should handle database errors during creation', async ()=>{
                const validAssignment = {
                    title: 'Test Assignment',
                    description: 'Test Description',
                    type: 'homework',
                    subject: 'Mathematics',
                    class_id: 'class-123',
                    teacher_id: 'teacher-456',
                    due_date: '2025-07-20T10:00:00Z',
                    max_score: 100,
                    is_graded: false,
                    status: 'draft',
                    tenant_id: 'test-tenant-id'
                };
                // Mock database error
                const mockChain = {
                    select: _globals.jest.fn().mockReturnThis(),
                    insert: _globals.jest.fn().mockReturnThis(),
                    eq: _globals.jest.fn().mockReturnThis(),
                    single: _globals.jest.fn().mockResolvedValue({
                        data: null,
                        error: {
                            message: 'Database connection failed'
                        }
                    })
                };
                mockSupabaseFrom.mockReturnValue(mockChain);
                await (0, _globals.expect)(assignmentRepository.create(validAssignment)).rejects.toThrow('Repository error: Database connection failed');
            });
            (0, _globals.it)('should enforce tenant isolation during creation', async ()=>{
                const assignmentWithDifferentTenant = {
                    title: 'Test Assignment',
                    description: 'Test Description',
                    type: 'homework',
                    subject: 'Mathematics',
                    class_id: 'class-123',
                    teacher_id: 'teacher-456',
                    due_date: '2025-07-20T10:00:00Z',
                    max_score: 100,
                    is_graded: false,
                    status: 'draft',
                    tenant_id: 'different-tenant-id'
                };
                const mockChain = {
                    select: _globals.jest.fn().mockReturnThis(),
                    insert: _globals.jest.fn().mockReturnThis(),
                    eq: _globals.jest.fn().mockReturnThis(),
                    single: _globals.jest.fn().mockResolvedValue({
                        data: {
                            id: 'assignment-123',
                            ...assignmentWithDifferentTenant
                        },
                        error: null
                    })
                };
                mockSupabaseFrom.mockReturnValue(mockChain);
                const result = await assignmentRepository.create(assignmentWithDifferentTenant);
                // Should still work, but tenant_id should be overridden by repository
                (0, _globals.expect)(result).toBeDefined();
                (0, _globals.expect)(mockSupabaseFrom).toHaveBeenCalledWith('assignments');
            });
        });
        (0, _globals.describe)('findById', ()=>{
            (0, _globals.it)('should find assignment by ID with tenant isolation', async ()=>{
                const mockAssignment = {
                    id: 'assignment-123',
                    title: 'Test Assignment',
                    description: 'Test Description',
                    type: 'homework',
                    subject: 'Mathematics',
                    class_id: 'class-123',
                    teacher_id: 'teacher-456',
                    due_date: '2025-07-20T10:00:00Z',
                    max_score: 100,
                    is_graded: false,
                    status: 'draft',
                    tenant_id: 'test-tenant-id'
                };
                const mockChain = {
                    select: _globals.jest.fn().mockReturnThis(),
                    eq: _globals.jest.fn().mockReturnThis(),
                    single: _globals.jest.fn().mockResolvedValue({
                        data: mockAssignment,
                        error: null
                    })
                };
                mockSupabaseFrom.mockReturnValue(mockChain);
                const result = await assignmentRepository.findById('assignment-123');
                (0, _globals.expect)(result).toBeDefined();
                (0, _globals.expect)(result?.id).toBe('assignment-123');
                (0, _globals.expect)(result?.title).toBe('Test Assignment');
                (0, _globals.expect)(mockSupabaseFrom).toHaveBeenCalledWith('assignments');
            });
            (0, _globals.it)('should return null for non-existent assignment', async ()=>{
                const mockChain = {
                    select: _globals.jest.fn().mockReturnThis(),
                    eq: _globals.jest.fn().mockReturnThis(),
                    single: _globals.jest.fn().mockResolvedValue({
                        data: null,
                        error: {
                            code: 'PGRST116'
                        }
                    })
                };
                mockSupabaseFrom.mockReturnValue(mockChain);
                const result = await assignmentRepository.findById('non-existent-id');
                (0, _globals.expect)(result).toBeNull();
            });
        });
        (0, _globals.describe)('findAll', ()=>{
            (0, _globals.it)('should find all assignments with pagination', async ()=>{
                const mockAssignments = [
                    {
                        id: 'assignment-1',
                        title: 'Assignment 1',
                        type: 'homework',
                        status: 'published',
                        tenant_id: 'test-tenant-id'
                    },
                    {
                        id: 'assignment-2',
                        title: 'Assignment 2',
                        type: 'exam',
                        status: 'draft',
                        tenant_id: 'test-tenant-id'
                    }
                ];
                const mockChain = {
                    select: _globals.jest.fn().mockReturnThis(),
                    eq: _globals.jest.fn().mockReturnThis(),
                    order: _globals.jest.fn().mockReturnThis(),
                    limit: _globals.jest.fn().mockReturnThis(),
                    range: _globals.jest.fn().mockResolvedValue({
                        data: mockAssignments,
                        error: null,
                        count: 2
                    })
                };
                mockSupabaseFrom.mockReturnValue(mockChain);
                const result = await assignmentRepository.findAll({
                    page: 1,
                    limit: 10
                });
                (0, _globals.expect)(result).toBeDefined();
                (0, _globals.expect)(result.data).toHaveLength(2);
                (0, _globals.expect)(result.totalCount).toBe(2);
                (0, _globals.expect)(result.data[0].id).toBe('assignment-1');
                (0, _globals.expect)(result.data[1].id).toBe('assignment-2');
            });
        });
        (0, _globals.describe)('update', ()=>{
            (0, _globals.it)('should update assignment with valid data', async ()=>{
                const updateData = {
                    title: 'Updated Assignment Title',
                    description: 'Updated description',
                    status: 'published'
                };
                const mockChain = {
                    update: _globals.jest.fn().mockReturnThis(),
                    eq: _globals.jest.fn().mockReturnThis(),
                    select: _globals.jest.fn().mockReturnThis(),
                    single: _globals.jest.fn().mockResolvedValue({
                        data: {
                            id: 'assignment-123',
                            ...updateData
                        },
                        error: null
                    })
                };
                mockSupabaseFrom.mockReturnValue(mockChain);
                const result = await assignmentRepository.update('assignment-123', updateData);
                (0, _globals.expect)(result).toBeDefined();
                (0, _globals.expect)(result.id).toBe('assignment-123');
                (0, _globals.expect)(result.title).toBe('Updated Assignment Title');
                (0, _globals.expect)(result.status).toBe('published');
            });
        });
        (0, _globals.describe)('delete', ()=>{
            (0, _globals.it)('should delete assignment successfully', async ()=>{
                const mockChain = {
                    delete: _globals.jest.fn().mockReturnThis(),
                    eq: _globals.jest.fn().mockReturnThis(),
                    select: _globals.jest.fn().mockReturnThis(),
                    single: _globals.jest.fn().mockResolvedValue({
                        data: {
                            id: 'assignment-123'
                        },
                        error: null
                    })
                };
                mockSupabaseFrom.mockReturnValue(mockChain);
                const result = await assignmentRepository.delete('assignment-123');
                (0, _globals.expect)(result).toBe(true);
                (0, _globals.expect)(mockSupabaseFrom).toHaveBeenCalledWith('assignments');
            });
        });
    });
    (0, _globals.describe)('Assignment Validation Integration', ()=>{
        (0, _globals.it)('should validate assignment with correct schema', ()=>{
            const validAssignmentData = {
                title: 'Valid Assignment',
                description: 'Valid description',
                due_date: new Date('2025-07-20T10:00:00Z'),
                class_id: 'class-123',
                teacher_id: 'teacher-456',
                tenant_id: 'test-tenant-id',
                points_possible: 100,
                assignment_type: 'HOMEWORK'
            };
            const result = _assignmentvalidation.assignmentValidation.safeParse(validAssignmentData);
            (0, _globals.expect)(result.success).toBe(true);
            if (result.success) {
                (0, _globals.expect)(result.data.title).toBe('Valid Assignment');
                (0, _globals.expect)(result.data.points_possible).toBe(100);
                (0, _globals.expect)(result.data.assignment_type).toBe('HOMEWORK');
            }
        });
        (0, _globals.it)('should reject invalid assignment data', ()=>{
            const invalidAssignmentData = {
                title: '',
                description: 'Valid description',
                due_date: 'invalid-date',
                class_id: '',
                teacher_id: 'teacher-456',
                tenant_id: 'test-tenant-id',
                points_possible: -10,
                assignment_type: 'INVALID_TYPE'
            };
            const result = _assignmentvalidation.assignmentValidation.safeParse(invalidAssignmentData);
            (0, _globals.expect)(result.success).toBe(false);
            if (!result.success) {
                (0, _globals.expect)(result.error.issues.length).toBeGreaterThan(0);
                (0, _globals.expect)(result.error.issues.some((issue)=>issue.path.includes('title'))).toBe(true);
                (0, _globals.expect)(result.error.issues.some((issue)=>issue.path.includes('points_possible'))).toBe(true);
            }
        });
    });
    (0, _globals.describe)('Assignment Types Integration', ()=>{
        (0, _globals.it)('should work with AssignmentStatus enum', ()=>{
            const validStatuses = [
                _assignment.AssignmentStatus.DRAFT,
                _assignment.AssignmentStatus.PUBLISHED,
                _assignment.AssignmentStatus.CLOSED,
                _assignment.AssignmentStatus.ARCHIVED
            ];
            validStatuses.forEach((status)=>{
                (0, _globals.expect)(Object.values(_assignment.AssignmentStatus)).toContain(status);
            });
        });
        (0, _globals.it)('should work with AssignmentType enum', ()=>{
            const validTypes = [
                _assignment.AssignmentType.HOMEWORK,
                _assignment.AssignmentType.PROJECT,
                _assignment.AssignmentType.EXAM,
                _assignment.AssignmentType.QUIZ,
                _assignment.AssignmentType.PRESENTATION
            ];
            validTypes.forEach((type)=>{
                (0, _globals.expect)(Object.values(_assignment.AssignmentType)).toContain(type);
            });
        });
    });
    (0, _globals.describe)('End-to-End Assignment Workflow', ()=>{
        (0, _globals.it)('should complete full assignment lifecycle', async ()=>{
            // 1. Create assignment
            const newAssignment = {
                title: 'E2E Test Assignment',
                description: 'End-to-end test assignment',
                type: 'homework',
                subject: 'Mathematics',
                class_id: 'class-123',
                teacher_id: 'teacher-456',
                due_date: '2025-07-20T10:00:00Z',
                max_score: 100,
                is_graded: false,
                status: 'draft',
                tenant_id: 'test-tenant-id'
            };
            // Mock creation
            const createMockChain = {
                select: _globals.jest.fn().mockReturnThis(),
                insert: _globals.jest.fn().mockReturnThis(),
                eq: _globals.jest.fn().mockReturnThis(),
                single: _globals.jest.fn().mockResolvedValue({
                    data: {
                        id: 'assignment-e2e',
                        ...newAssignment
                    },
                    error: null
                })
            };
            mockSupabaseFrom.mockReturnValue(createMockChain);
            const createdAssignment = await assignmentRepository.create(newAssignment);
            (0, _globals.expect)(createdAssignment).toBeDefined();
            (0, _globals.expect)(createdAssignment.id).toBe('assignment-e2e');
            (0, _globals.expect)(createdAssignment.status).toBe('draft');
            // 2. Update assignment status to published
            const updateMockChain = {
                update: _globals.jest.fn().mockReturnThis(),
                eq: _globals.jest.fn().mockReturnThis(),
                select: _globals.jest.fn().mockReturnThis(),
                single: _globals.jest.fn().mockResolvedValue({
                    data: {
                        id: 'assignment-e2e',
                        ...newAssignment,
                        status: 'published'
                    },
                    error: null
                })
            };
            mockSupabaseFrom.mockReturnValue(updateMockChain);
            const updatedAssignment = await assignmentRepository.update('assignment-e2e', {
                status: 'published'
            });
            (0, _globals.expect)(updatedAssignment.status).toBe('published');
            // 3. Find the assignment
            const findMockChain = {
                select: _globals.jest.fn().mockReturnThis(),
                eq: _globals.jest.fn().mockReturnThis(),
                single: _globals.jest.fn().mockResolvedValue({
                    data: {
                        id: 'assignment-e2e',
                        ...newAssignment,
                        status: 'published'
                    },
                    error: null
                })
            };
            mockSupabaseFrom.mockReturnValue(findMockChain);
            const foundAssignment = await assignmentRepository.findById('assignment-e2e');
            (0, _globals.expect)(foundAssignment).toBeDefined();
            (0, _globals.expect)(foundAssignment?.status).toBe('published');
            // 4. Delete the assignment
            const deleteMockChain = {
                delete: _globals.jest.fn().mockReturnThis(),
                eq: _globals.jest.fn().mockReturnThis(),
                select: _globals.jest.fn().mockReturnThis(),
                single: _globals.jest.fn().mockResolvedValue({
                    data: {
                        id: 'assignment-e2e'
                    },
                    error: null
                })
            };
            mockSupabaseFrom.mockReturnValue(deleteMockChain);
            const deleteResult = await assignmentRepository.delete('assignment-e2e');
            (0, _globals.expect)(deleteResult).toBe(true);
        });
    });
});

//# sourceMappingURL=data:application/json;base64,