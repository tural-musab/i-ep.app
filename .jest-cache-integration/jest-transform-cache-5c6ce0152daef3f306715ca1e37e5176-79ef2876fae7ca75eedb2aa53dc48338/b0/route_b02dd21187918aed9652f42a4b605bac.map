{"version":3,"sources":["/Users/turanmusabosman/Projects/i-ep.app/src/app/api/test-auth/route.ts"],"sourcesContent":["/**\n * Test Authentication API Endpoint\n * Development testing purposes only\n */\n\nimport { NextRequest, NextResponse } from 'next/server';\nimport { createServerSupabaseClient } from '@/lib/supabase/server';\nimport { getCurrentTenant } from '@/lib/tenant/current-tenant';\n\nexport async function GET(request: NextRequest) {\n  try {\n    // Skip authentication for testing\n    const tenant = await getCurrentTenant();\n\n    if (!tenant) {\n      return NextResponse.json({ error: 'Tenant not found' }, { status: 400 });\n    }\n\n    const supabase = createServerSupabaseClient();\n\n    // Get mock students data\n    const mockStudents = [\n      {\n        id: '1',\n        email: 'student1@test.com',\n        first_name: 'Ahmet',\n        last_name: 'YÄ±lmaz',\n        metadata: { student_number: '12345' },\n        created_at: new Date().toISOString(),\n        updated_at: new Date().toISOString(),\n        is_active: true,\n      },\n      {\n        id: '2',\n        email: 'student2@test.com',\n        first_name: 'Elif',\n        last_name: 'Demir',\n        metadata: { student_number: '12346' },\n        created_at: new Date().toISOString(),\n        updated_at: new Date().toISOString(),\n        is_active: true,\n      },\n    ];\n\n    return NextResponse.json({\n      message: 'Test endpoint working',\n      tenant: tenant,\n      mockData: mockStudents,\n      count: mockStudents.length,\n      environment: process.env.NODE_ENV,\n    });\n  } catch (error) {\n    console.error('Test auth error:', error);\n    return NextResponse.json({ error: 'Test failed' }, { status: 500 });\n  }\n}\n"],"names":["GET","request","tenant","getCurrentTenant","NextResponse","json","error","status","supabase","createServerSupabaseClient","mockStudents","id","email","first_name","last_name","metadata","student_number","created_at","Date","toISOString","updated_at","is_active","message","mockData","count","length","environment","process","env","NODE_ENV","console"],"mappings":"AAAA;;;CAGC;;;;+BAMqBA;;;eAAAA;;;wBAJoB;yBACC;+BACV;AAE1B,eAAeA,IAAIC,OAAoB;IAC5C,IAAI;QACF,kCAAkC;QAClC,MAAMC,SAAS,MAAMC,IAAAA,+BAAgB;QAErC,IAAI,CAACD,QAAQ;YACX,OAAOE,oBAAY,CAACC,IAAI,CAAC;gBAAEC,OAAO;YAAmB,GAAG;gBAAEC,QAAQ;YAAI;QACxE;QAEA,MAAMC,WAAWC,IAAAA,mCAA0B;QAE3C,yBAAyB;QACzB,MAAMC,eAAe;YACnB;gBACEC,IAAI;gBACJC,OAAO;gBACPC,YAAY;gBACZC,WAAW;gBACXC,UAAU;oBAAEC,gBAAgB;gBAAQ;gBACpCC,YAAY,IAAIC,OAAOC,WAAW;gBAClCC,YAAY,IAAIF,OAAOC,WAAW;gBAClCE,WAAW;YACb;YACA;gBACEV,IAAI;gBACJC,OAAO;gBACPC,YAAY;gBACZC,WAAW;gBACXC,UAAU;oBAAEC,gBAAgB;gBAAQ;gBACpCC,YAAY,IAAIC,OAAOC,WAAW;gBAClCC,YAAY,IAAIF,OAAOC,WAAW;gBAClCE,WAAW;YACb;SACD;QAED,OAAOjB,oBAAY,CAACC,IAAI,CAAC;YACvBiB,SAAS;YACTpB,QAAQA;YACRqB,UAAUb;YACVc,OAAOd,aAAae,MAAM;YAC1BC,aAAaC,QAAQC,GAAG,CAACC,QAAQ;QACnC;IACF,EAAE,OAAOvB,OAAO;QACdwB,QAAQxB,KAAK,CAAC,oBAAoBA;QAClC,OAAOF,oBAAY,CAACC,IAAI,CAAC;YAAEC,OAAO;QAAc,GAAG;YAAEC,QAAQ;QAAI;IACnE;AACF"}