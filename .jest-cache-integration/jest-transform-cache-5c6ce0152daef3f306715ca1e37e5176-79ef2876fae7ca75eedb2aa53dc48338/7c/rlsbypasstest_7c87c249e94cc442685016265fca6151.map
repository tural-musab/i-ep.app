{"version":3,"sources":["/Users/turanmusabosman/Projects/i-ep.app/src/__tests__/integration/quarantine/security/rls-bypass.test.ts"],"sourcesContent":["/**\n * Row Level Security (RLS) Bypass Tests - Simplified for CI\n *\n * Bu test dosyası RLS bypass pattern'lerini ve logic kontrollerini test eder.\n * Network dependencies olmadan CI'da güvenilir çalışır.\n */\n\nimport { describe, it, expect } from '@jest/globals';\n\ndescribe('Row Level Security (RLS) Bypass Tests', () => {\n  describe('Tenant ID Validation Logic', () => {\n    it('should validate tenant ID format', () => {\n      const validTenantIds = [\n        '550e8400-e29b-41d4-a716-446655440000',\n        'aaaaaaaa-bbbb-cccc-dddd-eeeeeeeeeeee',\n      ];\n\n      const invalidTenantIds = [\n        \"'; DROP TABLE users; --\",\n        \"' OR 1=1 --\",\n        'null UNION SELECT * FROM users',\n        \"123' OR tenant_id IS NULL --\",\n      ];\n\n      // Valid tenant IDs should pass UUID format validation\n      validTenantIds.forEach((id) => {\n        const isValidUUID = /^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$/i.test(\n          id\n        );\n        expect(isValidUUID).toBe(true);\n      });\n\n      // Invalid tenant IDs should fail validation\n      invalidTenantIds.forEach((id) => {\n        const isValidUUID = /^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$/i.test(\n          id\n        );\n        expect(isValidUUID).toBe(false);\n      });\n    });\n\n    it('should prevent SQL injection in tenant filters', () => {\n      const maliciousTenantFilters = [\n        \"tenant_id = '123' OR 1=1 --\",\n        \"tenant_id IN ('123', '456') UNION SELECT * FROM users WHERE tenant_id != '123'\",\n        \"tenant_id = '123'; DROP TABLE users; --\",\n      ];\n\n      maliciousTenantFilters.forEach((filter) => {\n        // Should detect SQL injection patterns\n        const containsSqlInjection = /OR\\s+1\\s*=\\s*1|UNION|DROP|--|;/.test(filter);\n        expect(containsSqlInjection).toBe(true);\n      });\n    });\n  });\n\n  describe('Role-Based Access Control Logic', () => {\n    it('should validate user role permissions', () => {\n      const rolePermissions = {\n        student: ['read_own_data'],\n        teacher: ['read_own_data', 'read_class_data', 'write_class_data'],\n        admin: ['read_all_data', 'write_all_data', 'manage_users'],\n        super_admin: ['*'],\n      };\n\n      // Test role hierarchy validation\n      expect(rolePermissions.student).not.toContain('read_all_data');\n      expect(rolePermissions.teacher).toContain('read_class_data');\n      expect(rolePermissions.admin).toContain('manage_users');\n      expect(rolePermissions.super_admin).toContain('*');\n    });\n\n    it('should prevent role escalation attempts', () => {\n      const maliciousRoleUpdates = [\n        \"role = 'admin' WHERE user_id = '123' OR 1=1\",\n        \"role = (SELECT 'super_admin' FROM users WHERE tenant_id != current_tenant_id)\",\n        \"role = 'admin'; UPDATE users SET role = 'super_admin' WHERE user_id = '456';\",\n      ];\n\n      maliciousRoleUpdates.forEach((update) => {\n        const containsInjection = /OR\\s+1\\s*=\\s*1|SELECT|UPDATE|WHERE.*!=|;/.test(update);\n        expect(containsInjection).toBe(true);\n      });\n    });\n  });\n\n  describe('Query Pattern Security', () => {\n    it('should detect suspicious query patterns', () => {\n      const suspiciousQueries = [\n        \"SELECT * FROM users WHERE tenant_id != 'current'\",\n        'SELECT * FROM users WHERE tenant_id IS NULL',\n        'SELECT * FROM users WHERE 1=1',\n        'SELECT users.* FROM users, tenants WHERE users.tenant_id = tenants.id OR 1=1',\n      ];\n\n      suspiciousQueries.forEach((query) => {\n        const isSuspicious = /!=|IS\\s+NULL|WHERE\\s+1\\s*=\\s*1|OR\\s+1\\s*=\\s*1/.test(query);\n        expect(isSuspicious).toBe(true);\n      });\n    });\n\n    it('should validate proper tenant filtering in queries', () => {\n      const properQueries = [\n        'SELECT * FROM users WHERE tenant_id = $1',\n        \"SELECT * FROM students WHERE tenant_id = current_setting('app.current_tenant')\",\n        'UPDATE users SET name = $1 WHERE id = $2 AND tenant_id = $3',\n      ];\n\n      properQueries.forEach((query) => {\n        // Should have parameterized queries and proper tenant filtering\n        const hasParameterization = /\\$\\d+/.test(query);\n        const hasTenantFilter = /tenant_id\\s*=/.test(query);\n\n        expect(hasParameterization || hasTenantFilter).toBe(true);\n      });\n    });\n  });\n\n  describe('Audit Log Pattern Validation', () => {\n    it('should validate audit log entry structure', () => {\n      const validAuditEntry = {\n        user_id: '550e8400-e29b-41d4-a716-446655440000',\n        tenant_id: '550e8400-e29b-41d4-a716-446655440001',\n        action: 'data_access_attempt',\n        resource: 'users_table',\n        timestamp: new Date().toISOString(),\n        ip_address: '192.168.1.100',\n        user_agent: 'Mozilla/5.0...',\n        status: 'blocked',\n      };\n\n      // Validate required fields\n      expect(validAuditEntry.user_id).toBeDefined();\n      expect(validAuditEntry.tenant_id).toBeDefined();\n      expect(validAuditEntry.action).toBeDefined();\n      expect(validAuditEntry.status).toBeDefined();\n\n      // Validate UUID format for IDs\n      const uuidPattern = /^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$/i;\n      expect(uuidPattern.test(validAuditEntry.user_id)).toBe(true);\n      expect(uuidPattern.test(validAuditEntry.tenant_id)).toBe(true);\n    });\n\n    it('should detect cross-tenant access attempts in audit patterns', () => {\n      const auditPatterns = [\n        { action: 'SELECT', resource: 'users', tenant_mismatch: true },\n        { action: 'UPDATE', resource: 'students', tenant_mismatch: true },\n        { action: 'DELETE', resource: 'classes', tenant_mismatch: false },\n      ];\n\n      auditPatterns.forEach((pattern) => {\n        if (pattern.tenant_mismatch) {\n          // Should be flagged as suspicious\n          expect(['SELECT', 'UPDATE', 'DELETE']).toContain(pattern.action);\n        }\n      });\n    });\n  });\n\n  describe('Session Security Validation', () => {\n    it('should validate session tenant context', () => {\n      const mockSession = {\n        user_id: '550e8400-e29b-41d4-a716-446655440000',\n        tenant_id: '550e8400-e29b-41d4-a716-446655440001',\n        role: 'teacher',\n        expires_at: new Date(Date.now() + 3600000).toISOString(), // 1 hour from now\n      };\n\n      // Validate session structure\n      expect(mockSession.user_id).toBeDefined();\n      expect(mockSession.tenant_id).toBeDefined();\n      expect(mockSession.role).toBeDefined();\n\n      // Validate session not expired\n      const expiresAt = new Date(mockSession.expires_at);\n      const now = new Date();\n      expect(expiresAt.getTime()).toBeGreaterThan(now.getTime());\n    });\n\n    it('should prevent session tenant manipulation', () => {\n      const maliciousSessionUpdates = [\n        \"tenant_id = '456' WHERE user_id = '123'\",\n        \"tenant_id = (SELECT id FROM tenants WHERE name = 'admin')\",\n        'tenant_id = NULL',\n      ];\n\n      maliciousSessionUpdates.forEach((update) => {\n        const isMalicious = /WHERE|SELECT|NULL/.test(update);\n        expect(isMalicious).toBe(true);\n      });\n    });\n  });\n\n  describe('Performance and Resource Protection', () => {\n    it('should handle complex queries efficiently', () => {\n      const complexQuery = `\n        SELECT u.*, s.*, c.* \n        FROM users u \n        JOIN students s ON u.id = s.user_id \n        JOIN classes c ON s.class_id = c.id \n        WHERE u.tenant_id = $1 \n        AND s.tenant_id = $1 \n        AND c.tenant_id = $1\n      `;\n\n      const startTime = performance.now();\n\n      // Simulate query analysis\n      const hasProperFiltering = (complexQuery.match(/tenant_id\\s*=\\s*\\$1/g) || []).length >= 3;\n      const hasParameterization = /\\$\\d+/.test(complexQuery);\n\n      const endTime = performance.now();\n\n      expect(hasProperFiltering).toBe(true);\n      expect(hasParameterization).toBe(true);\n      expect(endTime - startTime).toBeLessThan(50); // Should be fast\n    });\n\n    it('should limit query complexity', () => {\n      const allowedJoins = 4;\n      const queryWithManyJoins = `\n        SELECT * FROM table1 t1\n        JOIN table2 t2 ON t1.id = t2.id\n        JOIN table3 t3 ON t2.id = t3.id\n        JOIN table4 t4 ON t3.id = t4.id\n        JOIN table5 t5 ON t4.id = t5.id\n        JOIN table6 t6 ON t5.id = t6.id\n      `;\n\n      const joinCount = (queryWithManyJoins.match(/JOIN/gi) || []).length;\n      const exceedsLimit = joinCount > allowedJoins;\n\n      expect(exceedsLimit).toBe(true); // Should be flagged as too complex\n    });\n  });\n});\n"],"names":["describe","it","validTenantIds","invalidTenantIds","forEach","id","isValidUUID","test","expect","toBe","maliciousTenantFilters","filter","containsSqlInjection","rolePermissions","student","teacher","admin","super_admin","not","toContain","maliciousRoleUpdates","update","containsInjection","suspiciousQueries","query","isSuspicious","properQueries","hasParameterization","hasTenantFilter","validAuditEntry","user_id","tenant_id","action","resource","timestamp","Date","toISOString","ip_address","user_agent","status","toBeDefined","uuidPattern","auditPatterns","tenant_mismatch","pattern","mockSession","role","expires_at","now","expiresAt","getTime","toBeGreaterThan","maliciousSessionUpdates","isMalicious","complexQuery","startTime","performance","hasProperFiltering","match","length","endTime","toBeLessThan","allowedJoins","queryWithManyJoins","joinCount","exceedsLimit"],"mappings":"AAAA;;;;;CAKC;;;;yBAEoC;AAErCA,IAAAA,iBAAQ,EAAC,yCAAyC;IAChDA,IAAAA,iBAAQ,EAAC,8BAA8B;QACrCC,IAAAA,WAAE,EAAC,oCAAoC;YACrC,MAAMC,iBAAiB;gBACrB;gBACA;aACD;YAED,MAAMC,mBAAmB;gBACvB;gBACA;gBACA;gBACA;aACD;YAED,sDAAsD;YACtDD,eAAeE,OAAO,CAAC,CAACC;gBACtB,MAAMC,cAAc,kEAAkEC,IAAI,CACxFF;gBAEFG,IAAAA,eAAM,EAACF,aAAaG,IAAI,CAAC;YAC3B;YAEA,4CAA4C;YAC5CN,iBAAiBC,OAAO,CAAC,CAACC;gBACxB,MAAMC,cAAc,kEAAkEC,IAAI,CACxFF;gBAEFG,IAAAA,eAAM,EAACF,aAAaG,IAAI,CAAC;YAC3B;QACF;QAEAR,IAAAA,WAAE,EAAC,kDAAkD;YACnD,MAAMS,yBAAyB;gBAC7B;gBACA;gBACA;aACD;YAEDA,uBAAuBN,OAAO,CAAC,CAACO;gBAC9B,uCAAuC;gBACvC,MAAMC,uBAAuB,iCAAiCL,IAAI,CAACI;gBACnEH,IAAAA,eAAM,EAACI,sBAAsBH,IAAI,CAAC;YACpC;QACF;IACF;IAEAT,IAAAA,iBAAQ,EAAC,mCAAmC;QAC1CC,IAAAA,WAAE,EAAC,yCAAyC;YAC1C,MAAMY,kBAAkB;gBACtBC,SAAS;oBAAC;iBAAgB;gBAC1BC,SAAS;oBAAC;oBAAiB;oBAAmB;iBAAmB;gBACjEC,OAAO;oBAAC;oBAAiB;oBAAkB;iBAAe;gBAC1DC,aAAa;oBAAC;iBAAI;YACpB;YAEA,iCAAiC;YACjCT,IAAAA,eAAM,EAACK,gBAAgBC,OAAO,EAAEI,GAAG,CAACC,SAAS,CAAC;YAC9CX,IAAAA,eAAM,EAACK,gBAAgBE,OAAO,EAAEI,SAAS,CAAC;YAC1CX,IAAAA,eAAM,EAACK,gBAAgBG,KAAK,EAAEG,SAAS,CAAC;YACxCX,IAAAA,eAAM,EAACK,gBAAgBI,WAAW,EAAEE,SAAS,CAAC;QAChD;QAEAlB,IAAAA,WAAE,EAAC,2CAA2C;YAC5C,MAAMmB,uBAAuB;gBAC3B;gBACA;gBACA;aACD;YAEDA,qBAAqBhB,OAAO,CAAC,CAACiB;gBAC5B,MAAMC,oBAAoB,2CAA2Cf,IAAI,CAACc;gBAC1Eb,IAAAA,eAAM,EAACc,mBAAmBb,IAAI,CAAC;YACjC;QACF;IACF;IAEAT,IAAAA,iBAAQ,EAAC,0BAA0B;QACjCC,IAAAA,WAAE,EAAC,2CAA2C;YAC5C,MAAMsB,oBAAoB;gBACxB;gBACA;gBACA;gBACA;aACD;YAEDA,kBAAkBnB,OAAO,CAAC,CAACoB;gBACzB,MAAMC,eAAe,gDAAgDlB,IAAI,CAACiB;gBAC1EhB,IAAAA,eAAM,EAACiB,cAAchB,IAAI,CAAC;YAC5B;QACF;QAEAR,IAAAA,WAAE,EAAC,sDAAsD;YACvD,MAAMyB,gBAAgB;gBACpB;gBACA;gBACA;aACD;YAEDA,cAActB,OAAO,CAAC,CAACoB;gBACrB,gEAAgE;gBAChE,MAAMG,sBAAsB,QAAQpB,IAAI,CAACiB;gBACzC,MAAMI,kBAAkB,gBAAgBrB,IAAI,CAACiB;gBAE7ChB,IAAAA,eAAM,EAACmB,uBAAuBC,iBAAiBnB,IAAI,CAAC;YACtD;QACF;IACF;IAEAT,IAAAA,iBAAQ,EAAC,gCAAgC;QACvCC,IAAAA,WAAE,EAAC,6CAA6C;YAC9C,MAAM4B,kBAAkB;gBACtBC,SAAS;gBACTC,WAAW;gBACXC,QAAQ;gBACRC,UAAU;gBACVC,WAAW,IAAIC,OAAOC,WAAW;gBACjCC,YAAY;gBACZC,YAAY;gBACZC,QAAQ;YACV;YAEA,2BAA2B;YAC3B/B,IAAAA,eAAM,EAACqB,gBAAgBC,OAAO,EAAEU,WAAW;YAC3ChC,IAAAA,eAAM,EAACqB,gBAAgBE,SAAS,EAAES,WAAW;YAC7ChC,IAAAA,eAAM,EAACqB,gBAAgBG,MAAM,EAAEQ,WAAW;YAC1ChC,IAAAA,eAAM,EAACqB,gBAAgBU,MAAM,EAAEC,WAAW;YAE1C,+BAA+B;YAC/B,MAAMC,cAAc;YACpBjC,IAAAA,eAAM,EAACiC,YAAYlC,IAAI,CAACsB,gBAAgBC,OAAO,GAAGrB,IAAI,CAAC;YACvDD,IAAAA,eAAM,EAACiC,YAAYlC,IAAI,CAACsB,gBAAgBE,SAAS,GAAGtB,IAAI,CAAC;QAC3D;QAEAR,IAAAA,WAAE,EAAC,gEAAgE;YACjE,MAAMyC,gBAAgB;gBACpB;oBAAEV,QAAQ;oBAAUC,UAAU;oBAASU,iBAAiB;gBAAK;gBAC7D;oBAAEX,QAAQ;oBAAUC,UAAU;oBAAYU,iBAAiB;gBAAK;gBAChE;oBAAEX,QAAQ;oBAAUC,UAAU;oBAAWU,iBAAiB;gBAAM;aACjE;YAEDD,cAActC,OAAO,CAAC,CAACwC;gBACrB,IAAIA,QAAQD,eAAe,EAAE;oBAC3B,kCAAkC;oBAClCnC,IAAAA,eAAM,EAAC;wBAAC;wBAAU;wBAAU;qBAAS,EAAEW,SAAS,CAACyB,QAAQZ,MAAM;gBACjE;YACF;QACF;IACF;IAEAhC,IAAAA,iBAAQ,EAAC,+BAA+B;QACtCC,IAAAA,WAAE,EAAC,0CAA0C;YAC3C,MAAM4C,cAAc;gBAClBf,SAAS;gBACTC,WAAW;gBACXe,MAAM;gBACNC,YAAY,IAAIZ,KAAKA,KAAKa,GAAG,KAAK,SAASZ,WAAW;YACxD;YAEA,6BAA6B;YAC7B5B,IAAAA,eAAM,EAACqC,YAAYf,OAAO,EAAEU,WAAW;YACvChC,IAAAA,eAAM,EAACqC,YAAYd,SAAS,EAAES,WAAW;YACzChC,IAAAA,eAAM,EAACqC,YAAYC,IAAI,EAAEN,WAAW;YAEpC,+BAA+B;YAC/B,MAAMS,YAAY,IAAId,KAAKU,YAAYE,UAAU;YACjD,MAAMC,MAAM,IAAIb;YAChB3B,IAAAA,eAAM,EAACyC,UAAUC,OAAO,IAAIC,eAAe,CAACH,IAAIE,OAAO;QACzD;QAEAjD,IAAAA,WAAE,EAAC,8CAA8C;YAC/C,MAAMmD,0BAA0B;gBAC9B;gBACA;gBACA;aACD;YAEDA,wBAAwBhD,OAAO,CAAC,CAACiB;gBAC/B,MAAMgC,cAAc,oBAAoB9C,IAAI,CAACc;gBAC7Cb,IAAAA,eAAM,EAAC6C,aAAa5C,IAAI,CAAC;YAC3B;QACF;IACF;IAEAT,IAAAA,iBAAQ,EAAC,uCAAuC;QAC9CC,IAAAA,WAAE,EAAC,6CAA6C;YAC9C,MAAMqD,eAAe,CAAC;;;;;;;;MAQtB,CAAC;YAED,MAAMC,YAAYC,YAAYR,GAAG;YAEjC,0BAA0B;YAC1B,MAAMS,qBAAqB,AAACH,CAAAA,aAAaI,KAAK,CAAC,2BAA2B,EAAE,AAAD,EAAGC,MAAM,IAAI;YACxF,MAAMhC,sBAAsB,QAAQpB,IAAI,CAAC+C;YAEzC,MAAMM,UAAUJ,YAAYR,GAAG;YAE/BxC,IAAAA,eAAM,EAACiD,oBAAoBhD,IAAI,CAAC;YAChCD,IAAAA,eAAM,EAACmB,qBAAqBlB,IAAI,CAAC;YACjCD,IAAAA,eAAM,EAACoD,UAAUL,WAAWM,YAAY,CAAC,KAAK,iBAAiB;QACjE;QAEA5D,IAAAA,WAAE,EAAC,iCAAiC;YAClC,MAAM6D,eAAe;YACrB,MAAMC,qBAAqB,CAAC;;;;;;;MAO5B,CAAC;YAED,MAAMC,YAAY,AAACD,CAAAA,mBAAmBL,KAAK,CAAC,aAAa,EAAE,AAAD,EAAGC,MAAM;YACnE,MAAMM,eAAeD,YAAYF;YAEjCtD,IAAAA,eAAM,EAACyD,cAAcxD,IAAI,CAAC,OAAO,mCAAmC;QACtE;IACF;AACF"}