{"version":3,"sources":["/Users/turanmusabosman/Projects/i-ep.app/src/__tests__/integration/quarantine/redis-connection.integration.test.ts"],"sourcesContent":["/**\n * İ-EP.APP - Redis Connection Integration Test\n * Gerçek Redis bağlantısını test eder\n */\n\nimport { Redis } from '@upstash/redis';\n\ndescribe('Redis Connection Integration Tests', () => {\n  let redis: Redis;\n\n  beforeAll(() => {\n    redis = new Redis({\n      url: process.env.REDIS_URL || process.env.UPSTASH_REDIS_URL!,\n      token: process.env.UPSTASH_REDIS_TOKEN || 'test-token',\n    });\n  });\n\n  afterEach(async () => {\n    // Clean up test keys after each test\n    const testKeys = await redis.keys('integration-test:*');\n    if (testKeys.length > 0) {\n      await redis.del(...testKeys);\n    }\n  });\n\n  describe('Redis Basic Operations', () => {\n    it('should connect to Redis successfully', async () => {\n      const testKey = 'integration-test:connection';\n      const testValue = 'connection-test-value';\n\n      // Set a test value\n      const setResult = await redis.set(testKey, testValue, { ex: 10 });\n      expect(setResult).toBe('OK');\n\n      // Get the test value\n      const getValue = await redis.get(testKey);\n      expect(getValue).toBe(testValue);\n\n      // Clean up\n      await redis.del(testKey);\n    });\n\n    it('should handle string operations', async () => {\n      const testKey = 'integration-test:string';\n      const testValue = 'Hello İ-EP.APP Integration Test!';\n\n      await redis.set(testKey, testValue);\n      const result = await redis.get(testKey);\n      \n      expect(result).toBe(testValue);\n    });\n\n    it('should handle JSON data', async () => {\n      const testKey = 'integration-test:json';\n      const testData = {\n        userId: 'test-user-123',\n        tenantId: process.env.TEST_TENANT_ID,\n        role: 'student',\n        lastActivity: new Date().toISOString(),\n        metadata: {\n          loginCount: 5,\n          features: ['assignments', 'grades']\n        }\n      };\n\n      await redis.set(testKey, JSON.stringify(testData));\n      const result = await redis.get(testKey);\n      const parsedResult = JSON.parse(result as string);\n      \n      expect(parsedResult).toEqual(testData);\n      expect(parsedResult.userId).toBe('test-user-123');\n      expect(parsedResult.tenantId).toBe(process.env.TEST_TENANT_ID);\n    });\n\n    it('should handle expiration', async () => {\n      const testKey = 'integration-test:expiry';\n      const testValue = 'expires-soon';\n\n      // Set with 1 second expiration\n      await redis.set(testKey, testValue, { ex: 1 });\n      \n      // Should exist immediately\n      const immediateResult = await redis.get(testKey);\n      expect(immediateResult).toBe(testValue);\n\n      // Wait for expiration (2 seconds to be safe)\n      await new Promise(resolve => setTimeout(resolve, 2000));\n\n      // Should be null after expiration\n      const expiredResult = await redis.get(testKey);\n      expect(expiredResult).toBeNull();\n    });\n  });\n\n  describe('Redis Advanced Operations', () => {\n    it('should handle hash operations', async () => {\n      const hashKey = 'integration-test:hash:user';\n      const userDetails = {\n        name: 'Test User',\n        email: 'test@i-ep.app',\n        role: 'student',\n        tenantId: process.env.TEST_TENANT_ID!\n      };\n\n      // Set hash fields\n      await redis.hset(hashKey, userDetails);\n\n      // Get individual field\n      const name = await redis.hget(hashKey, 'name');\n      expect(name).toBe('Test User');\n\n      // Get all fields\n      const allFields = await redis.hgetall(hashKey);\n      expect(allFields).toEqual(userDetails);\n\n      // Clean up\n      await redis.del(hashKey);\n    });\n\n    it('should handle list operations', async () => {\n      const listKey = 'integration-test:list:notifications';\n      const notifications = [\n        'New assignment posted',\n        'Grade updated',\n        'Attendance recorded'\n      ];\n\n      // Push notifications to list\n      for (const notification of notifications) {\n        await redis.lpush(listKey, notification);\n      }\n\n      // Get list length\n      const listLength = await redis.llen(listKey);\n      expect(listLength).toBe(3);\n\n      // Get all items (in reverse order due to lpush)\n      const allItems = await redis.lrange(listKey, 0, -1);\n      expect(allItems).toEqual(notifications.reverse());\n\n      // Clean up\n      await redis.del(listKey);\n    });\n\n    it('should handle set operations', async () => {\n      const setKey = 'integration-test:set:permissions';\n      const permissions = ['read', 'write', 'delete'];\n\n      // Add members to set\n      await redis.sadd(setKey, ...permissions);\n\n      // Check if member exists\n      const hasRead = await redis.sismember(setKey, 'read');\n      expect(hasRead).toBe(1);\n\n      const hasAdmin = await redis.sismember(setKey, 'admin');\n      expect(hasAdmin).toBe(0);\n\n      // Get all members\n      const allMembers = await redis.smembers(setKey);\n      expect(allMembers.sort()).toEqual(permissions.sort());\n\n      // Clean up\n      await redis.del(setKey);\n    });\n  });\n\n  describe('Redis Performance', () => {\n    it('should handle multiple operations quickly', async () => {\n      const startTime = Date.now();\n      const operations = [];\n\n      // Create 10 concurrent operations\n      for (let i = 0; i < 10; i++) {\n        const key = `integration-test:perf:${i}`;\n        const value = `value-${i}`;\n        operations.push(redis.set(key, value, { ex: 30 }));\n      }\n\n      // Wait for all operations to complete\n      await Promise.all(operations);\n\n      const endTime = Date.now();\n      const totalTime = endTime - startTime;\n\n      expect(totalTime).toBeLessThan(5000); // Should complete within 5 seconds\n\n      // Clean up performance test keys\n      const perfKeys = await redis.keys('integration-test:perf:*');\n      if (perfKeys.length > 0) {\n        await redis.del(...perfKeys);\n      }\n    });\n\n    it('should handle large data efficiently', async () => {\n      const testKey = 'integration-test:large-data';\n      \n      // Create a large JSON object (simulating a large assignment or grade data)\n      const largeData = {\n        assignmentId: 'large-assignment-123',\n        tenantId: process.env.TEST_TENANT_ID,\n        students: Array.from({ length: 100 }, (_, i) => ({\n          id: `student-${i}`,\n          name: `Student ${i}`,\n          submissions: Array.from({ length: 10 }, (_, j) => ({\n            id: `submission-${i}-${j}`,\n            content: `This is submission content for student ${i}, submission ${j}. `.repeat(50),\n            timestamp: new Date().toISOString()\n          }))\n        }))\n      };\n\n      const startTime = Date.now();\n      \n      // Store large data\n      await redis.set(testKey, JSON.stringify(largeData), { ex: 30 });\n      \n      // Retrieve large data\n      const result = await redis.get(testKey);\n      const parsedResult = JSON.parse(result as string);\n      \n      const endTime = Date.now();\n      const totalTime = endTime - startTime;\n\n      expect(parsedResult.students).toHaveLength(100);\n      expect(parsedResult.students[0].submissions).toHaveLength(10);\n      expect(totalTime).toBeLessThan(10000); // Should complete within 10 seconds for large data\n\n      // Clean up\n      await redis.del(testKey);\n    });\n  });\n\n  describe('Redis Error Handling', () => {\n    it('should handle non-existent keys gracefully', async () => {\n      const nonExistentKey = 'integration-test:non-existent';\n      \n      const result = await redis.get(nonExistentKey);\n      expect(result).toBeNull();\n    });\n\n    it('should handle invalid JSON gracefully', async () => {\n      const testKey = 'integration-test:invalid-json';\n      const invalidJson = '{ invalid json content }';\n\n      await redis.set(testKey, invalidJson);\n      const result = await redis.get(testKey);\n      \n      expect(result).toBe(invalidJson);\n      \n      // Attempting to parse should throw, but Redis operation should work\n      expect(() => JSON.parse(result as string)).toThrow();\n    });\n  });\n});"],"names":["describe","redis","beforeAll","Redis","url","process","env","REDIS_URL","UPSTASH_REDIS_URL","token","UPSTASH_REDIS_TOKEN","afterEach","testKeys","keys","length","del","it","testKey","testValue","setResult","set","ex","expect","toBe","getValue","get","result","testData","userId","tenantId","TEST_TENANT_ID","role","lastActivity","Date","toISOString","metadata","loginCount","features","JSON","stringify","parsedResult","parse","toEqual","immediateResult","Promise","resolve","setTimeout","expiredResult","toBeNull","hashKey","userDetails","name","email","hset","hget","allFields","hgetall","listKey","notifications","notification","lpush","listLength","llen","allItems","lrange","reverse","setKey","permissions","sadd","hasRead","sismember","hasAdmin","allMembers","smembers","sort","startTime","now","operations","i","key","value","push","all","endTime","totalTime","toBeLessThan","perfKeys","largeData","assignmentId","students","Array","from","_","id","submissions","j","content","repeat","timestamp","toHaveLength","nonExistentKey","invalidJson","toThrow"],"mappings":"AAAA;;;CAGC;;;;uBAEqB;AAEtBA,SAAS,sCAAsC;IAC7C,IAAIC;IAEJC,UAAU;QACRD,QAAQ,IAAIE,YAAK,CAAC;YAChBC,KAAKC,QAAQC,GAAG,CAACC,SAAS,IAAIF,QAAQC,GAAG,CAACE,iBAAiB;YAC3DC,OAAOJ,QAAQC,GAAG,CAACI,mBAAmB,IAAI;QAC5C;IACF;IAEAC,UAAU;QACR,qCAAqC;QACrC,MAAMC,WAAW,MAAMX,MAAMY,IAAI,CAAC;QAClC,IAAID,SAASE,MAAM,GAAG,GAAG;YACvB,MAAMb,MAAMc,GAAG,IAAIH;QACrB;IACF;IAEAZ,SAAS,0BAA0B;QACjCgB,GAAG,wCAAwC;YACzC,MAAMC,UAAU;YAChB,MAAMC,YAAY;YAElB,mBAAmB;YACnB,MAAMC,YAAY,MAAMlB,MAAMmB,GAAG,CAACH,SAASC,WAAW;gBAAEG,IAAI;YAAG;YAC/DC,OAAOH,WAAWI,IAAI,CAAC;YAEvB,qBAAqB;YACrB,MAAMC,WAAW,MAAMvB,MAAMwB,GAAG,CAACR;YACjCK,OAAOE,UAAUD,IAAI,CAACL;YAEtB,WAAW;YACX,MAAMjB,MAAMc,GAAG,CAACE;QAClB;QAEAD,GAAG,mCAAmC;YACpC,MAAMC,UAAU;YAChB,MAAMC,YAAY;YAElB,MAAMjB,MAAMmB,GAAG,CAACH,SAASC;YACzB,MAAMQ,SAAS,MAAMzB,MAAMwB,GAAG,CAACR;YAE/BK,OAAOI,QAAQH,IAAI,CAACL;QACtB;QAEAF,GAAG,2BAA2B;YAC5B,MAAMC,UAAU;YAChB,MAAMU,WAAW;gBACfC,QAAQ;gBACRC,UAAUxB,QAAQC,GAAG,CAACwB,cAAc;gBACpCC,MAAM;gBACNC,cAAc,IAAIC,OAAOC,WAAW;gBACpCC,UAAU;oBACRC,YAAY;oBACZC,UAAU;wBAAC;wBAAe;qBAAS;gBACrC;YACF;YAEA,MAAMpC,MAAMmB,GAAG,CAACH,SAASqB,KAAKC,SAAS,CAACZ;YACxC,MAAMD,SAAS,MAAMzB,MAAMwB,GAAG,CAACR;YAC/B,MAAMuB,eAAeF,KAAKG,KAAK,CAACf;YAEhCJ,OAAOkB,cAAcE,OAAO,CAACf;YAC7BL,OAAOkB,aAAaZ,MAAM,EAAEL,IAAI,CAAC;YACjCD,OAAOkB,aAAaX,QAAQ,EAAEN,IAAI,CAAClB,QAAQC,GAAG,CAACwB,cAAc;QAC/D;QAEAd,GAAG,4BAA4B;YAC7B,MAAMC,UAAU;YAChB,MAAMC,YAAY;YAElB,+BAA+B;YAC/B,MAAMjB,MAAMmB,GAAG,CAACH,SAASC,WAAW;gBAAEG,IAAI;YAAE;YAE5C,2BAA2B;YAC3B,MAAMsB,kBAAkB,MAAM1C,MAAMwB,GAAG,CAACR;YACxCK,OAAOqB,iBAAiBpB,IAAI,CAACL;YAE7B,6CAA6C;YAC7C,MAAM,IAAI0B,QAAQC,CAAAA,UAAWC,WAAWD,SAAS;YAEjD,kCAAkC;YAClC,MAAME,gBAAgB,MAAM9C,MAAMwB,GAAG,CAACR;YACtCK,OAAOyB,eAAeC,QAAQ;QAChC;IACF;IAEAhD,SAAS,6BAA6B;QACpCgB,GAAG,iCAAiC;YAClC,MAAMiC,UAAU;YAChB,MAAMC,cAAc;gBAClBC,MAAM;gBACNC,OAAO;gBACPrB,MAAM;gBACNF,UAAUxB,QAAQC,GAAG,CAACwB,cAAc;YACtC;YAEA,kBAAkB;YAClB,MAAM7B,MAAMoD,IAAI,CAACJ,SAASC;YAE1B,uBAAuB;YACvB,MAAMC,OAAO,MAAMlD,MAAMqD,IAAI,CAACL,SAAS;YACvC3B,OAAO6B,MAAM5B,IAAI,CAAC;YAElB,iBAAiB;YACjB,MAAMgC,YAAY,MAAMtD,MAAMuD,OAAO,CAACP;YACtC3B,OAAOiC,WAAWb,OAAO,CAACQ;YAE1B,WAAW;YACX,MAAMjD,MAAMc,GAAG,CAACkC;QAClB;QAEAjC,GAAG,iCAAiC;YAClC,MAAMyC,UAAU;YAChB,MAAMC,gBAAgB;gBACpB;gBACA;gBACA;aACD;YAED,6BAA6B;YAC7B,KAAK,MAAMC,gBAAgBD,cAAe;gBACxC,MAAMzD,MAAM2D,KAAK,CAACH,SAASE;YAC7B;YAEA,kBAAkB;YAClB,MAAME,aAAa,MAAM5D,MAAM6D,IAAI,CAACL;YACpCnC,OAAOuC,YAAYtC,IAAI,CAAC;YAExB,gDAAgD;YAChD,MAAMwC,WAAW,MAAM9D,MAAM+D,MAAM,CAACP,SAAS,GAAG,CAAC;YACjDnC,OAAOyC,UAAUrB,OAAO,CAACgB,cAAcO,OAAO;YAE9C,WAAW;YACX,MAAMhE,MAAMc,GAAG,CAAC0C;QAClB;QAEAzC,GAAG,gCAAgC;YACjC,MAAMkD,SAAS;YACf,MAAMC,cAAc;gBAAC;gBAAQ;gBAAS;aAAS;YAE/C,qBAAqB;YACrB,MAAMlE,MAAMmE,IAAI,CAACF,WAAWC;YAE5B,yBAAyB;YACzB,MAAME,UAAU,MAAMpE,MAAMqE,SAAS,CAACJ,QAAQ;YAC9C5C,OAAO+C,SAAS9C,IAAI,CAAC;YAErB,MAAMgD,WAAW,MAAMtE,MAAMqE,SAAS,CAACJ,QAAQ;YAC/C5C,OAAOiD,UAAUhD,IAAI,CAAC;YAEtB,kBAAkB;YAClB,MAAMiD,aAAa,MAAMvE,MAAMwE,QAAQ,CAACP;YACxC5C,OAAOkD,WAAWE,IAAI,IAAIhC,OAAO,CAACyB,YAAYO,IAAI;YAElD,WAAW;YACX,MAAMzE,MAAMc,GAAG,CAACmD;QAClB;IACF;IAEAlE,SAAS,qBAAqB;QAC5BgB,GAAG,6CAA6C;YAC9C,MAAM2D,YAAY1C,KAAK2C,GAAG;YAC1B,MAAMC,aAAa,EAAE;YAErB,kCAAkC;YAClC,IAAK,IAAIC,IAAI,GAAGA,IAAI,IAAIA,IAAK;gBAC3B,MAAMC,MAAM,CAAC,sBAAsB,EAAED,GAAG;gBACxC,MAAME,QAAQ,CAAC,MAAM,EAAEF,GAAG;gBAC1BD,WAAWI,IAAI,CAAChF,MAAMmB,GAAG,CAAC2D,KAAKC,OAAO;oBAAE3D,IAAI;gBAAG;YACjD;YAEA,sCAAsC;YACtC,MAAMuB,QAAQsC,GAAG,CAACL;YAElB,MAAMM,UAAUlD,KAAK2C,GAAG;YACxB,MAAMQ,YAAYD,UAAUR;YAE5BrD,OAAO8D,WAAWC,YAAY,CAAC,OAAO,mCAAmC;YAEzE,iCAAiC;YACjC,MAAMC,WAAW,MAAMrF,MAAMY,IAAI,CAAC;YAClC,IAAIyE,SAASxE,MAAM,GAAG,GAAG;gBACvB,MAAMb,MAAMc,GAAG,IAAIuE;YACrB;QACF;QAEAtE,GAAG,wCAAwC;YACzC,MAAMC,UAAU;YAEhB,2EAA2E;YAC3E,MAAMsE,YAAY;gBAChBC,cAAc;gBACd3D,UAAUxB,QAAQC,GAAG,CAACwB,cAAc;gBACpC2D,UAAUC,MAAMC,IAAI,CAAC;oBAAE7E,QAAQ;gBAAI,GAAG,CAAC8E,GAAGd,IAAO,CAAA;wBAC/Ce,IAAI,CAAC,QAAQ,EAAEf,GAAG;wBAClB3B,MAAM,CAAC,QAAQ,EAAE2B,GAAG;wBACpBgB,aAAaJ,MAAMC,IAAI,CAAC;4BAAE7E,QAAQ;wBAAG,GAAG,CAAC8E,GAAGG,IAAO,CAAA;gCACjDF,IAAI,CAAC,WAAW,EAAEf,EAAE,CAAC,EAAEiB,GAAG;gCAC1BC,SAAS,CAAC,uCAAuC,EAAElB,EAAE,aAAa,EAAEiB,EAAE,EAAE,CAAC,CAACE,MAAM,CAAC;gCACjFC,WAAW,IAAIjE,OAAOC,WAAW;4BACnC,CAAA;oBACF,CAAA;YACF;YAEA,MAAMyC,YAAY1C,KAAK2C,GAAG;YAE1B,mBAAmB;YACnB,MAAM3E,MAAMmB,GAAG,CAACH,SAASqB,KAAKC,SAAS,CAACgD,YAAY;gBAAElE,IAAI;YAAG;YAE7D,sBAAsB;YACtB,MAAMK,SAAS,MAAMzB,MAAMwB,GAAG,CAACR;YAC/B,MAAMuB,eAAeF,KAAKG,KAAK,CAACf;YAEhC,MAAMyD,UAAUlD,KAAK2C,GAAG;YACxB,MAAMQ,YAAYD,UAAUR;YAE5BrD,OAAOkB,aAAaiD,QAAQ,EAAEU,YAAY,CAAC;YAC3C7E,OAAOkB,aAAaiD,QAAQ,CAAC,EAAE,CAACK,WAAW,EAAEK,YAAY,CAAC;YAC1D7E,OAAO8D,WAAWC,YAAY,CAAC,QAAQ,mDAAmD;YAE1F,WAAW;YACX,MAAMpF,MAAMc,GAAG,CAACE;QAClB;IACF;IAEAjB,SAAS,wBAAwB;QAC/BgB,GAAG,8CAA8C;YAC/C,MAAMoF,iBAAiB;YAEvB,MAAM1E,SAAS,MAAMzB,MAAMwB,GAAG,CAAC2E;YAC/B9E,OAAOI,QAAQsB,QAAQ;QACzB;QAEAhC,GAAG,yCAAyC;YAC1C,MAAMC,UAAU;YAChB,MAAMoF,cAAc;YAEpB,MAAMpG,MAAMmB,GAAG,CAACH,SAASoF;YACzB,MAAM3E,SAAS,MAAMzB,MAAMwB,GAAG,CAACR;YAE/BK,OAAOI,QAAQH,IAAI,CAAC8E;YAEpB,oEAAoE;YACpE/E,OAAO,IAAMgB,KAAKG,KAAK,CAACf,SAAmB4E,OAAO;QACpD;IACF;AACF"}