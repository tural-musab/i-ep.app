{"version":3,"sources":["/Users/turanmusabosman/Projects/i-ep.app/src/__tests__/attendance-system-integration.test.ts"],"sourcesContent":["/**\n * Attendance System Integration Tests\n * Ä°-EP.APP - Professional Integration Testing\n *\n * Tests the integration between:\n * - Attendance Repository\n * - Attendance Validation\n * - Attendance Types\n * - Database Layer (mocked)\n */\n\nimport { describe, it, expect, beforeEach, jest, beforeAll, afterAll } from '@jest/globals';\nimport { AttendanceRepository } from '../lib/repository/attendance-repository';\nimport { AttendanceStatus } from '../types/attendance';\n\n// Mock the Supabase client\njest.mock('../lib/supabase/client', () => ({\n  supabase: {\n    from: jest.fn(() => ({\n      select: jest.fn().mockReturnThis(),\n      insert: jest.fn().mockReturnThis(),\n      update: jest.fn().mockReturnThis(),\n      delete: jest.fn().mockReturnThis(),\n      eq: jest.fn().mockReturnThis(),\n      gte: jest.fn().mockReturnThis(),\n      lte: jest.fn().mockReturnThis(),\n      order: jest.fn().mockReturnThis(),\n      limit: jest.fn().mockReturnThis(),\n      single: jest.fn(),\n    })),\n  },\n}));\n\n// Mock Next.js headers for tenant isolation\njest.mock('next/headers', () => ({\n  cookies: jest.fn(() => ({\n    get: jest.fn(() => ({ value: 'test-tenant-id' })),\n  })),\n}));\n\ndescribe('Attendance System Integration Tests', () => {\n  let attendanceRepository: AttendanceRepository;\n  let mockSupabaseFrom: jest.Mock;\n\n  beforeAll(() => {\n    // Setup global mocks\n    const { supabase } = require('../lib/supabase/client');\n    mockSupabaseFrom = supabase.from;\n  });\n\n  beforeEach(() => {\n    // Reset all mocks before each test\n    jest.clearAllMocks();\n\n    // Create fresh repository instance\n    attendanceRepository = new AttendanceRepository();\n\n    // Setup default successful responses\n    mockSupabaseFrom.mockReturnValue({\n      select: jest.fn().mockReturnThis(),\n      insert: jest.fn().mockReturnThis(),\n      update: jest.fn().mockReturnThis(),\n      delete: jest.fn().mockReturnThis(),\n      eq: jest.fn().mockReturnThis(),\n      gte: jest.fn().mockReturnThis(),\n      lte: jest.fn().mockReturnThis(),\n      order: jest.fn().mockReturnThis(),\n      limit: jest.fn().mockReturnThis(),\n      single: jest.fn().mockResolvedValue({\n        data: null,\n        error: null,\n      }),\n    });\n  });\n\n  afterAll(() => {\n    jest.restoreAllMocks();\n  });\n\n  describe('Attendance Repository Integration', () => {\n    describe('create', () => {\n      it('should create attendance record with valid data', async () => {\n        const validAttendance = {\n          student_id: 'student-123',\n          class_id: 'class-456',\n          date: '2025-07-16',\n          status: AttendanceStatus.PRESENT,\n          notes: 'Student arrived on time',\n          recorded_by: 'teacher-789',\n          tenant_id: 'test-tenant-id',\n        };\n\n        // Mock successful database response\n        const mockChain = {\n          select: jest.fn().mockReturnThis(),\n          insert: jest.fn().mockReturnThis(),\n          eq: jest.fn().mockReturnThis(),\n          single: jest.fn().mockResolvedValue({\n            data: { id: 'attendance-123', ...validAttendance },\n            error: null,\n          }),\n        };\n\n        mockSupabaseFrom.mockReturnValue(mockChain);\n\n        const result = await attendanceRepository.create(validAttendance);\n\n        expect(result).toBeDefined();\n        expect(result.id).toBe('attendance-123');\n        expect(result.student_id).toBe('student-123');\n        expect(result.status).toBe(AttendanceStatus.PRESENT);\n        expect(mockSupabaseFrom).toHaveBeenCalledWith('attendance');\n      });\n\n      it('should handle database errors during creation', async () => {\n        const validAttendance = {\n          student_id: 'student-123',\n          class_id: 'class-456',\n          date: '2025-07-16',\n          status: AttendanceStatus.PRESENT,\n          recorded_by: 'teacher-789',\n          tenant_id: 'test-tenant-id',\n        };\n\n        // Mock database error\n        const mockChain = {\n          select: jest.fn().mockReturnThis(),\n          insert: jest.fn().mockReturnThis(),\n          eq: jest.fn().mockReturnThis(),\n          single: jest.fn().mockResolvedValue({\n            data: null,\n            error: { message: 'Database connection failed' },\n          }),\n        };\n\n        mockSupabaseFrom.mockReturnValue(mockChain);\n\n        await expect(attendanceRepository.create(validAttendance)).rejects.toThrow(\n          'Repository error: Database connection failed'\n        );\n      });\n\n      it('should enforce tenant isolation during creation', async () => {\n        const attendanceWithDifferentTenant = {\n          student_id: 'student-123',\n          class_id: 'class-456',\n          date: '2025-07-16',\n          status: AttendanceStatus.PRESENT,\n          recorded_by: 'teacher-789',\n          tenant_id: 'different-tenant-id',\n        };\n\n        const mockChain = {\n          select: jest.fn().mockReturnThis(),\n          insert: jest.fn().mockReturnThis(),\n          eq: jest.fn().mockReturnThis(),\n          single: jest.fn().mockResolvedValue({\n            data: { id: 'attendance-123', ...attendanceWithDifferentTenant },\n            error: null,\n          }),\n        };\n\n        mockSupabaseFrom.mockReturnValue(mockChain);\n\n        const result = await attendanceRepository.create(attendanceWithDifferentTenant);\n\n        // Should still work, but tenant_id should be overridden by repository\n        expect(result).toBeDefined();\n        expect(mockSupabaseFrom).toHaveBeenCalledWith('attendance');\n      });\n    });\n\n    describe('findById', () => {\n      it('should find attendance record by ID with tenant isolation', async () => {\n        const mockAttendance = {\n          id: 'attendance-123',\n          student_id: 'student-123',\n          class_id: 'class-456',\n          date: '2025-07-16',\n          status: AttendanceStatus.PRESENT,\n          notes: 'Student arrived on time',\n          recorded_by: 'teacher-789',\n          tenant_id: 'test-tenant-id',\n        };\n\n        const mockChain = {\n          select: jest.fn().mockReturnThis(),\n          eq: jest.fn().mockReturnThis(),\n          single: jest.fn().mockResolvedValue({\n            data: mockAttendance,\n            error: null,\n          }),\n        };\n\n        mockSupabaseFrom.mockReturnValue(mockChain);\n\n        const result = await attendanceRepository.findById('attendance-123');\n\n        expect(result).toBeDefined();\n        expect(result?.id).toBe('attendance-123');\n        expect(result?.student_id).toBe('student-123');\n        expect(result?.status).toBe(AttendanceStatus.PRESENT);\n        expect(mockSupabaseFrom).toHaveBeenCalledWith('attendance');\n      });\n\n      it('should return null for non-existent attendance record', async () => {\n        const mockChain = {\n          select: jest.fn().mockReturnThis(),\n          eq: jest.fn().mockReturnThis(),\n          single: jest.fn().mockResolvedValue({\n            data: null,\n            error: { code: 'PGRST116' }, // Not found error\n          }),\n        };\n\n        mockSupabaseFrom.mockReturnValue(mockChain);\n\n        const result = await attendanceRepository.findById('non-existent-id');\n\n        expect(result).toBeNull();\n      });\n    });\n\n    describe('findByStudentAndDate', () => {\n      it('should find attendance records for student on specific date', async () => {\n        const mockAttendanceRecords = [\n          {\n            id: 'attendance-1',\n            student_id: 'student-123',\n            class_id: 'class-456',\n            date: '2025-07-16',\n            status: AttendanceStatus.PRESENT,\n            tenant_id: 'test-tenant-id',\n          },\n          {\n            id: 'attendance-2',\n            student_id: 'student-123',\n            class_id: 'class-789',\n            date: '2025-07-16',\n            status: AttendanceStatus.LATE,\n            tenant_id: 'test-tenant-id',\n          },\n        ];\n\n        const mockChain = {\n          select: jest.fn().mockReturnThis(),\n          eq: jest.fn().mockReturnThis(),\n          order: jest.fn().mockReturnThis(),\n          limit: jest.fn().mockReturnThis(),\n          range: jest.fn().mockResolvedValue({\n            data: mockAttendanceRecords,\n            error: null,\n            count: 2,\n          }),\n        };\n\n        mockSupabaseFrom.mockReturnValue(mockChain);\n\n        const result = await attendanceRepository.findAll({\n          filters: { student_id: 'student-123', date: '2025-07-16' },\n        });\n\n        expect(result).toBeDefined();\n        expect(result.data).toHaveLength(2);\n        expect(result.data[0].status).toBe(AttendanceStatus.PRESENT);\n        expect(result.data[1].status).toBe(AttendanceStatus.LATE);\n      });\n    });\n\n    describe('findByClassAndDateRange', () => {\n      it('should find attendance records for class within date range', async () => {\n        const mockAttendanceRecords = [\n          {\n            id: 'attendance-1',\n            student_id: 'student-123',\n            class_id: 'class-456',\n            date: '2025-07-16',\n            status: AttendanceStatus.PRESENT,\n            tenant_id: 'test-tenant-id',\n          },\n          {\n            id: 'attendance-2',\n            student_id: 'student-456',\n            class_id: 'class-456',\n            date: '2025-07-16',\n            status: AttendanceStatus.ABSENT,\n            tenant_id: 'test-tenant-id',\n          },\n        ];\n\n        const mockChain = {\n          select: jest.fn().mockReturnThis(),\n          eq: jest.fn().mockReturnThis(),\n          gte: jest.fn().mockReturnThis(),\n          lte: jest.fn().mockReturnThis(),\n          order: jest.fn().mockReturnThis(),\n          limit: jest.fn().mockReturnThis(),\n          range: jest.fn().mockResolvedValue({\n            data: mockAttendanceRecords,\n            error: null,\n            count: 2,\n          }),\n        };\n\n        mockSupabaseFrom.mockReturnValue(mockChain);\n\n        const result = await attendanceRepository.findAll({\n          filters: {\n            class_id: 'class-456',\n            date_from: '2025-07-16',\n            date_to: '2025-07-16',\n          },\n        });\n\n        expect(result).toBeDefined();\n        expect(result.data).toHaveLength(2);\n        expect(result.data[0].class_id).toBe('class-456');\n        expect(result.data[1].class_id).toBe('class-456');\n      });\n    });\n\n    describe('update', () => {\n      it('should update attendance record with valid data', async () => {\n        const updateData = {\n          status: AttendanceStatus.LATE,\n          notes: 'Student arrived 10 minutes late',\n          arrival_time: '09:10:00',\n        };\n\n        const mockChain = {\n          update: jest.fn().mockReturnThis(),\n          eq: jest.fn().mockReturnThis(),\n          select: jest.fn().mockReturnThis(),\n          single: jest.fn().mockResolvedValue({\n            data: { id: 'attendance-123', ...updateData },\n            error: null,\n          }),\n        };\n\n        mockSupabaseFrom.mockReturnValue(mockChain);\n\n        const result = await attendanceRepository.update('attendance-123', updateData);\n\n        expect(result).toBeDefined();\n        expect(result.id).toBe('attendance-123');\n        expect(result.status).toBe(AttendanceStatus.LATE);\n        expect(result.notes).toBe('Student arrived 10 minutes late');\n      });\n    });\n\n    describe('delete', () => {\n      it('should delete attendance record successfully', async () => {\n        const mockChain = {\n          delete: jest.fn().mockReturnThis(),\n          eq: jest.fn().mockReturnThis(),\n          select: jest.fn().mockReturnThis(),\n          single: jest.fn().mockResolvedValue({\n            data: { id: 'attendance-123' },\n            error: null,\n          }),\n        };\n\n        mockSupabaseFrom.mockReturnValue(mockChain);\n\n        const result = await attendanceRepository.delete('attendance-123');\n\n        expect(result).toBe(true);\n        expect(mockSupabaseFrom).toHaveBeenCalledWith('attendance');\n      });\n    });\n  });\n\n  describe('Attendance Statistics Integration', () => {\n    describe('calculateAttendanceRate', () => {\n      it('should calculate attendance rate for student', async () => {\n        const mockStatistics = {\n          total_classes: 20,\n          present_count: 18,\n          late_count: 1,\n          absent_count: 1,\n          excused_count: 0,\n          attendance_rate: 95.0,\n        };\n\n        const mockChain = {\n          select: jest.fn().mockReturnThis(),\n          eq: jest.fn().mockReturnThis(),\n          gte: jest.fn().mockReturnThis(),\n          lte: jest.fn().mockReturnThis(),\n          single: jest.fn().mockResolvedValue({\n            data: mockStatistics,\n            error: null,\n          }),\n        };\n\n        mockSupabaseFrom.mockReturnValue(mockChain);\n\n        // This would be a method on the repository for statistics\n        // For now, we'll test the data structure\n        const result = await attendanceRepository.findAll({\n          filters: { student_id: 'student-123' },\n        });\n\n        expect(result).toBeDefined();\n        // In a real implementation, this would calculate statistics\n        expect(mockSupabaseFrom).toHaveBeenCalledWith('attendance');\n      });\n    });\n  });\n\n  describe('Attendance Types Integration', () => {\n    it('should work with all AttendanceStatus values', () => {\n      const validStatuses = [\n        AttendanceStatus.PRESENT,\n        AttendanceStatus.ABSENT,\n        AttendanceStatus.LATE,\n        AttendanceStatus.EXCUSED,\n      ];\n\n      validStatuses.forEach((status) => {\n        expect(Object.values(AttendanceStatus)).toContain(status);\n      });\n    });\n\n    it('should handle status transitions correctly', () => {\n      // Test that we can transition between statuses\n      const initialStatus = AttendanceStatus.ABSENT;\n      const updatedStatus = AttendanceStatus.EXCUSED;\n\n      expect(initialStatus).toBe('ABSENT');\n      expect(updatedStatus).toBe('EXCUSED');\n      expect(initialStatus).not.toBe(updatedStatus);\n    });\n  });\n\n  describe('End-to-End Attendance Workflow', () => {\n    it('should complete full attendance recording lifecycle', async () => {\n      // 1. Create attendance record\n      const newAttendance = {\n        student_id: 'student-e2e',\n        class_id: 'class-e2e',\n        date: '2025-07-16',\n        status: AttendanceStatus.PRESENT,\n        recorded_by: 'teacher-e2e',\n        tenant_id: 'test-tenant-id',\n      };\n\n      // Mock creation\n      const createMockChain = {\n        select: jest.fn().mockReturnThis(),\n        insert: jest.fn().mockReturnThis(),\n        eq: jest.fn().mockReturnThis(),\n        single: jest.fn().mockResolvedValue({\n          data: { id: 'attendance-e2e', ...newAttendance },\n          error: null,\n        }),\n      };\n\n      mockSupabaseFrom.mockReturnValue(createMockChain);\n\n      const createdAttendance = await attendanceRepository.create(newAttendance);\n\n      expect(createdAttendance).toBeDefined();\n      expect(createdAttendance.id).toBe('attendance-e2e');\n      expect(createdAttendance.status).toBe(AttendanceStatus.PRESENT);\n\n      // 2. Update attendance status (student arrives late)\n      const updateMockChain = {\n        update: jest.fn().mockReturnThis(),\n        eq: jest.fn().mockReturnThis(),\n        select: jest.fn().mockReturnThis(),\n        single: jest.fn().mockResolvedValue({\n          data: {\n            id: 'attendance-e2e',\n            ...newAttendance,\n            status: AttendanceStatus.LATE,\n            arrival_time: '09:10:00',\n            notes: 'Student arrived 10 minutes late',\n          },\n          error: null,\n        }),\n      };\n\n      mockSupabaseFrom.mockReturnValue(updateMockChain);\n\n      const updatedAttendance = await attendanceRepository.update('attendance-e2e', {\n        status: AttendanceStatus.LATE,\n        arrival_time: '09:10:00',\n        notes: 'Student arrived 10 minutes late',\n      });\n\n      expect(updatedAttendance.status).toBe(AttendanceStatus.LATE);\n      expect(updatedAttendance.notes).toBe('Student arrived 10 minutes late');\n\n      // 3. Find the attendance record\n      const findMockChain = {\n        select: jest.fn().mockReturnThis(),\n        eq: jest.fn().mockReturnThis(),\n        single: jest.fn().mockResolvedValue({\n          data: {\n            id: 'attendance-e2e',\n            ...newAttendance,\n            status: AttendanceStatus.LATE,\n            arrival_time: '09:10:00',\n            notes: 'Student arrived 10 minutes late',\n          },\n          error: null,\n        }),\n      };\n\n      mockSupabaseFrom.mockReturnValue(findMockChain);\n\n      const foundAttendance = await attendanceRepository.findById('attendance-e2e');\n\n      expect(foundAttendance).toBeDefined();\n      expect(foundAttendance?.status).toBe(AttendanceStatus.LATE);\n      expect(foundAttendance?.arrival_time).toBe('09:10:00');\n\n      // 4. Delete the attendance record\n      const deleteMockChain = {\n        delete: jest.fn().mockReturnThis(),\n        eq: jest.fn().mockReturnThis(),\n        select: jest.fn().mockReturnThis(),\n        single: jest.fn().mockResolvedValue({\n          data: { id: 'attendance-e2e' },\n          error: null,\n        }),\n      };\n\n      mockSupabaseFrom.mockReturnValue(deleteMockChain);\n\n      const deleteResult = await attendanceRepository.delete('attendance-e2e');\n\n      expect(deleteResult).toBe(true);\n    });\n  });\n\n  describe('Attendance Notifications Integration', () => {\n    it('should handle absence notifications', async () => {\n      // This would test integration with notification service\n      // For now, we'll test the data structure that would trigger notifications\n      const absentRecord = {\n        student_id: 'student-123',\n        class_id: 'class-456',\n        date: '2025-07-16',\n        status: AttendanceStatus.ABSENT,\n        recorded_by: 'teacher-789',\n        tenant_id: 'test-tenant-id',\n      };\n\n      const mockChain = {\n        select: jest.fn().mockReturnThis(),\n        insert: jest.fn().mockReturnThis(),\n        eq: jest.fn().mockReturnThis(),\n        single: jest.fn().mockResolvedValue({\n          data: { id: 'attendance-absent', ...absentRecord },\n          error: null,\n        }),\n      };\n\n      mockSupabaseFrom.mockReturnValue(mockChain);\n\n      const result = await attendanceRepository.create(absentRecord);\n\n      expect(result).toBeDefined();\n      expect(result.status).toBe(AttendanceStatus.ABSENT);\n\n      // In a real implementation, this would trigger a notification\n      // For now, we verify the data structure is correct\n      expect(result.student_id).toBe('student-123');\n      expect(result.class_id).toBe('class-456');\n    });\n  });\n});\n"],"names":["jest","mock","supabase","from","fn","select","mockReturnThis","insert","update","delete","eq","gte","lte","order","limit","single","cookies","get","value","describe","attendanceRepository","mockSupabaseFrom","beforeAll","require","beforeEach","clearAllMocks","AttendanceRepository","mockReturnValue","mockResolvedValue","data","error","afterAll","restoreAllMocks","it","validAttendance","student_id","class_id","date","status","AttendanceStatus","PRESENT","notes","recorded_by","tenant_id","mockChain","id","result","create","expect","toBeDefined","toBe","toHaveBeenCalledWith","message","rejects","toThrow","attendanceWithDifferentTenant","mockAttendance","findById","code","toBeNull","mockAttendanceRecords","LATE","range","count","findAll","filters","toHaveLength","ABSENT","date_from","date_to","updateData","arrival_time","mockStatistics","total_classes","present_count","late_count","absent_count","excused_count","attendance_rate","validStatuses","EXCUSED","forEach","Object","values","toContain","initialStatus","updatedStatus","not","newAttendance","createMockChain","createdAttendance","updateMockChain","updatedAttendance","findMockChain","foundAttendance","deleteMockChain","deleteResult","absentRecord"],"mappings":"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"}