6c7573aa86b3a035eb3c49272b4d9990
/**
 * Attendance System Integration Tests
 * Ä°-EP.APP - Professional Integration Testing
 *
 * Tests the integration between:
 * - Attendance Repository
 * - Attendance Validation
 * - Attendance Types
 * - Database Layer (mocked)
 */ "use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
const _globals = require("@jest/globals");
const _attendancerepository = require("../lib/repository/attendance-repository");
const _attendance = require("../types/attendance");
// Mock the Supabase client
_globals.jest.mock('../lib/supabase/client', ()=>({
        supabase: {
            from: _globals.jest.fn(()=>({
                    select: _globals.jest.fn().mockReturnThis(),
                    insert: _globals.jest.fn().mockReturnThis(),
                    update: _globals.jest.fn().mockReturnThis(),
                    delete: _globals.jest.fn().mockReturnThis(),
                    eq: _globals.jest.fn().mockReturnThis(),
                    gte: _globals.jest.fn().mockReturnThis(),
                    lte: _globals.jest.fn().mockReturnThis(),
                    order: _globals.jest.fn().mockReturnThis(),
                    limit: _globals.jest.fn().mockReturnThis(),
                    single: _globals.jest.fn()
                }))
        }
    }));
// Mock Next.js headers for tenant isolation
_globals.jest.mock('next/headers', ()=>({
        cookies: _globals.jest.fn(()=>({
                get: _globals.jest.fn(()=>({
                        value: 'test-tenant-id'
                    }))
            }))
    }));
(0, _globals.describe)('Attendance System Integration Tests', ()=>{
    let attendanceRepository;
    let mockSupabaseFrom;
    (0, _globals.beforeAll)(()=>{
        // Setup global mocks
        const { supabase } = require('../lib/supabase/client');
        mockSupabaseFrom = supabase.from;
    });
    (0, _globals.beforeEach)(()=>{
        // Reset all mocks before each test
        _globals.jest.clearAllMocks();
        // Create fresh repository instance
        attendanceRepository = new _attendancerepository.AttendanceRepository();
        // Setup default successful responses
        mockSupabaseFrom.mockReturnValue({
            select: _globals.jest.fn().mockReturnThis(),
            insert: _globals.jest.fn().mockReturnThis(),
            update: _globals.jest.fn().mockReturnThis(),
            delete: _globals.jest.fn().mockReturnThis(),
            eq: _globals.jest.fn().mockReturnThis(),
            gte: _globals.jest.fn().mockReturnThis(),
            lte: _globals.jest.fn().mockReturnThis(),
            order: _globals.jest.fn().mockReturnThis(),
            limit: _globals.jest.fn().mockReturnThis(),
            single: _globals.jest.fn().mockResolvedValue({
                data: null,
                error: null
            })
        });
    });
    (0, _globals.afterAll)(()=>{
        _globals.jest.restoreAllMocks();
    });
    (0, _globals.describe)('Attendance Repository Integration', ()=>{
        (0, _globals.describe)('create', ()=>{
            (0, _globals.it)('should create attendance record with valid data', async ()=>{
                const validAttendance = {
                    student_id: 'student-123',
                    class_id: 'class-456',
                    date: '2025-07-16',
                    status: _attendance.AttendanceStatus.PRESENT,
                    notes: 'Student arrived on time',
                    recorded_by: 'teacher-789',
                    tenant_id: 'test-tenant-id'
                };
                // Mock successful database response
                const mockChain = {
                    select: _globals.jest.fn().mockReturnThis(),
                    insert: _globals.jest.fn().mockReturnThis(),
                    eq: _globals.jest.fn().mockReturnThis(),
                    single: _globals.jest.fn().mockResolvedValue({
                        data: {
                            id: 'attendance-123',
                            ...validAttendance
                        },
                        error: null
                    })
                };
                mockSupabaseFrom.mockReturnValue(mockChain);
                const result = await attendanceRepository.create(validAttendance);
                (0, _globals.expect)(result).toBeDefined();
                (0, _globals.expect)(result.id).toBe('attendance-123');
                (0, _globals.expect)(result.student_id).toBe('student-123');
                (0, _globals.expect)(result.status).toBe(_attendance.AttendanceStatus.PRESENT);
                (0, _globals.expect)(mockSupabaseFrom).toHaveBeenCalledWith('attendance');
            });
            (0, _globals.it)('should handle database errors during creation', async ()=>{
                const validAttendance = {
                    student_id: 'student-123',
                    class_id: 'class-456',
                    date: '2025-07-16',
                    status: _attendance.AttendanceStatus.PRESENT,
                    recorded_by: 'teacher-789',
                    tenant_id: 'test-tenant-id'
                };
                // Mock database error
                const mockChain = {
                    select: _globals.jest.fn().mockReturnThis(),
                    insert: _globals.jest.fn().mockReturnThis(),
                    eq: _globals.jest.fn().mockReturnThis(),
                    single: _globals.jest.fn().mockResolvedValue({
                        data: null,
                        error: {
                            message: 'Database connection failed'
                        }
                    })
                };
                mockSupabaseFrom.mockReturnValue(mockChain);
                await (0, _globals.expect)(attendanceRepository.create(validAttendance)).rejects.toThrow('Repository error: Database connection failed');
            });
            (0, _globals.it)('should enforce tenant isolation during creation', async ()=>{
                const attendanceWithDifferentTenant = {
                    student_id: 'student-123',
                    class_id: 'class-456',
                    date: '2025-07-16',
                    status: _attendance.AttendanceStatus.PRESENT,
                    recorded_by: 'teacher-789',
                    tenant_id: 'different-tenant-id'
                };
                const mockChain = {
                    select: _globals.jest.fn().mockReturnThis(),
                    insert: _globals.jest.fn().mockReturnThis(),
                    eq: _globals.jest.fn().mockReturnThis(),
                    single: _globals.jest.fn().mockResolvedValue({
                        data: {
                            id: 'attendance-123',
                            ...attendanceWithDifferentTenant
                        },
                        error: null
                    })
                };
                mockSupabaseFrom.mockReturnValue(mockChain);
                const result = await attendanceRepository.create(attendanceWithDifferentTenant);
                // Should still work, but tenant_id should be overridden by repository
                (0, _globals.expect)(result).toBeDefined();
                (0, _globals.expect)(mockSupabaseFrom).toHaveBeenCalledWith('attendance');
            });
        });
        (0, _globals.describe)('findById', ()=>{
            (0, _globals.it)('should find attendance record by ID with tenant isolation', async ()=>{
                const mockAttendance = {
                    id: 'attendance-123',
                    student_id: 'student-123',
                    class_id: 'class-456',
                    date: '2025-07-16',
                    status: _attendance.AttendanceStatus.PRESENT,
                    notes: 'Student arrived on time',
                    recorded_by: 'teacher-789',
                    tenant_id: 'test-tenant-id'
                };
                const mockChain = {
                    select: _globals.jest.fn().mockReturnThis(),
                    eq: _globals.jest.fn().mockReturnThis(),
                    single: _globals.jest.fn().mockResolvedValue({
                        data: mockAttendance,
                        error: null
                    })
                };
                mockSupabaseFrom.mockReturnValue(mockChain);
                const result = await attendanceRepository.findById('attendance-123');
                (0, _globals.expect)(result).toBeDefined();
                (0, _globals.expect)(result?.id).toBe('attendance-123');
                (0, _globals.expect)(result?.student_id).toBe('student-123');
                (0, _globals.expect)(result?.status).toBe(_attendance.AttendanceStatus.PRESENT);
                (0, _globals.expect)(mockSupabaseFrom).toHaveBeenCalledWith('attendance');
            });
            (0, _globals.it)('should return null for non-existent attendance record', async ()=>{
                const mockChain = {
                    select: _globals.jest.fn().mockReturnThis(),
                    eq: _globals.jest.fn().mockReturnThis(),
                    single: _globals.jest.fn().mockResolvedValue({
                        data: null,
                        error: {
                            code: 'PGRST116'
                        }
                    })
                };
                mockSupabaseFrom.mockReturnValue(mockChain);
                const result = await attendanceRepository.findById('non-existent-id');
                (0, _globals.expect)(result).toBeNull();
            });
        });
        (0, _globals.describe)('findByStudentAndDate', ()=>{
            (0, _globals.it)('should find attendance records for student on specific date', async ()=>{
                const mockAttendanceRecords = [
                    {
                        id: 'attendance-1',
                        student_id: 'student-123',
                        class_id: 'class-456',
                        date: '2025-07-16',
                        status: _attendance.AttendanceStatus.PRESENT,
                        tenant_id: 'test-tenant-id'
                    },
                    {
                        id: 'attendance-2',
                        student_id: 'student-123',
                        class_id: 'class-789',
                        date: '2025-07-16',
                        status: _attendance.AttendanceStatus.LATE,
                        tenant_id: 'test-tenant-id'
                    }
                ];
                const mockChain = {
                    select: _globals.jest.fn().mockReturnThis(),
                    eq: _globals.jest.fn().mockReturnThis(),
                    order: _globals.jest.fn().mockReturnThis(),
                    limit: _globals.jest.fn().mockReturnThis(),
                    range: _globals.jest.fn().mockResolvedValue({
                        data: mockAttendanceRecords,
                        error: null,
                        count: 2
                    })
                };
                mockSupabaseFrom.mockReturnValue(mockChain);
                const result = await attendanceRepository.findAll({
                    filters: {
                        student_id: 'student-123',
                        date: '2025-07-16'
                    }
                });
                (0, _globals.expect)(result).toBeDefined();
                (0, _globals.expect)(result.data).toHaveLength(2);
                (0, _globals.expect)(result.data[0].status).toBe(_attendance.AttendanceStatus.PRESENT);
                (0, _globals.expect)(result.data[1].status).toBe(_attendance.AttendanceStatus.LATE);
            });
        });
        (0, _globals.describe)('findByClassAndDateRange', ()=>{
            (0, _globals.it)('should find attendance records for class within date range', async ()=>{
                const mockAttendanceRecords = [
                    {
                        id: 'attendance-1',
                        student_id: 'student-123',
                        class_id: 'class-456',
                        date: '2025-07-16',
                        status: _attendance.AttendanceStatus.PRESENT,
                        tenant_id: 'test-tenant-id'
                    },
                    {
                        id: 'attendance-2',
                        student_id: 'student-456',
                        class_id: 'class-456',
                        date: '2025-07-16',
                        status: _attendance.AttendanceStatus.ABSENT,
                        tenant_id: 'test-tenant-id'
                    }
                ];
                const mockChain = {
                    select: _globals.jest.fn().mockReturnThis(),
                    eq: _globals.jest.fn().mockReturnThis(),
                    gte: _globals.jest.fn().mockReturnThis(),
                    lte: _globals.jest.fn().mockReturnThis(),
                    order: _globals.jest.fn().mockReturnThis(),
                    limit: _globals.jest.fn().mockReturnThis(),
                    range: _globals.jest.fn().mockResolvedValue({
                        data: mockAttendanceRecords,
                        error: null,
                        count: 2
                    })
                };
                mockSupabaseFrom.mockReturnValue(mockChain);
                const result = await attendanceRepository.findAll({
                    filters: {
                        class_id: 'class-456',
                        date_from: '2025-07-16',
                        date_to: '2025-07-16'
                    }
                });
                (0, _globals.expect)(result).toBeDefined();
                (0, _globals.expect)(result.data).toHaveLength(2);
                (0, _globals.expect)(result.data[0].class_id).toBe('class-456');
                (0, _globals.expect)(result.data[1].class_id).toBe('class-456');
            });
        });
        (0, _globals.describe)('update', ()=>{
            (0, _globals.it)('should update attendance record with valid data', async ()=>{
                const updateData = {
                    status: _attendance.AttendanceStatus.LATE,
                    notes: 'Student arrived 10 minutes late',
                    arrival_time: '09:10:00'
                };
                const mockChain = {
                    update: _globals.jest.fn().mockReturnThis(),
                    eq: _globals.jest.fn().mockReturnThis(),
                    select: _globals.jest.fn().mockReturnThis(),
                    single: _globals.jest.fn().mockResolvedValue({
                        data: {
                            id: 'attendance-123',
                            ...updateData
                        },
                        error: null
                    })
                };
                mockSupabaseFrom.mockReturnValue(mockChain);
                const result = await attendanceRepository.update('attendance-123', updateData);
                (0, _globals.expect)(result).toBeDefined();
                (0, _globals.expect)(result.id).toBe('attendance-123');
                (0, _globals.expect)(result.status).toBe(_attendance.AttendanceStatus.LATE);
                (0, _globals.expect)(result.notes).toBe('Student arrived 10 minutes late');
            });
        });
        (0, _globals.describe)('delete', ()=>{
            (0, _globals.it)('should delete attendance record successfully', async ()=>{
                const mockChain = {
                    delete: _globals.jest.fn().mockReturnThis(),
                    eq: _globals.jest.fn().mockReturnThis(),
                    select: _globals.jest.fn().mockReturnThis(),
                    single: _globals.jest.fn().mockResolvedValue({
                        data: {
                            id: 'attendance-123'
                        },
                        error: null
                    })
                };
                mockSupabaseFrom.mockReturnValue(mockChain);
                const result = await attendanceRepository.delete('attendance-123');
                (0, _globals.expect)(result).toBe(true);
                (0, _globals.expect)(mockSupabaseFrom).toHaveBeenCalledWith('attendance');
            });
        });
    });
    (0, _globals.describe)('Attendance Statistics Integration', ()=>{
        (0, _globals.describe)('calculateAttendanceRate', ()=>{
            (0, _globals.it)('should calculate attendance rate for student', async ()=>{
                const mockStatistics = {
                    total_classes: 20,
                    present_count: 18,
                    late_count: 1,
                    absent_count: 1,
                    excused_count: 0,
                    attendance_rate: 95.0
                };
                const mockChain = {
                    select: _globals.jest.fn().mockReturnThis(),
                    eq: _globals.jest.fn().mockReturnThis(),
                    gte: _globals.jest.fn().mockReturnThis(),
                    lte: _globals.jest.fn().mockReturnThis(),
                    single: _globals.jest.fn().mockResolvedValue({
                        data: mockStatistics,
                        error: null
                    })
                };
                mockSupabaseFrom.mockReturnValue(mockChain);
                // This would be a method on the repository for statistics
                // For now, we'll test the data structure
                const result = await attendanceRepository.findAll({
                    filters: {
                        student_id: 'student-123'
                    }
                });
                (0, _globals.expect)(result).toBeDefined();
                // In a real implementation, this would calculate statistics
                (0, _globals.expect)(mockSupabaseFrom).toHaveBeenCalledWith('attendance');
            });
        });
    });
    (0, _globals.describe)('Attendance Types Integration', ()=>{
        (0, _globals.it)('should work with all AttendanceStatus values', ()=>{
            const validStatuses = [
                _attendance.AttendanceStatus.PRESENT,
                _attendance.AttendanceStatus.ABSENT,
                _attendance.AttendanceStatus.LATE,
                _attendance.AttendanceStatus.EXCUSED
            ];
            validStatuses.forEach((status)=>{
                (0, _globals.expect)(Object.values(_attendance.AttendanceStatus)).toContain(status);
            });
        });
        (0, _globals.it)('should handle status transitions correctly', ()=>{
            // Test that we can transition between statuses
            const initialStatus = _attendance.AttendanceStatus.ABSENT;
            const updatedStatus = _attendance.AttendanceStatus.EXCUSED;
            (0, _globals.expect)(initialStatus).toBe('ABSENT');
            (0, _globals.expect)(updatedStatus).toBe('EXCUSED');
            (0, _globals.expect)(initialStatus).not.toBe(updatedStatus);
        });
    });
    (0, _globals.describe)('End-to-End Attendance Workflow', ()=>{
        (0, _globals.it)('should complete full attendance recording lifecycle', async ()=>{
            // 1. Create attendance record
            const newAttendance = {
                student_id: 'student-e2e',
                class_id: 'class-e2e',
                date: '2025-07-16',
                status: _attendance.AttendanceStatus.PRESENT,
                recorded_by: 'teacher-e2e',
                tenant_id: 'test-tenant-id'
            };
            // Mock creation
            const createMockChain = {
                select: _globals.jest.fn().mockReturnThis(),
                insert: _globals.jest.fn().mockReturnThis(),
                eq: _globals.jest.fn().mockReturnThis(),
                single: _globals.jest.fn().mockResolvedValue({
                    data: {
                        id: 'attendance-e2e',
                        ...newAttendance
                    },
                    error: null
                })
            };
            mockSupabaseFrom.mockReturnValue(createMockChain);
            const createdAttendance = await attendanceRepository.create(newAttendance);
            (0, _globals.expect)(createdAttendance).toBeDefined();
            (0, _globals.expect)(createdAttendance.id).toBe('attendance-e2e');
            (0, _globals.expect)(createdAttendance.status).toBe(_attendance.AttendanceStatus.PRESENT);
            // 2. Update attendance status (student arrives late)
            const updateMockChain = {
                update: _globals.jest.fn().mockReturnThis(),
                eq: _globals.jest.fn().mockReturnThis(),
                select: _globals.jest.fn().mockReturnThis(),
                single: _globals.jest.fn().mockResolvedValue({
                    data: {
                        id: 'attendance-e2e',
                        ...newAttendance,
                        status: _attendance.AttendanceStatus.LATE,
                        arrival_time: '09:10:00',
                        notes: 'Student arrived 10 minutes late'
                    },
                    error: null
                })
            };
            mockSupabaseFrom.mockReturnValue(updateMockChain);
            const updatedAttendance = await attendanceRepository.update('attendance-e2e', {
                status: _attendance.AttendanceStatus.LATE,
                arrival_time: '09:10:00',
                notes: 'Student arrived 10 minutes late'
            });
            (0, _globals.expect)(updatedAttendance.status).toBe(_attendance.AttendanceStatus.LATE);
            (0, _globals.expect)(updatedAttendance.notes).toBe('Student arrived 10 minutes late');
            // 3. Find the attendance record
            const findMockChain = {
                select: _globals.jest.fn().mockReturnThis(),
                eq: _globals.jest.fn().mockReturnThis(),
                single: _globals.jest.fn().mockResolvedValue({
                    data: {
                        id: 'attendance-e2e',
                        ...newAttendance,
                        status: _attendance.AttendanceStatus.LATE,
                        arrival_time: '09:10:00',
                        notes: 'Student arrived 10 minutes late'
                    },
                    error: null
                })
            };
            mockSupabaseFrom.mockReturnValue(findMockChain);
            const foundAttendance = await attendanceRepository.findById('attendance-e2e');
            (0, _globals.expect)(foundAttendance).toBeDefined();
            (0, _globals.expect)(foundAttendance?.status).toBe(_attendance.AttendanceStatus.LATE);
            (0, _globals.expect)(foundAttendance?.arrival_time).toBe('09:10:00');
            // 4. Delete the attendance record
            const deleteMockChain = {
                delete: _globals.jest.fn().mockReturnThis(),
                eq: _globals.jest.fn().mockReturnThis(),
                select: _globals.jest.fn().mockReturnThis(),
                single: _globals.jest.fn().mockResolvedValue({
                    data: {
                        id: 'attendance-e2e'
                    },
                    error: null
                })
            };
            mockSupabaseFrom.mockReturnValue(deleteMockChain);
            const deleteResult = await attendanceRepository.delete('attendance-e2e');
            (0, _globals.expect)(deleteResult).toBe(true);
        });
    });
    (0, _globals.describe)('Attendance Notifications Integration', ()=>{
        (0, _globals.it)('should handle absence notifications', async ()=>{
            // This would test integration with notification service
            // For now, we'll test the data structure that would trigger notifications
            const absentRecord = {
                student_id: 'student-123',
                class_id: 'class-456',
                date: '2025-07-16',
                status: _attendance.AttendanceStatus.ABSENT,
                recorded_by: 'teacher-789',
                tenant_id: 'test-tenant-id'
            };
            const mockChain = {
                select: _globals.jest.fn().mockReturnThis(),
                insert: _globals.jest.fn().mockReturnThis(),
                eq: _globals.jest.fn().mockReturnThis(),
                single: _globals.jest.fn().mockResolvedValue({
                    data: {
                        id: 'attendance-absent',
                        ...absentRecord
                    },
                    error: null
                })
            };
            mockSupabaseFrom.mockReturnValue(mockChain);
            const result = await attendanceRepository.create(absentRecord);
            (0, _globals.expect)(result).toBeDefined();
            (0, _globals.expect)(result.status).toBe(_attendance.AttendanceStatus.ABSENT);
            // In a real implementation, this would trigger a notification
            // For now, we verify the data structure is correct
            (0, _globals.expect)(result.student_id).toBe('student-123');
            (0, _globals.expect)(result.class_id).toBe('class-456');
        });
    });
});

//# sourceMappingURL=data:application/json;base64,