{"version":3,"sources":["/Users/turanmusabosman/Projects/i-ep.app/src/__tests__/integration/quarantine/database-connection.integration.test.ts"],"sourcesContent":["/**\n * İ-EP.APP - Database Connection Integration Test\n * Gerçek Supabase database bağlantısını test eder\n */\n\nimport { createClient } from '@supabase/supabase-js';\n\ndescribe('Database Connection Integration Tests', () => {\n  let supabase: ReturnType<typeof createClient>;\n\n  beforeAll(() => {\n    supabase = createClient(\n      process.env.NEXT_PUBLIC_SUPABASE_URL!,\n      process.env.SUPABASE_SERVICE_ROLE_KEY!\n    );\n  });\n\n  describe('Supabase Connection', () => {\n    it('should connect to Supabase successfully', async () => {\n      const { data, error } = await supabase\n        .from('tenants')\n        .select('id')\n        .limit(1);\n\n      expect(error).toBeNull();\n      expect(data).toBeDefined();\n    });\n\n    it('should have access to tenants table', async () => {\n      const { data, error } = await supabase\n        .from('tenants')\n        .select('id, name, status')\n        .limit(5);\n\n      expect(error).toBeNull();\n      expect(Array.isArray(data)).toBe(true);\n    });\n\n    it('should be able to query with RLS policies', async () => {\n      // Test that RLS is working by trying to query without proper tenant context\n      const { data, error } = await supabase\n        .from('users')\n        .select('id, email, role')\n        .limit(1);\n\n      // Should work with service role key (bypasses RLS)\n      expect(error).toBeNull();\n      expect(data).toBeDefined();\n    });\n  });\n\n  describe('Test Tenant Operations', () => {\n    const testTenantId = process.env.TEST_TENANT_ID!;\n\n    it('should find or create test tenant', async () => {\n      // First check if test tenant exists\n      const { data: existingTenant } = await supabase\n        .from('tenants')\n        .select('id, name, status')\n        .eq('id', testTenantId)\n        .single();\n\n      if (!existingTenant) {\n        // Create test tenant if it doesn't exist\n        const { data: newTenant, error } = await supabase\n          .from('tenants')\n          .insert({\n            id: testTenantId,\n            name: 'Integration Test School',\n            subdomain: 'integration-test',\n            domain: 'integration-test.i-ep.app',\n            status: 'active',\n            settings: {\n              locale: 'tr',\n              timezone: 'Europe/Istanbul',\n              academic_year: '2024-2025'\n            }\n          })\n          .select()\n          .single();\n\n        expect(error).toBeNull();\n        expect(newTenant.id).toBe(testTenantId);\n      } else {\n        expect(existingTenant.id).toBe(testTenantId);\n      }\n    });\n\n    it('should be able to query tenant-specific data', async () => {\n      const { data, error } = await supabase\n        .from('users')\n        .select('id, email, role, tenant_id')\n        .eq('tenant_id', testTenantId)\n        .limit(10);\n\n      expect(error).toBeNull();\n      expect(Array.isArray(data)).toBe(true);\n      \n      // If there are users, they should all belong to test tenant\n      if (data!.length > 0) {\n        data!.forEach(user => {\n          expect(user.tenant_id).toBe(testTenantId);\n        });\n      }\n    });\n  });\n\n  describe('Core Tables Accessibility', () => {\n    const coreTables = ['users', 'classes', 'subjects', 'assignments', 'attendance_records', 'grades'];\n\n    coreTables.forEach(tableName => {\n      it(`should be able to query ${tableName} table`, async () => {\n        const { data, error } = await supabase\n          .from(tableName)\n          .select('*')\n          .limit(1);\n\n        // Error is acceptable if table doesn't exist yet, but connection should work\n        if (error) {\n          // Check if it's a \"relation does not exist\" error (table not created yet)\n          const isTableNotExist = error.message.includes('does not exist') || \n                                  error.message.includes('relation') ||\n                                  error.message.includes('table');\n          \n          if (!isTableNotExist) {\n            // If it's not a \"table doesn't exist\" error, then it's a real connection problem\n            throw error;\n          }\n          \n          console.warn(`⚠️  Table ${tableName} doesn't exist yet - this is expected if migrations haven't been run`);\n        } else {\n          expect(data).toBeDefined();\n          expect(Array.isArray(data)).toBe(true);\n        }\n      });\n    });\n  });\n\n  describe('Database Performance', () => {\n    it('should respond to queries within reasonable time', async () => {\n      const startTime = Date.now();\n      \n      const { data, error } = await supabase\n        .from('tenants')\n        .select('id, name')\n        .limit(10);\n\n      const endTime = Date.now();\n      const queryTime = endTime - startTime;\n\n      expect(error).toBeNull();\n      expect(data).toBeDefined();\n      expect(queryTime).toBeLessThan(5000); // Should complete within 5 seconds\n    });\n  });\n});"],"names":["describe","supabase","beforeAll","createClient","process","env","NEXT_PUBLIC_SUPABASE_URL","SUPABASE_SERVICE_ROLE_KEY","it","data","error","from","select","limit","expect","toBeNull","toBeDefined","Array","isArray","toBe","testTenantId","TEST_TENANT_ID","existingTenant","eq","single","newTenant","insert","id","name","subdomain","domain","status","settings","locale","timezone","academic_year","length","forEach","user","tenant_id","coreTables","tableName","isTableNotExist","message","includes","console","warn","startTime","Date","now","endTime","queryTime","toBeLessThan"],"mappings":"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"}