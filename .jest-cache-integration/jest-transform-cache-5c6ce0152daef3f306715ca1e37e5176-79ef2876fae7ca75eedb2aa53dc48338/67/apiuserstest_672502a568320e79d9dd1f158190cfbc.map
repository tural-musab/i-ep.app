{"version":3,"sources":["/Users/turanmusabosman/Projects/i-ep.app/src/__tests__/integration/quarantine/api-users.test.ts"],"sourcesContent":["import { describe, it, expect, beforeEach } from '@jest/globals';\nimport { fetchUsers, createUser } from '@/lib/api/users';\n\n// fetch API'sini mock'la\nconst mockFetch = jest.fn();\nglobal.fetch = mockFetch;\n\ndescribe('User API Entegrasyon Testleri', () => {\n  beforeEach(() => {\n    mockFetch.mockClear(); // Her testten önce mock'u temizle\n  });\n\n  it('kullanıcıları başarıyla getirmelidir', async () => {\n    const mockResponse = {\n      ok: true,\n      json: async () => ({\n        data: [\n          { id: 1, name: 'Test User 1', email: 'test1@example.com' },\n          { id: 2, name: 'Test User 2', email: 'test2@example.com' },\n        ],\n      }),\n    };\n\n    mockFetch.mockResolvedValueOnce(mockResponse);\n\n    const users = await fetchUsers();\n\n    expect(users).toHaveLength(2);\n    expect(users[0]).toMatchObject({\n      id: 1,\n      name: 'Test User 1',\n      email: 'test1@example.com',\n    });\n    expect(mockFetch).toHaveBeenCalledTimes(1);\n  });\n\n  it('kullanıcı oluşturma hatasını işlemeli', async () => {\n    const mockErrorResponse = {\n      ok: false,\n      status: 400,\n      json: async () => ({ error: 'Validation failed' }),\n    };\n\n    mockFetch.mockResolvedValueOnce(mockErrorResponse);\n\n    const newUser = {\n      name: '',\n      email: 'invalid-email',\n    };\n\n    await expect(createUser(newUser)).rejects.toThrow('Validation failed');\n    expect(mockFetch).toHaveBeenCalledTimes(1);\n  });\n\n  it('should handle response with different structure', async () => {\n    const mockData: Record<string, unknown> = {\n      users: [{ id: 1, username: 'testuser' }],\n      total: 1,\n    };\n\n    const mockResponse = {\n      ok: true,\n      json: async () => mockData,\n    };\n\n    mockFetch.mockResolvedValueOnce(mockResponse);\n\n    const result = await fetchUsers();\n    expect(result).toBeDefined();\n    expect(mockFetch).toHaveBeenCalledTimes(1);\n  });\n});\n"],"names":["mockFetch","jest","fn","global","fetch","describe","beforeEach","mockClear","it","mockResponse","ok","json","data","id","name","email","mockResolvedValueOnce","users","fetchUsers","expect","toHaveLength","toMatchObject","toHaveBeenCalledTimes","mockErrorResponse","status","error","newUser","createUser","rejects","toThrow","mockData","username","total","result","toBeDefined"],"mappings":";;;;yBAAiD;uBACV;AAEvC,yBAAyB;AACzB,MAAMA,YAAYC,KAAKC,EAAE;AACzBC,OAAOC,KAAK,GAAGJ;AAEfK,IAAAA,iBAAQ,EAAC,iCAAiC;IACxCC,IAAAA,mBAAU,EAAC;QACTN,UAAUO,SAAS,IAAI,kCAAkC;IAC3D;IAEAC,IAAAA,WAAE,EAAC,wCAAwC;QACzC,MAAMC,eAAe;YACnBC,IAAI;YACJC,MAAM,UAAa,CAAA;oBACjBC,MAAM;wBACJ;4BAAEC,IAAI;4BAAGC,MAAM;4BAAeC,OAAO;wBAAoB;wBACzD;4BAAEF,IAAI;4BAAGC,MAAM;4BAAeC,OAAO;wBAAoB;qBAC1D;gBACH,CAAA;QACF;QAEAf,UAAUgB,qBAAqB,CAACP;QAEhC,MAAMQ,QAAQ,MAAMC,IAAAA,iBAAU;QAE9BC,IAAAA,eAAM,EAACF,OAAOG,YAAY,CAAC;QAC3BD,IAAAA,eAAM,EAACF,KAAK,CAAC,EAAE,EAAEI,aAAa,CAAC;YAC7BR,IAAI;YACJC,MAAM;YACNC,OAAO;QACT;QACAI,IAAAA,eAAM,EAACnB,WAAWsB,qBAAqB,CAAC;IAC1C;IAEAd,IAAAA,WAAE,EAAC,yCAAyC;QAC1C,MAAMe,oBAAoB;YACxBb,IAAI;YACJc,QAAQ;YACRb,MAAM,UAAa,CAAA;oBAAEc,OAAO;gBAAoB,CAAA;QAClD;QAEAzB,UAAUgB,qBAAqB,CAACO;QAEhC,MAAMG,UAAU;YACdZ,MAAM;YACNC,OAAO;QACT;QAEA,MAAMI,IAAAA,eAAM,EAACQ,IAAAA,iBAAU,EAACD,UAAUE,OAAO,CAACC,OAAO,CAAC;QAClDV,IAAAA,eAAM,EAACnB,WAAWsB,qBAAqB,CAAC;IAC1C;IAEAd,IAAAA,WAAE,EAAC,mDAAmD;QACpD,MAAMsB,WAAoC;YACxCb,OAAO;gBAAC;oBAAEJ,IAAI;oBAAGkB,UAAU;gBAAW;aAAE;YACxCC,OAAO;QACT;QAEA,MAAMvB,eAAe;YACnBC,IAAI;YACJC,MAAM,UAAYmB;QACpB;QAEA9B,UAAUgB,qBAAqB,CAACP;QAEhC,MAAMwB,SAAS,MAAMf,IAAAA,iBAAU;QAC/BC,IAAAA,eAAM,EAACc,QAAQC,WAAW;QAC1Bf,IAAAA,eAAM,EAACnB,WAAWsB,qBAAqB,CAAC;IAC1C;AACF"}