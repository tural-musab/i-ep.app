{"version":3,"sources":["/Users/turanmusabosman/Projects/i-ep.app/src/app/api/attendance/route.ts"],"sourcesContent":["/**\n * Attendance API - Main Route\n * Ä°-EP.APP - Attendance Management System\n *\n * Endpoints:\n * - GET /api/attendance - List attendance records with filtering\n * - POST /api/attendance - Create new attendance record\n */\n\nimport { NextRequest, NextResponse } from 'next/server';\nimport { createServerSupabaseClient } from '@/lib/supabase/server';\nimport { AttendanceRepository } from '@/lib/repository/attendance-repository';\nimport { verifyTenantAccess, requireRole } from '@/lib/auth/server-session';\nimport { z } from 'zod';\n\n// Validation schemas\nconst AttendanceCreateSchema = z.object({\n  studentId: z.string().uuid('Invalid student ID'),\n  classId: z.string().uuid('Invalid class ID'),\n  date: z.string().refine((date) => !isNaN(Date.parse(date)), 'Invalid date'),\n  status: z.enum(['present', 'absent', 'late', 'excused', 'sick']),\n  timeIn: z.string().optional(),\n  timeOut: z.string().optional(),\n  notes: z.string().optional(),\n  excuseReason: z.string().optional(),\n  excuseDocument: z.string().optional(),\n});\n\nconst AttendanceQuerySchema = z.object({\n  studentId: z.string().uuid().optional(),\n  classId: z.string().uuid().optional(),\n  date: z.string().optional(),\n  startDate: z.string().optional(),\n  endDate: z.string().optional(),\n  status: z.enum(['present', 'absent', 'late', 'excused', 'sick']).optional(),\n  limit: z.string().transform(Number).optional(),\n  offset: z.string().transform(Number).optional(),\n});\n\nconst AttendanceBulkCreateSchema = z.object({\n  classId: z.string().uuid('Invalid class ID'),\n  date: z.string().refine((date) => !isNaN(Date.parse(date)), 'Invalid date'),\n  attendance: z\n    .array(\n      z.object({\n        studentId: z.string().uuid('Invalid student ID'),\n        status: z.enum(['present', 'absent', 'late', 'excused', 'sick']),\n        timeIn: z.string().optional(),\n        timeOut: z.string().optional(),\n        notes: z.string().optional(),\n        excuseReason: z.string().optional(),\n      })\n    )\n    .min(1, 'At least one attendance record is required'),\n});\n\n/**\n * GET /api/attendance\n * Retrieve attendance records with filtering options\n */\nexport async function GET(request: NextRequest) {\n  try {\n    // Verify authentication and tenant access\n    const authResult = await verifyTenantAccess(request);\n    if (!authResult) {\n      return NextResponse.json({ error: 'Authentication required' }, { status: 401 });\n    }\n\n    const { user, tenantId } = authResult;\n    const supabase = createServerSupabaseClient();\n\n    // Parse and validate query parameters\n    const { searchParams } = new URL(request.url);\n    const queryParams = Object.fromEntries(searchParams.entries());\n\n    const validatedQuery = AttendanceQuerySchema.parse(queryParams);\n\n    // Initialize repository\n    const attendanceRepo = new AttendanceRepository(supabase, tenantId);\n\n    // Build query options\n    const queryOptions = {\n      studentId: validatedQuery.studentId,\n      classId: validatedQuery.classId,\n      date: validatedQuery.date ? new Date(validatedQuery.date) : undefined,\n      startDate: validatedQuery.startDate ? new Date(validatedQuery.startDate) : undefined,\n      endDate: validatedQuery.endDate ? new Date(validatedQuery.endDate) : undefined,\n      status: validatedQuery.status,\n      limit: validatedQuery.limit || 50,\n      offset: validatedQuery.offset || 0,\n    };\n\n    // Get attendance records\n    const attendanceRecords = await attendanceRepo.getAttendanceRecords(queryOptions);\n\n    // Get total count for pagination\n    const totalCount = await attendanceRepo.getAttendanceRecordsCount(queryOptions);\n\n    return NextResponse.json({\n      data: attendanceRecords,\n      pagination: {\n        total: totalCount,\n        limit: queryOptions.limit,\n        offset: queryOptions.offset,\n        hasMore: queryOptions.offset + queryOptions.limit < totalCount,\n      },\n    });\n  } catch (error) {\n    console.error('Error fetching attendance records:', error);\n\n    if (error instanceof z.ZodError) {\n      return NextResponse.json(\n        { error: 'Invalid query parameters', details: error.errors },\n        { status: 400 }\n      );\n    }\n\n    return NextResponse.json({ error: 'Failed to fetch attendance records' }, { status: 500 });\n  }\n}\n\n/**\n * POST /api/attendance\n * Create new attendance record or bulk create\n */\nexport async function POST(request: NextRequest) {\n  try {\n    // Verify authentication and require teacher/admin role\n    const user = await requireRole(request, ['teacher', 'admin']);\n    if (!user) {\n      return NextResponse.json(\n        { error: 'Authentication required or insufficient permissions' },\n        { status: 401 }\n      );\n    }\n\n    const tenantId = user.tenantId;\n    const supabase = createServerSupabaseClient();\n\n    const body = await request.json();\n    const attendanceRepo = new AttendanceRepository(supabase, tenantId);\n\n    // Check if this is a bulk create request\n    if (body.attendance && Array.isArray(body.attendance)) {\n      // Bulk create\n      const validatedData = AttendanceBulkCreateSchema.parse(body);\n\n      // Verify class exists and user has permission\n      const classExists = await attendanceRepo.verifyClassAccess(validatedData.classId);\n      if (!classExists) {\n        return NextResponse.json({ error: 'Class not found or access denied' }, { status: 403 });\n      }\n\n      // Create bulk attendance records\n      const createdRecords = await attendanceRepo.createBulkAttendance(\n        validatedData.classId,\n        new Date(validatedData.date),\n        validatedData.attendance.map((record) => ({\n          studentId: record.studentId,\n          status: record.status,\n          timeIn: record.timeIn,\n          timeOut: record.timeOut,\n          notes: record.notes,\n          excuseReason: record.excuseReason,\n          markedBy: user.id,\n        }))\n      );\n\n      return NextResponse.json(\n        {\n          success: true,\n          data: createdRecords,\n          message: `${createdRecords.length} attendance records created successfully`,\n        },\n        { status: 201 }\n      );\n    } else {\n      // Single create\n      const validatedData = AttendanceCreateSchema.parse(body);\n\n      // Verify student and class exist and user has permission\n      const studentExists = await attendanceRepo.verifyStudentAccess(validatedData.studentId);\n      const classExists = await attendanceRepo.verifyClassAccess(validatedData.classId);\n\n      if (!studentExists || !classExists) {\n        return NextResponse.json(\n          { error: 'Student or class not found or access denied' },\n          { status: 403 }\n        );\n      }\n\n      // Check if attendance already exists for this student on this date\n      const existingAttendance = await attendanceRepo.getAttendanceByStudentAndDate(\n        validatedData.studentId,\n        new Date(validatedData.date)\n      );\n\n      if (existingAttendance) {\n        return NextResponse.json(\n          { error: 'Attendance already recorded for this student on this date' },\n          { status: 409 }\n        );\n      }\n\n      // Create attendance record\n      const attendanceRecord = await attendanceRepo.createAttendance({\n        studentId: validatedData.studentId,\n        classId: validatedData.classId,\n        date: new Date(validatedData.date),\n        status: validatedData.status,\n        timeIn: validatedData.timeIn,\n        timeOut: validatedData.timeOut,\n        notes: validatedData.notes,\n        excuseReason: validatedData.excuseReason,\n        excuseDocument: validatedData.excuseDocument,\n        markedBy: user.id,\n      });\n\n      // Trigger parent notification if absent\n      if (validatedData.status === 'absent') {\n        await attendanceRepo.triggerParentNotification(attendanceRecord.id);\n      }\n\n      return NextResponse.json(\n        {\n          success: true,\n          data: attendanceRecord,\n          message: 'Attendance record created successfully',\n        },\n        { status: 201 }\n      );\n    }\n  } catch (error) {\n    console.error('Error creating attendance record:', error);\n\n    if (error instanceof z.ZodError) {\n      return NextResponse.json(\n        { error: 'Invalid request data', details: error.errors },\n        { status: 400 }\n      );\n    }\n\n    return NextResponse.json({ error: 'Failed to create attendance record' }, { status: 500 });\n  }\n}\n"],"names":["GET","POST","AttendanceCreateSchema","z","object","studentId","string","uuid","classId","date","refine","isNaN","Date","parse","status","enum","timeIn","optional","timeOut","notes","excuseReason","excuseDocument","AttendanceQuerySchema","startDate","endDate","limit","transform","Number","offset","AttendanceBulkCreateSchema","attendance","array","min","request","authResult","verifyTenantAccess","NextResponse","json","error","user","tenantId","supabase","createServerSupabaseClient","searchParams","URL","url","queryParams","Object","fromEntries","entries","validatedQuery","attendanceRepo","AttendanceRepository","queryOptions","undefined","attendanceRecords","getAttendanceRecords","totalCount","getAttendanceRecordsCount","data","pagination","total","hasMore","console","ZodError","details","errors","requireRole","body","Array","isArray","validatedData","classExists","verifyClassAccess","createdRecords","createBulkAttendance","map","record","markedBy","id","success","message","length","studentExists","verifyStudentAccess","existingAttendance","getAttendanceByStudentAndDate","attendanceRecord","createAttendance","triggerParentNotification"],"mappings":"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"}