e688a6af5a6877003e50347158572c48
/**
 * Attendance API - Main Route
 * Ä°-EP.APP - Attendance Management System
 *
 * Endpoints:
 * - GET /api/attendance - List attendance records with filtering
 * - POST /api/attendance - Create new attendance record
 */ "use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    GET: function() {
        return GET;
    },
    POST: function() {
        return POST;
    }
});
const _server = require("next/server");
const _server1 = require("../../../lib/supabase/server");
const _attendancerepository = require("../../../lib/repository/attendance-repository");
const _serversession = require("../../../lib/auth/server-session");
const _zod = require("zod");
// Validation schemas
const AttendanceCreateSchema = _zod.z.object({
    studentId: _zod.z.string().uuid('Invalid student ID'),
    classId: _zod.z.string().uuid('Invalid class ID'),
    date: _zod.z.string().refine((date)=>!isNaN(Date.parse(date)), 'Invalid date'),
    status: _zod.z.enum([
        'present',
        'absent',
        'late',
        'excused',
        'sick'
    ]),
    timeIn: _zod.z.string().optional(),
    timeOut: _zod.z.string().optional(),
    notes: _zod.z.string().optional(),
    excuseReason: _zod.z.string().optional(),
    excuseDocument: _zod.z.string().optional()
});
const AttendanceQuerySchema = _zod.z.object({
    studentId: _zod.z.string().uuid().optional(),
    classId: _zod.z.string().uuid().optional(),
    date: _zod.z.string().optional(),
    startDate: _zod.z.string().optional(),
    endDate: _zod.z.string().optional(),
    status: _zod.z.enum([
        'present',
        'absent',
        'late',
        'excused',
        'sick'
    ]).optional(),
    limit: _zod.z.string().transform(Number).optional(),
    offset: _zod.z.string().transform(Number).optional()
});
const AttendanceBulkCreateSchema = _zod.z.object({
    classId: _zod.z.string().uuid('Invalid class ID'),
    date: _zod.z.string().refine((date)=>!isNaN(Date.parse(date)), 'Invalid date'),
    attendance: _zod.z.array(_zod.z.object({
        studentId: _zod.z.string().uuid('Invalid student ID'),
        status: _zod.z.enum([
            'present',
            'absent',
            'late',
            'excused',
            'sick'
        ]),
        timeIn: _zod.z.string().optional(),
        timeOut: _zod.z.string().optional(),
        notes: _zod.z.string().optional(),
        excuseReason: _zod.z.string().optional()
    })).min(1, 'At least one attendance record is required')
});
async function GET(request) {
    try {
        // Verify authentication and tenant access
        const authResult = await (0, _serversession.verifyTenantAccess)(request);
        if (!authResult) {
            return _server.NextResponse.json({
                error: 'Authentication required'
            }, {
                status: 401
            });
        }
        const { user, tenantId } = authResult;
        const supabase = (0, _server1.createServerSupabaseClient)();
        // Parse and validate query parameters
        const { searchParams } = new URL(request.url);
        const queryParams = Object.fromEntries(searchParams.entries());
        const validatedQuery = AttendanceQuerySchema.parse(queryParams);
        // Initialize repository
        const attendanceRepo = new _attendancerepository.AttendanceRepository(supabase, tenantId);
        // Build query options
        const queryOptions = {
            studentId: validatedQuery.studentId,
            classId: validatedQuery.classId,
            date: validatedQuery.date ? new Date(validatedQuery.date) : undefined,
            startDate: validatedQuery.startDate ? new Date(validatedQuery.startDate) : undefined,
            endDate: validatedQuery.endDate ? new Date(validatedQuery.endDate) : undefined,
            status: validatedQuery.status,
            limit: validatedQuery.limit || 50,
            offset: validatedQuery.offset || 0
        };
        // Get attendance records
        const attendanceRecords = await attendanceRepo.getAttendanceRecords(queryOptions);
        // Get total count for pagination
        const totalCount = await attendanceRepo.getAttendanceRecordsCount(queryOptions);
        return _server.NextResponse.json({
            data: attendanceRecords,
            pagination: {
                total: totalCount,
                limit: queryOptions.limit,
                offset: queryOptions.offset,
                hasMore: queryOptions.offset + queryOptions.limit < totalCount
            }
        });
    } catch (error) {
        console.error('Error fetching attendance records:', error);
        if (error instanceof _zod.z.ZodError) {
            return _server.NextResponse.json({
                error: 'Invalid query parameters',
                details: error.errors
            }, {
                status: 400
            });
        }
        return _server.NextResponse.json({
            error: 'Failed to fetch attendance records'
        }, {
            status: 500
        });
    }
}
async function POST(request) {
    try {
        // Verify authentication and require teacher/admin role
        const user = await (0, _serversession.requireRole)(request, [
            'teacher',
            'admin'
        ]);
        if (!user) {
            return _server.NextResponse.json({
                error: 'Authentication required or insufficient permissions'
            }, {
                status: 401
            });
        }
        const tenantId = user.tenantId;
        const supabase = (0, _server1.createServerSupabaseClient)();
        const body = await request.json();
        const attendanceRepo = new _attendancerepository.AttendanceRepository(supabase, tenantId);
        // Check if this is a bulk create request
        if (body.attendance && Array.isArray(body.attendance)) {
            // Bulk create
            const validatedData = AttendanceBulkCreateSchema.parse(body);
            // Verify class exists and user has permission
            const classExists = await attendanceRepo.verifyClassAccess(validatedData.classId);
            if (!classExists) {
                return _server.NextResponse.json({
                    error: 'Class not found or access denied'
                }, {
                    status: 403
                });
            }
            // Create bulk attendance records
            const createdRecords = await attendanceRepo.createBulkAttendance(validatedData.classId, new Date(validatedData.date), validatedData.attendance.map((record)=>({
                    studentId: record.studentId,
                    status: record.status,
                    timeIn: record.timeIn,
                    timeOut: record.timeOut,
                    notes: record.notes,
                    excuseReason: record.excuseReason,
                    markedBy: user.id
                })));
            return _server.NextResponse.json({
                success: true,
                data: createdRecords,
                message: `${createdRecords.length} attendance records created successfully`
            }, {
                status: 201
            });
        } else {
            // Single create
            const validatedData = AttendanceCreateSchema.parse(body);
            // Verify student and class exist and user has permission
            const studentExists = await attendanceRepo.verifyStudentAccess(validatedData.studentId);
            const classExists = await attendanceRepo.verifyClassAccess(validatedData.classId);
            if (!studentExists || !classExists) {
                return _server.NextResponse.json({
                    error: 'Student or class not found or access denied'
                }, {
                    status: 403
                });
            }
            // Check if attendance already exists for this student on this date
            const existingAttendance = await attendanceRepo.getAttendanceByStudentAndDate(validatedData.studentId, new Date(validatedData.date));
            if (existingAttendance) {
                return _server.NextResponse.json({
                    error: 'Attendance already recorded for this student on this date'
                }, {
                    status: 409
                });
            }
            // Create attendance record
            const attendanceRecord = await attendanceRepo.createAttendance({
                studentId: validatedData.studentId,
                classId: validatedData.classId,
                date: new Date(validatedData.date),
                status: validatedData.status,
                timeIn: validatedData.timeIn,
                timeOut: validatedData.timeOut,
                notes: validatedData.notes,
                excuseReason: validatedData.excuseReason,
                excuseDocument: validatedData.excuseDocument,
                markedBy: user.id
            });
            // Trigger parent notification if absent
            if (validatedData.status === 'absent') {
                await attendanceRepo.triggerParentNotification(attendanceRecord.id);
            }
            return _server.NextResponse.json({
                success: true,
                data: attendanceRecord,
                message: 'Attendance record created successfully'
            }, {
                status: 201
            });
        }
    } catch (error) {
        console.error('Error creating attendance record:', error);
        if (error instanceof _zod.z.ZodError) {
            return _server.NextResponse.json({
                error: 'Invalid request data',
                details: error.errors
            }, {
                status: 400
            });
        }
        return _server.NextResponse.json({
            error: 'Failed to create attendance record'
        }, {
            status: 500
        });
    }
}

//# sourceMappingURL=data:application/json;base64,