{"version":3,"sources":["/Users/turanmusabosman/Projects/i-ep.app/src/lib/auth/server-session.ts"],"sourcesContent":["/**\n * Server-side session management for API routes\n * UPDATED: Supports both NextAuth and Supabase authentication\n * Professional approach: Backward compatibility maintained\n */\n\nimport { getServerSession } from 'next-auth/next';\nimport { authOptions } from '@/app/api/auth/[...nextauth]/route';\nimport { createServerSupabaseClient } from '@/lib/supabase/server';\nimport { NextRequest } from 'next/server';\nimport { User } from '@/types/auth';\n\n/**\n * Get authenticated user - HYBRID approach (NextAuth + Supabase)\n * PROFESSIONAL SOLUTION: Uses request headers for server-side auth\n * COMPATIBLE: Works with our API client authentication system\n */\nexport async function getAuthenticatedUser(req?: NextRequest): Promise<User | null> {\n  try {\n    // Try NextAuth first\n    const session = await getServerSession(authOptions);\n    if (session && session.user) {\n      return session.user as User;\n    }\n\n    // PROFESSIONAL APPROACH: Get user info from API client headers\n    // Our API client already sends user info in headers after successful auth\n    if (req) {\n      const userEmail = req.headers.get('X-User-Email');\n      const userId = req.headers.get('X-User-ID');\n      const tenantId = req.headers.get('x-tenant-id');\n\n      if (userEmail && userId && tenantId) {\n        // Create user from headers (already authenticated by API client)\n        const user: User = {\n          id: userId,\n          email: userEmail,\n          role: 'admin' as any, // Default - can be enhanced later\n          tenantId: tenantId,\n          isActive: true,\n          allowedTenants: [],\n          profile: {\n            userId: userId,\n            fullName: userEmail, // Use email as name for now\n            avatar: undefined,\n          },\n          emailVerified: new Date(), // Assume verified if they got this far\n          createdAt: new Date(),\n          updatedAt: new Date(),\n          lastLogin: new Date(),\n        };\n\n        return user;\n      }\n    }\n\n    // No authentication found\n    return null;\n  } catch (error) {\n    console.error('Error getting authenticated user:', error);\n    return null;\n  }\n}\n\n/**\n * Check if user has required role\n */\nexport async function requireRole(req: NextRequest, allowedRoles: string[]): Promise<User | null> {\n  const user = await getAuthenticatedUser(req);\n\n  if (!user) {\n    return null;\n  }\n\n  if (!allowedRoles.includes(user.role)) {\n    return null;\n  }\n\n  return user;\n}\n\n/**\n * Get tenant ID from headers (set by middleware)\n */\nexport function getTenantIdFromHeaders(req: NextRequest): string | null {\n  const tenantId = req.headers.get('x-tenant-id');\n  return tenantId || null;\n}\n\n/**\n * Verify user belongs to tenant\n */\nexport async function verifyTenantAccess(\n  req: NextRequest\n): Promise<{ user: User; tenantId: string } | null> {\n  const user = await getAuthenticatedUser(req);\n  const tenantId = getTenantIdFromHeaders(req);\n\n  if (!user || !tenantId) {\n    return null;\n  }\n\n  // Check if user belongs to this tenant\n  if (user.tenantId !== tenantId && !user.allowedTenants?.includes(tenantId)) {\n    return null;\n  }\n\n  return { user, tenantId };\n}\n"],"names":["getAuthenticatedUser","getTenantIdFromHeaders","requireRole","verifyTenantAccess","req","session","getServerSession","authOptions","user","userEmail","headers","get","userId","tenantId","id","email","role","isActive","allowedTenants","profile","fullName","avatar","undefined","emailVerified","Date","createdAt","updatedAt","lastLogin","error","console","allowedRoles","includes"],"mappings":"AAAA;;;;CAIC;;;;;;;;;;;IAaqBA,oBAAoB;eAApBA;;IAmENC,sBAAsB;eAAtBA;;IAjBMC,WAAW;eAAXA;;IAyBAC,kBAAkB;eAAlBA;;;sBAtFW;uBACL;AAUrB,eAAeH,qBAAqBI,GAAiB;IAC1D,IAAI;QACF,qBAAqB;QACrB,MAAMC,UAAU,MAAMC,IAAAA,sBAAgB,EAACC,kBAAW;QAClD,IAAIF,WAAWA,QAAQG,IAAI,EAAE;YAC3B,OAAOH,QAAQG,IAAI;QACrB;QAEA,+DAA+D;QAC/D,0EAA0E;QAC1E,IAAIJ,KAAK;YACP,MAAMK,YAAYL,IAAIM,OAAO,CAACC,GAAG,CAAC;YAClC,MAAMC,SAASR,IAAIM,OAAO,CAACC,GAAG,CAAC;YAC/B,MAAME,WAAWT,IAAIM,OAAO,CAACC,GAAG,CAAC;YAEjC,IAAIF,aAAaG,UAAUC,UAAU;gBACnC,iEAAiE;gBACjE,MAAML,OAAa;oBACjBM,IAAIF;oBACJG,OAAON;oBACPO,MAAM;oBACNH,UAAUA;oBACVI,UAAU;oBACVC,gBAAgB,EAAE;oBAClBC,SAAS;wBACPP,QAAQA;wBACRQ,UAAUX;wBACVY,QAAQC;oBACV;oBACAC,eAAe,IAAIC;oBACnBC,WAAW,IAAID;oBACfE,WAAW,IAAIF;oBACfG,WAAW,IAAIH;gBACjB;gBAEA,OAAOhB;YACT;QACF;QAEA,0BAA0B;QAC1B,OAAO;IACT,EAAE,OAAOoB,OAAO;QACdC,QAAQD,KAAK,CAAC,qCAAqCA;QACnD,OAAO;IACT;AACF;AAKO,eAAe1B,YAAYE,GAAgB,EAAE0B,YAAsB;IACxE,MAAMtB,OAAO,MAAMR,qBAAqBI;IAExC,IAAI,CAACI,MAAM;QACT,OAAO;IACT;IAEA,IAAI,CAACsB,aAAaC,QAAQ,CAACvB,KAAKQ,IAAI,GAAG;QACrC,OAAO;IACT;IAEA,OAAOR;AACT;AAKO,SAASP,uBAAuBG,GAAgB;IACrD,MAAMS,WAAWT,IAAIM,OAAO,CAACC,GAAG,CAAC;IACjC,OAAOE,YAAY;AACrB;AAKO,eAAeV,mBACpBC,GAAgB;IAEhB,MAAMI,OAAO,MAAMR,qBAAqBI;IACxC,MAAMS,WAAWZ,uBAAuBG;IAExC,IAAI,CAACI,QAAQ,CAACK,UAAU;QACtB,OAAO;IACT;IAEA,uCAAuC;IACvC,IAAIL,KAAKK,QAAQ,KAAKA,YAAY,CAACL,KAAKU,cAAc,EAAEa,SAASlB,WAAW;QAC1E,OAAO;IACT;IAEA,OAAO;QAAEL;QAAMK;IAAS;AAC1B"}