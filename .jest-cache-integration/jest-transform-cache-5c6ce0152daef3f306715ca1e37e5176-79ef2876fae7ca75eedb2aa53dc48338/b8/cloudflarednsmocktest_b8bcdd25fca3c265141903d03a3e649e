f5d8ee1a7e9ff81a56c2b0fbdd539bb0
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
const _globals = require("@jest/globals");
const _mswhelpers = require("../../../tests/fixtures/msw-helpers");
const _domains = require("../../../lib/cloudflare/domains");
(0, _globals.describe)('Cloudflare DNS Integration Tests (Mocked)', ()=>{
    (0, _globals.beforeAll)(()=>{
        _mswhelpers.TestEnvironmentHelper.setupTestEnvironment();
        _mswhelpers.TestEnvironmentHelper.setupMockServer();
    });
    (0, _globals.beforeEach)(()=>{
        // Her test öncesinde mock'ları temizle
        _mswhelpers.TestEnvironmentHelper.cleanup();
    });
    (0, _globals.afterEach)(()=>{
        // Her test sonrasında mock'ları temizle
        _mswhelpers.TestEnvironmentHelper.cleanup();
    });
    (0, _globals.afterAll)(()=>{
        // Test suite bittiğinde mock server'ı kapat
        _mswhelpers.TestEnvironmentHelper.teardown();
    });
    (0, _globals.describe)('createSubdomainDNSRecord Tests', ()=>{
        (0, _globals.it)('should successfully create a DNS record for a new subdomain', async ()=>{
            // Arrange
            const testSubdomain = 'test-okulu';
            const rootDomain = 'i-ep.app';
            // Başarılı DNS record oluşturma mock'ını ayarla
            _mswhelpers.CloudflareMockHelper.setupSuccessfulDnsRecordCreation(testSubdomain);
            // Act
            const result = await (0, _domains.createDnsRecord)({
                subdomain: testSubdomain,
                rootDomain: rootDomain,
                proxied: true,
                ttl: 1
            });
            // Assert
            (0, _globals.expect)(result).toBeDefined();
            (0, _globals.expect)(result.success).toBe(true);
            (0, _globals.expect)(result.errors).toHaveLength(0);
            (0, _globals.expect)(result.result).toBeDefined();
            (0, _globals.expect)(result.result?.name).toBe(`${testSubdomain}.${rootDomain}`);
            (0, _globals.expect)(result.result?.type).toBe('CNAME');
            (0, _globals.expect)(result.result?.proxied).toBe(true);
        });
        (0, _globals.it)('should handle DNS record creation when record already exists', async ()=>{
            // Arrange
            const testSubdomain = 'existing-tenant';
            const rootDomain = 'i-ep.app';
            // DNS record zaten var hatası mock'ını ayarla
            _mswhelpers.CloudflareMockHelper.setupFailedDnsRecordCreation('recordExists');
            // Act
            const result = await (0, _domains.createDnsRecord)({
                subdomain: testSubdomain,
                rootDomain: rootDomain,
                proxied: true,
                ttl: 1
            });
            // Assert
            (0, _globals.expect)(result).toBeDefined();
            (0, _globals.expect)(result.success).toBe(false);
            (0, _globals.expect)(result.errors).toHaveLength(1);
            (0, _globals.expect)(result.errors[0].message).toBe('DNS record already exists');
            (0, _globals.expect)(result.errors[0].code).toBe(81053);
        });
        (0, _globals.it)('should handle unauthorized API access', async ()=>{
            // Arrange
            const testSubdomain = 'unauthorized-test';
            const rootDomain = 'i-ep.app';
            // Yetkisiz erişim hatası mock'ını ayarla
            _mswhelpers.CloudflareMockHelper.setupFailedDnsRecordCreation('unauthorized');
            // Act
            const result = await (0, _domains.createDnsRecord)({
                subdomain: testSubdomain,
                rootDomain: rootDomain,
                proxied: true,
                ttl: 1
            });
            // Assert
            (0, _globals.expect)(result).toBeDefined();
            (0, _globals.expect)(result.success).toBe(false);
            (0, _globals.expect)(result.errors).toHaveLength(1);
            (0, _globals.expect)(result.errors[0].message).toBe('Authentication error');
            (0, _globals.expect)(result.errors[0].code).toBe(10000);
        });
        (0, _globals.it)('should handle rate limit errors', async ()=>{
            // Arrange
            const testSubdomain = 'ratelimit-test';
            const rootDomain = 'i-ep.app';
            // Rate limit hatası mock'ını ayarla
            _mswhelpers.CloudflareMockHelper.setupFailedDnsRecordCreation('rateLimit');
            // Act
            const result = await (0, _domains.createDnsRecord)({
                subdomain: testSubdomain,
                rootDomain: rootDomain,
                proxied: true,
                ttl: 1
            });
            // Assert
            (0, _globals.expect)(result).toBeDefined();
            (0, _globals.expect)(result.success).toBe(false);
            (0, _globals.expect)(result.errors).toHaveLength(1);
            (0, _globals.expect)(result.errors[0].message).toBe('Rate limit exceeded');
            (0, _globals.expect)(result.errors[0].code).toBe(10013);
        });
        (0, _globals.it)('should handle zone not found error', async ()=>{
            // Arrange
            const testSubdomain = 'test-subdomain';
            const rootDomain = 'nonexistent.com';
            // Zone bulunamadı mock'ını ayarla
            _mswhelpers.CloudflareMockHelper.setupZoneNotFound();
            // Act
            const result = await (0, _domains.createDnsRecord)({
                subdomain: testSubdomain,
                rootDomain: rootDomain,
                proxied: true,
                ttl: 1
            });
            // Assert
            (0, _globals.expect)(result).toBeDefined();
            (0, _globals.expect)(result.success).toBe(false);
            (0, _globals.expect)(result.errors).toHaveLength(1);
            (0, _globals.expect)(result.errors[0].message).toContain('zone bulunamadı');
        });
        (0, _globals.it)('should create DNS record with custom TTL and proxy settings', async ()=>{
            // Arrange
            const testSubdomain = 'custom-settings-tenant';
            const rootDomain = 'i-ep.app';
            const customTtl = 300;
            const proxied = false;
            // Özelleştirilmiş ayarlarla DNS record oluşturma mock'ını ayarla
            _mswhelpers.CloudflareMockHelper.setupSuccessfulDnsRecordCreation(testSubdomain);
            // Act
            const result = await (0, _domains.createDnsRecord)({
                subdomain: testSubdomain,
                rootDomain: rootDomain,
                proxied: proxied,
                ttl: customTtl
            });
            // Assert
            (0, _globals.expect)(result).toBeDefined();
            (0, _globals.expect)(result.success).toBe(true);
            (0, _globals.expect)(result.result?.name).toBe(`${testSubdomain}.${rootDomain}`);
            (0, _globals.expect)(result.result?.ttl).toBe(1); // Mock'ta 1 olarak ayarlandı
        });
        (0, _globals.it)('should validate subdomain format before creating DNS record', async ()=>{
            // Arrange
            const invalidSubdomain = 'invalid_subdomain!@#';
            const rootDomain = 'i-ep.app';
            // Act & Assert - Invalid subdomain durumunda hata beklenir
            await (0, _globals.expect)((0, _domains.createDnsRecord)({
                subdomain: invalidSubdomain,
                rootDomain: rootDomain,
                proxied: true,
                ttl: 1
            })).rejects.toThrow();
        });
        (0, _globals.it)('should handle empty subdomain gracefully', async ()=>{
            // Arrange
            const emptySubdomain = '';
            const rootDomain = 'i-ep.app';
            // Act & Assert - Boş subdomain durumunda hata beklenir
            await (0, _globals.expect)((0, _domains.createDnsRecord)({
                subdomain: emptySubdomain,
                rootDomain: rootDomain,
                proxied: true,
                ttl: 1
            })).rejects.toThrow();
        });
    });
    (0, _globals.describe)('Network Error Handling', ()=>{
        (0, _globals.it)('should handle network connectivity issues', async ()=>{
            // Arrange
            const testSubdomain = 'network-error-test';
            const rootDomain = 'i-ep.app';
            // Network hatası simülasyonu için tüm istekleri reddet
            // (nock mock'ları kurmazsan, gerçek network isteği yapılmaya çalışır ve hata verir)
            // Act & Assert
            await (0, _globals.expect)((0, _domains.createDnsRecord)({
                subdomain: testSubdomain,
                rootDomain: rootDomain,
                proxied: true,
                ttl: 1
            })).rejects.toThrow();
        });
    });
    (0, _globals.describe)('DNS Record Management Integration', ()=>{
        (0, _globals.it)('should create, verify and potentially delete DNS records in sequence', async ()=>{
            // Bu test gerçek bir workflow'u simüle eder
            const testSubdomain = 'workflow-test';
            const rootDomain = 'i-ep.app';
            // 1. DNS record oluşturma mock'ı
            _mswhelpers.CloudflareMockHelper.setupSuccessfulDnsRecordCreation(testSubdomain);
            // Act - DNS record oluştur
            const createResult = await (0, _domains.createDnsRecord)({
                subdomain: testSubdomain,
                rootDomain: rootDomain,
                proxied: true,
                ttl: 1
            });
            // Assert - Oluşturma başarılı
            (0, _globals.expect)(createResult.success).toBe(true);
            (0, _globals.expect)(createResult.result?.id).toBeDefined();
            // 2. DNS record listesi mock'ı (doğrulama için)
            _mswhelpers.CloudflareMockHelper.setupDnsRecordsList();
            // Burada gerçek implementasyonda DNS record'ların listesini alıp
            // oluşturulan record'ın var olduğunu doğrulayabiliriz
            // 3. DNS record silme mock'ı (cleanup için)
            if (createResult.result?.id) {
                _mswhelpers.CloudflareMockHelper.setupDnsRecordDeletion(createResult.result.id);
            }
        // Bu noktada gerçek implementasyonda record'ı silebiliriz
        // Şimdilik mock'ların doğru kurulduğunu test ettik
        });
    });
});

//# sourceMappingURL=data:application/json;base64,