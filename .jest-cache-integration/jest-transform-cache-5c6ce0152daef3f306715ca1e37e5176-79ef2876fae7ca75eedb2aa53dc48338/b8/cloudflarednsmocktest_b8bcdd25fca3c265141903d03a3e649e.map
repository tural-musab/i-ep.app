{"version":3,"sources":["/Users/turanmusabosman/Projects/i-ep.app/src/__tests__/integration/quarantine/cloudflare-dns-mock.test.ts"],"sourcesContent":["import { describe, it, expect, beforeEach, afterEach, beforeAll, afterAll } from '@jest/globals';\nimport { CloudflareMockHelper, TestEnvironmentHelper } from '../../../tests/fixtures/msw-helpers';\nimport { createDnsRecord } from '@/lib/cloudflare/domains';\n\ndescribe('Cloudflare DNS Integration Tests (Mocked)', () => {\n  beforeAll(() => {\n    TestEnvironmentHelper.setupTestEnvironment();\n    TestEnvironmentHelper.setupMockServer();\n  });\n\n  beforeEach(() => {\n    // Her test öncesinde mock'ları temizle\n    TestEnvironmentHelper.cleanup();\n  });\n\n  afterEach(() => {\n    // Her test sonrasında mock'ları temizle\n    TestEnvironmentHelper.cleanup();\n  });\n\n  afterAll(() => {\n    // Test suite bittiğinde mock server'ı kapat\n    TestEnvironmentHelper.teardown();\n  });\n\n  describe('createSubdomainDNSRecord Tests', () => {\n    it('should successfully create a DNS record for a new subdomain', async () => {\n      // Arrange\n      const testSubdomain = 'test-okulu';\n      const rootDomain = 'i-ep.app';\n\n      // Başarılı DNS record oluşturma mock'ını ayarla\n      CloudflareMockHelper.setupSuccessfulDnsRecordCreation(testSubdomain);\n\n      // Act\n      const result = await createDnsRecord({\n        subdomain: testSubdomain,\n        rootDomain: rootDomain,\n        proxied: true,\n        ttl: 1,\n      });\n\n      // Assert\n      expect(result).toBeDefined();\n      expect(result.success).toBe(true);\n      expect(result.errors).toHaveLength(0);\n      expect(result.result).toBeDefined();\n      expect(result.result?.name).toBe(`${testSubdomain}.${rootDomain}`);\n      expect(result.result?.type).toBe('CNAME');\n      expect(result.result?.proxied).toBe(true);\n    });\n\n    it('should handle DNS record creation when record already exists', async () => {\n      // Arrange\n      const testSubdomain = 'existing-tenant';\n      const rootDomain = 'i-ep.app';\n\n      // DNS record zaten var hatası mock'ını ayarla\n      CloudflareMockHelper.setupFailedDnsRecordCreation('recordExists');\n\n      // Act\n      const result = await createDnsRecord({\n        subdomain: testSubdomain,\n        rootDomain: rootDomain,\n        proxied: true,\n        ttl: 1,\n      });\n\n      // Assert\n      expect(result).toBeDefined();\n      expect(result.success).toBe(false);\n      expect(result.errors).toHaveLength(1);\n      expect(result.errors![0].message).toBe('DNS record already exists');\n      expect(result.errors![0].code).toBe(81053);\n    });\n\n    it('should handle unauthorized API access', async () => {\n      // Arrange\n      const testSubdomain = 'unauthorized-test';\n      const rootDomain = 'i-ep.app';\n\n      // Yetkisiz erişim hatası mock'ını ayarla\n      CloudflareMockHelper.setupFailedDnsRecordCreation('unauthorized');\n\n      // Act\n      const result = await createDnsRecord({\n        subdomain: testSubdomain,\n        rootDomain: rootDomain,\n        proxied: true,\n        ttl: 1,\n      });\n\n      // Assert\n      expect(result).toBeDefined();\n      expect(result.success).toBe(false);\n      expect(result.errors).toHaveLength(1);\n      expect(result.errors![0].message).toBe('Authentication error');\n      expect(result.errors![0].code).toBe(10000);\n    });\n\n    it('should handle rate limit errors', async () => {\n      // Arrange\n      const testSubdomain = 'ratelimit-test';\n      const rootDomain = 'i-ep.app';\n\n      // Rate limit hatası mock'ını ayarla\n      CloudflareMockHelper.setupFailedDnsRecordCreation('rateLimit');\n\n      // Act\n      const result = await createDnsRecord({\n        subdomain: testSubdomain,\n        rootDomain: rootDomain,\n        proxied: true,\n        ttl: 1,\n      });\n\n      // Assert\n      expect(result).toBeDefined();\n      expect(result.success).toBe(false);\n      expect(result.errors).toHaveLength(1);\n      expect(result.errors![0].message).toBe('Rate limit exceeded');\n      expect(result.errors![0].code).toBe(10013);\n    });\n\n    it('should handle zone not found error', async () => {\n      // Arrange\n      const testSubdomain = 'test-subdomain';\n      const rootDomain = 'nonexistent.com';\n\n      // Zone bulunamadı mock'ını ayarla\n      CloudflareMockHelper.setupZoneNotFound();\n\n      // Act\n      const result = await createDnsRecord({\n        subdomain: testSubdomain,\n        rootDomain: rootDomain,\n        proxied: true,\n        ttl: 1,\n      });\n\n      // Assert\n      expect(result).toBeDefined();\n      expect(result.success).toBe(false);\n      expect(result.errors).toHaveLength(1);\n      expect(result.errors![0].message).toContain('zone bulunamadı');\n    });\n\n    it('should create DNS record with custom TTL and proxy settings', async () => {\n      // Arrange\n      const testSubdomain = 'custom-settings-tenant';\n      const rootDomain = 'i-ep.app';\n      const customTtl = 300;\n      const proxied = false;\n\n      // Özelleştirilmiş ayarlarla DNS record oluşturma mock'ını ayarla\n      CloudflareMockHelper.setupSuccessfulDnsRecordCreation(testSubdomain);\n\n      // Act\n      const result = await createDnsRecord({\n        subdomain: testSubdomain,\n        rootDomain: rootDomain,\n        proxied: proxied,\n        ttl: customTtl,\n      });\n\n      // Assert\n      expect(result).toBeDefined();\n      expect(result.success).toBe(true);\n      expect(result.result?.name).toBe(`${testSubdomain}.${rootDomain}`);\n      expect(result.result?.ttl).toBe(1); // Mock'ta 1 olarak ayarlandı\n    });\n\n    it('should validate subdomain format before creating DNS record', async () => {\n      // Arrange\n      const invalidSubdomain = 'invalid_subdomain!@#';\n      const rootDomain = 'i-ep.app';\n\n      // Act & Assert - Invalid subdomain durumunda hata beklenir\n      await expect(\n        createDnsRecord({\n          subdomain: invalidSubdomain,\n          rootDomain: rootDomain,\n          proxied: true,\n          ttl: 1,\n        })\n      ).rejects.toThrow();\n    });\n\n    it('should handle empty subdomain gracefully', async () => {\n      // Arrange\n      const emptySubdomain = '';\n      const rootDomain = 'i-ep.app';\n\n      // Act & Assert - Boş subdomain durumunda hata beklenir\n      await expect(\n        createDnsRecord({\n          subdomain: emptySubdomain,\n          rootDomain: rootDomain,\n          proxied: true,\n          ttl: 1,\n        })\n      ).rejects.toThrow();\n    });\n  });\n\n  describe('Network Error Handling', () => {\n    it('should handle network connectivity issues', async () => {\n      // Arrange\n      const testSubdomain = 'network-error-test';\n      const rootDomain = 'i-ep.app';\n\n      // Network hatası simülasyonu için tüm istekleri reddet\n      // (nock mock'ları kurmazsan, gerçek network isteği yapılmaya çalışır ve hata verir)\n\n      // Act & Assert\n      await expect(\n        createDnsRecord({\n          subdomain: testSubdomain,\n          rootDomain: rootDomain,\n          proxied: true,\n          ttl: 1,\n        })\n      ).rejects.toThrow();\n    });\n  });\n\n  describe('DNS Record Management Integration', () => {\n    it('should create, verify and potentially delete DNS records in sequence', async () => {\n      // Bu test gerçek bir workflow'u simüle eder\n      const testSubdomain = 'workflow-test';\n      const rootDomain = 'i-ep.app';\n\n      // 1. DNS record oluşturma mock'ı\n      CloudflareMockHelper.setupSuccessfulDnsRecordCreation(testSubdomain);\n\n      // Act - DNS record oluştur\n      const createResult = await createDnsRecord({\n        subdomain: testSubdomain,\n        rootDomain: rootDomain,\n        proxied: true,\n        ttl: 1,\n      });\n\n      // Assert - Oluşturma başarılı\n      expect(createResult.success).toBe(true);\n      expect(createResult.result?.id).toBeDefined();\n\n      // 2. DNS record listesi mock'ı (doğrulama için)\n      CloudflareMockHelper.setupDnsRecordsList();\n\n      // Burada gerçek implementasyonda DNS record'ların listesini alıp\n      // oluşturulan record'ın var olduğunu doğrulayabiliriz\n\n      // 3. DNS record silme mock'ı (cleanup için)\n      if (createResult.result?.id) {\n        CloudflareMockHelper.setupDnsRecordDeletion(createResult.result.id);\n      }\n\n      // Bu noktada gerçek implementasyonda record'ı silebiliriz\n      // Şimdilik mock'ların doğru kurulduğunu test ettik\n    });\n  });\n});\n"],"names":["describe","beforeAll","TestEnvironmentHelper","setupTestEnvironment","setupMockServer","beforeEach","cleanup","afterEach","afterAll","teardown","it","testSubdomain","rootDomain","CloudflareMockHelper","setupSuccessfulDnsRecordCreation","result","createDnsRecord","subdomain","proxied","ttl","expect","toBeDefined","success","toBe","errors","toHaveLength","name","type","setupFailedDnsRecordCreation","message","code","setupZoneNotFound","toContain","customTtl","invalidSubdomain","rejects","toThrow","emptySubdomain","createResult","id","setupDnsRecordsList","setupDnsRecordDeletion"],"mappings":"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"}