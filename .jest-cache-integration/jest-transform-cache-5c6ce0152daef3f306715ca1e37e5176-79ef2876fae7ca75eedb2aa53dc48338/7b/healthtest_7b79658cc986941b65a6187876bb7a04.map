{"version":3,"sources":["/Users/turanmusabosman/Projects/i-ep.app/src/__tests__/integration/quarantine/health.test.ts"],"sourcesContent":["import { describe, it, expect, beforeEach } from '@jest/globals';\n\n// NextResponse mock'la\njest.mock('next/server', () => ({\n  NextResponse: {\n    json: jest.fn((data, init) => ({\n      json: jest.fn().mockResolvedValue(data),\n      status: init?.status || 200,\n      ok: (init?.status || 200) < 400,\n    })),\n  },\n}));\n\n// Supabase client mock'la\njest.mock('@/lib/supabase/client', () => ({\n  supabase: {\n    from: jest.fn(),\n  },\n}));\n\nimport { supabase } from '@/lib/supabase/client';\nimport { GET as healthGET } from '@/app/api/health/route';\nimport { GET as readyGET } from '@/app/api/ready/route';\n\ndescribe('Health Check API Endpoints', () => {\n  beforeEach(() => {\n    jest.clearAllMocks();\n  });\n\n  describe('GET /api/health', () => {\n    it('başarılı health check döndürmelidir', async () => {\n      // Act\n      const response = await healthGET();\n      const data = await response.json();\n\n      // Assert\n      expect(response.status).toBe(200);\n      expect(data.status).toBe('healthy');\n      expect(data).toHaveProperty('timestamp');\n      expect(data).toHaveProperty('version');\n      expect(data.version).toBe('0.1.0');\n      expect(data.checks).toEqual({\n        database: 'healthy',\n        redis: 'healthy',\n        externalApis: 'healthy',\n      });\n    });\n  });\n\n  describe('GET /api/ready', () => {\n    it('başarılı DB bağlantısında ready status döndürmelidir', async () => {\n      // Arrange - Supabase mock'ını başarılı response için ayarla\n      const mockSelect = jest.fn().mockReturnValue({\n        limit: jest.fn().mockReturnValue({\n          single: jest.fn().mockResolvedValue({ data: null, error: null }),\n        }),\n      });\n      (supabase.from as jest.Mock).mockReturnValue({\n        select: mockSelect,\n      });\n\n      // Act\n      const response = await readyGET();\n      const data = await response.json();\n\n      // Assert\n      expect(response.status).toBe(200);\n      expect(data.status).toBe('ready');\n      expect(data.dbConnection).toBe(true);\n      expect(data).toHaveProperty('timestamp');\n    });\n\n    it('DB bağlantı hatası durumunda not_ready status döndürmelidir', async () => {\n      // Arrange - Supabase mock'ını hata response için ayarla\n      const mockSelect = jest.fn().mockReturnValue({\n        limit: jest.fn().mockReturnValue({\n          single: jest.fn().mockResolvedValue({\n            data: null,\n            error: { message: 'Database connection failed' },\n          }),\n        }),\n      });\n      (supabase.from as jest.Mock).mockReturnValue({\n        select: mockSelect,\n      });\n\n      // Act\n      const response = await readyGET();\n      const data = await response.json();\n\n      // Assert\n      expect(response.status).toBe(503);\n      expect(data.status).toBe('not_ready');\n      expect(data.dbConnection).toBe(false);\n      expect(data).toHaveProperty('timestamp');\n    });\n\n    it('exception fırlatıldığında not_ready status döndürmelidir', async () => {\n      // Arrange - Supabase mock'ını exception fırlatacak şekilde ayarla\n      (supabase.from as jest.Mock).mockImplementation(() => {\n        throw new Error('Connection timeout');\n      });\n\n      // Act\n      const response = await readyGET();\n      const data = await response.json();\n\n      // Assert\n      expect(response.status).toBe(503);\n      expect(data.status).toBe('not_ready');\n      expect(data.dbConnection).toBe(false);\n      expect(data).toHaveProperty('timestamp');\n    });\n  });\n});\n"],"names":["jest","mock","NextResponse","json","fn","data","init","mockResolvedValue","status","ok","supabase","from","describe","beforeEach","clearAllMocks","it","response","healthGET","expect","toBe","toHaveProperty","version","checks","toEqual","database","redis","externalApis","mockSelect","mockReturnValue","limit","single","error","select","readyGET","dbConnection","message","mockImplementation","Error"],"mappings":"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"}