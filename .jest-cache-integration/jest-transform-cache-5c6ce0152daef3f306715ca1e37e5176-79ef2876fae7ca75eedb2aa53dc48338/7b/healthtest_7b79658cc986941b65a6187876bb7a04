6b1f6bd8e8a9c48ff6d81ff63dfcb0bd
"use strict";
// NextResponse mock'la
jest.mock('next/server', ()=>({
        NextResponse: {
            json: jest.fn((data, init)=>({
                    json: jest.fn().mockResolvedValue(data),
                    status: init?.status || 200,
                    ok: (init?.status || 200) < 400
                }))
        }
    }));
// Supabase client mock'la
jest.mock('@/lib/supabase/client', ()=>({
        supabase: {
            from: jest.fn()
        }
    }));
Object.defineProperty(exports, "__esModule", {
    value: true
});
const _globals = require("@jest/globals");
const _client = require("../../../lib/supabase/client");
const _route = require("../../../app/api/health/route");
const _route1 = require("../../../app/api/ready/route");
(0, _globals.describe)('Health Check API Endpoints', ()=>{
    (0, _globals.beforeEach)(()=>{
        jest.clearAllMocks();
    });
    (0, _globals.describe)('GET /api/health', ()=>{
        (0, _globals.it)('başarılı health check döndürmelidir', async ()=>{
            // Act
            const response = await (0, _route.GET)();
            const data = await response.json();
            // Assert
            (0, _globals.expect)(response.status).toBe(200);
            (0, _globals.expect)(data.status).toBe('healthy');
            (0, _globals.expect)(data).toHaveProperty('timestamp');
            (0, _globals.expect)(data).toHaveProperty('version');
            (0, _globals.expect)(data.version).toBe('0.1.0');
            (0, _globals.expect)(data.checks).toEqual({
                database: 'healthy',
                redis: 'healthy',
                externalApis: 'healthy'
            });
        });
    });
    (0, _globals.describe)('GET /api/ready', ()=>{
        (0, _globals.it)('başarılı DB bağlantısında ready status döndürmelidir', async ()=>{
            // Arrange - Supabase mock'ını başarılı response için ayarla
            const mockSelect = jest.fn().mockReturnValue({
                limit: jest.fn().mockReturnValue({
                    single: jest.fn().mockResolvedValue({
                        data: null,
                        error: null
                    })
                })
            });
            _client.supabase.from.mockReturnValue({
                select: mockSelect
            });
            // Act
            const response = await (0, _route1.GET)();
            const data = await response.json();
            // Assert
            (0, _globals.expect)(response.status).toBe(200);
            (0, _globals.expect)(data.status).toBe('ready');
            (0, _globals.expect)(data.dbConnection).toBe(true);
            (0, _globals.expect)(data).toHaveProperty('timestamp');
        });
        (0, _globals.it)('DB bağlantı hatası durumunda not_ready status döndürmelidir', async ()=>{
            // Arrange - Supabase mock'ını hata response için ayarla
            const mockSelect = jest.fn().mockReturnValue({
                limit: jest.fn().mockReturnValue({
                    single: jest.fn().mockResolvedValue({
                        data: null,
                        error: {
                            message: 'Database connection failed'
                        }
                    })
                })
            });
            _client.supabase.from.mockReturnValue({
                select: mockSelect
            });
            // Act
            const response = await (0, _route1.GET)();
            const data = await response.json();
            // Assert
            (0, _globals.expect)(response.status).toBe(503);
            (0, _globals.expect)(data.status).toBe('not_ready');
            (0, _globals.expect)(data.dbConnection).toBe(false);
            (0, _globals.expect)(data).toHaveProperty('timestamp');
        });
        (0, _globals.it)('exception fırlatıldığında not_ready status döndürmelidir', async ()=>{
            // Arrange - Supabase mock'ını exception fırlatacak şekilde ayarla
            _client.supabase.from.mockImplementation(()=>{
                throw new Error('Connection timeout');
            });
            // Act
            const response = await (0, _route1.GET)();
            const data = await response.json();
            // Assert
            (0, _globals.expect)(response.status).toBe(503);
            (0, _globals.expect)(data.status).toBe('not_ready');
            (0, _globals.expect)(data.dbConnection).toBe(false);
            (0, _globals.expect)(data).toHaveProperty('timestamp');
        });
    });
});

//# sourceMappingURL=data:application/json;base64,