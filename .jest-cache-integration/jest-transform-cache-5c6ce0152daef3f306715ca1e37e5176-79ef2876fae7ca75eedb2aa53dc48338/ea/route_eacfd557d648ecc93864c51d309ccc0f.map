{"version":3,"sources":["/Users/turanmusabosman/Projects/i-ep.app/src/app/api/debug-auth/route.ts"],"sourcesContent":["/**\n * Debug Authentication API\n * Tests authentication state for debugging purposes\n */\n\nimport { NextRequest, NextResponse } from 'next/server';\nimport { getServerSession } from 'next-auth/next';\nimport { authOptions } from '@/app/api/auth/[...nextauth]/route';\nimport { createServerSupabaseClient } from '@/lib/supabase/server';\nimport { getAuthenticatedUser, getTenantIdFromHeaders } from '@/lib/auth/server-session';\n\nexport async function GET(request: NextRequest) {\n  try {\n    console.log('ðŸ”§ Debug Auth: Starting authentication debug...');\n\n    // 1. Test NextAuth session\n    const nextAuthSession = await getServerSession(authOptions);\n    console.log('ðŸ”§ Debug Auth: NextAuth session:', nextAuthSession ? 'EXISTS' : 'NULL');\n\n    // 2. Test Supabase session\n    const supabase = createServerSupabaseClient();\n    const {\n      data: { session: supabaseSession },\n      error: supabaseError,\n    } = await supabase.auth.getSession();\n    console.log(\n      'ðŸ”§ Debug Auth: Supabase session:',\n      supabaseSession ? 'EXISTS' : 'NULL',\n      supabaseError ? `ERROR: ${supabaseError.message}` : 'NO ERROR'\n    );\n\n    // 3. Test hybrid auth function\n    const hybridUser = await getAuthenticatedUser(request);\n    console.log('ðŸ”§ Debug Auth: Hybrid user:', hybridUser ? 'EXISTS' : 'NULL');\n\n    // 4. Test tenant headers\n    const tenantId = getTenantIdFromHeaders(request);\n    console.log('ðŸ”§ Debug Auth: Tenant ID from headers:', tenantId);\n\n    // 5. Check cookies\n    const cookies = request.cookies.getAll();\n    console.log('ðŸ”§ Debug Auth: Cookies count:', cookies.length);\n\n    // 6. Check headers\n    const authHeader = request.headers.get('authorization');\n    const host = request.headers.get('host');\n    console.log('ðŸ”§ Debug Auth: Auth header:', authHeader ? 'EXISTS' : 'NULL');\n    console.log('ðŸ”§ Debug Auth: Host:', host);\n\n    return NextResponse.json({\n      debug: {\n        nextAuth: {\n          hasSession: !!nextAuthSession,\n          user: nextAuthSession?.user\n            ? {\n                email: nextAuthSession.user.email,\n                role: (nextAuthSession.user as any).role,\n              }\n            : null,\n        },\n        supabase: {\n          hasSession: !!supabaseSession,\n          error: supabaseError?.message || null,\n          user: supabaseSession?.user\n            ? {\n                email: supabaseSession.user.email,\n                role:\n                  supabaseSession.user.app_metadata?.role ||\n                  supabaseSession.user.user_metadata?.role,\n              }\n            : null,\n        },\n        hybrid: {\n          hasUser: !!hybridUser,\n          user: hybridUser\n            ? {\n                email: hybridUser.email,\n                role: hybridUser.role,\n                tenantId: hybridUser.tenantId,\n              }\n            : null,\n        },\n        request: {\n          tenantId: tenantId,\n          host: host,\n          hasAuthHeader: !!authHeader,\n          cookieCount: cookies.length,\n          cookies: cookies.map((c) => ({ name: c.name, hasValue: !!c.value })),\n        },\n        timestamp: new Date().toISOString(),\n      },\n    });\n  } catch (error) {\n    console.error('ðŸ”§ Debug Auth: Error:', error);\n    return NextResponse.json(\n      {\n        error: error instanceof Error ? error.message : 'Unknown error',\n        timestamp: new Date().toISOString(),\n      },\n      { status: 500 }\n    );\n  }\n}\n"],"names":["GET","request","console","log","nextAuthSession","getServerSession","authOptions","supabase","createServerSupabaseClient","data","session","supabaseSession","error","supabaseError","auth","getSession","message","hybridUser","getAuthenticatedUser","tenantId","getTenantIdFromHeaders","cookies","getAll","length","authHeader","headers","get","host","NextResponse","json","debug","nextAuth","hasSession","user","email","role","app_metadata","user_metadata","hybrid","hasUser","hasAuthHeader","cookieCount","map","c","name","hasValue","value","timestamp","Date","toISOString","Error","status"],"mappings":"AAAA;;;CAGC;;;;+BAQqBA;;;eAAAA;;;wBANoB;sBACT;uBACL;yBACe;+BACkB;AAEtD,eAAeA,IAAIC,OAAoB;IAC5C,IAAI;QACFC,QAAQC,GAAG,CAAC;QAEZ,2BAA2B;QAC3B,MAAMC,kBAAkB,MAAMC,IAAAA,sBAAgB,EAACC,kBAAW;QAC1DJ,QAAQC,GAAG,CAAC,oCAAoCC,kBAAkB,WAAW;QAE7E,2BAA2B;QAC3B,MAAMG,WAAWC,IAAAA,mCAA0B;QAC3C,MAAM,EACJC,MAAM,EAAEC,SAASC,eAAe,EAAE,EAClCC,OAAOC,aAAa,EACrB,GAAG,MAAMN,SAASO,IAAI,CAACC,UAAU;QAClCb,QAAQC,GAAG,CACT,oCACAQ,kBAAkB,WAAW,QAC7BE,gBAAgB,CAAC,OAAO,EAAEA,cAAcG,OAAO,EAAE,GAAG;QAGtD,+BAA+B;QAC/B,MAAMC,aAAa,MAAMC,IAAAA,mCAAoB,EAACjB;QAC9CC,QAAQC,GAAG,CAAC,+BAA+Bc,aAAa,WAAW;QAEnE,yBAAyB;QACzB,MAAME,WAAWC,IAAAA,qCAAsB,EAACnB;QACxCC,QAAQC,GAAG,CAAC,0CAA0CgB;QAEtD,mBAAmB;QACnB,MAAME,UAAUpB,QAAQoB,OAAO,CAACC,MAAM;QACtCpB,QAAQC,GAAG,CAAC,iCAAiCkB,QAAQE,MAAM;QAE3D,mBAAmB;QACnB,MAAMC,aAAavB,QAAQwB,OAAO,CAACC,GAAG,CAAC;QACvC,MAAMC,OAAO1B,QAAQwB,OAAO,CAACC,GAAG,CAAC;QACjCxB,QAAQC,GAAG,CAAC,+BAA+BqB,aAAa,WAAW;QACnEtB,QAAQC,GAAG,CAAC,wBAAwBwB;QAEpC,OAAOC,oBAAY,CAACC,IAAI,CAAC;YACvBC,OAAO;gBACLC,UAAU;oBACRC,YAAY,CAAC,CAAC5B;oBACd6B,MAAM7B,iBAAiB6B,OACnB;wBACEC,OAAO9B,gBAAgB6B,IAAI,CAACC,KAAK;wBACjCC,MAAM,AAAC/B,gBAAgB6B,IAAI,CAASE,IAAI;oBAC1C,IACA;gBACN;gBACA5B,UAAU;oBACRyB,YAAY,CAAC,CAACrB;oBACdC,OAAOC,eAAeG,WAAW;oBACjCiB,MAAMtB,iBAAiBsB,OACnB;wBACEC,OAAOvB,gBAAgBsB,IAAI,CAACC,KAAK;wBACjCC,MACExB,gBAAgBsB,IAAI,CAACG,YAAY,EAAED,QACnCxB,gBAAgBsB,IAAI,CAACI,aAAa,EAAEF;oBACxC,IACA;gBACN;gBACAG,QAAQ;oBACNC,SAAS,CAAC,CAACtB;oBACXgB,MAAMhB,aACF;wBACEiB,OAAOjB,WAAWiB,KAAK;wBACvBC,MAAMlB,WAAWkB,IAAI;wBACrBhB,UAAUF,WAAWE,QAAQ;oBAC/B,IACA;gBACN;gBACAlB,SAAS;oBACPkB,UAAUA;oBACVQ,MAAMA;oBACNa,eAAe,CAAC,CAAChB;oBACjBiB,aAAapB,QAAQE,MAAM;oBAC3BF,SAASA,QAAQqB,GAAG,CAAC,CAACC,IAAO,CAAA;4BAAEC,MAAMD,EAAEC,IAAI;4BAAEC,UAAU,CAAC,CAACF,EAAEG,KAAK;wBAAC,CAAA;gBACnE;gBACAC,WAAW,IAAIC,OAAOC,WAAW;YACnC;QACF;IACF,EAAE,OAAOrC,OAAO;QACdV,QAAQU,KAAK,CAAC,yBAAyBA;QACvC,OAAOgB,oBAAY,CAACC,IAAI,CACtB;YACEjB,OAAOA,iBAAiBsC,QAAQtC,MAAMI,OAAO,GAAG;YAChD+B,WAAW,IAAIC,OAAOC,WAAW;QACnC,GACA;YAAEE,QAAQ;QAAI;IAElB;AACF"}