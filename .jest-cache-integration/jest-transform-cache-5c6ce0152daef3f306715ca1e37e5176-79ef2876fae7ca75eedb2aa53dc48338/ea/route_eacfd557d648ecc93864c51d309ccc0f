a9d575fc9da53070ac8a523aef03732f
/**
 * Debug Authentication API
 * Tests authentication state for debugging purposes
 */ "use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "GET", {
    enumerable: true,
    get: function() {
        return GET;
    }
});
const _server = require("next/server");
const _next = require("next-auth/next");
const _route = require("../auth/[...nextauth]/route");
const _server1 = require("../../../lib/supabase/server");
const _serversession = require("../../../lib/auth/server-session");
async function GET(request) {
    try {
        console.log('ðŸ”§ Debug Auth: Starting authentication debug...');
        // 1. Test NextAuth session
        const nextAuthSession = await (0, _next.getServerSession)(_route.authOptions);
        console.log('ðŸ”§ Debug Auth: NextAuth session:', nextAuthSession ? 'EXISTS' : 'NULL');
        // 2. Test Supabase session
        const supabase = (0, _server1.createServerSupabaseClient)();
        const { data: { session: supabaseSession }, error: supabaseError } = await supabase.auth.getSession();
        console.log('ðŸ”§ Debug Auth: Supabase session:', supabaseSession ? 'EXISTS' : 'NULL', supabaseError ? `ERROR: ${supabaseError.message}` : 'NO ERROR');
        // 3. Test hybrid auth function
        const hybridUser = await (0, _serversession.getAuthenticatedUser)(request);
        console.log('ðŸ”§ Debug Auth: Hybrid user:', hybridUser ? 'EXISTS' : 'NULL');
        // 4. Test tenant headers
        const tenantId = (0, _serversession.getTenantIdFromHeaders)(request);
        console.log('ðŸ”§ Debug Auth: Tenant ID from headers:', tenantId);
        // 5. Check cookies
        const cookies = request.cookies.getAll();
        console.log('ðŸ”§ Debug Auth: Cookies count:', cookies.length);
        // 6. Check headers
        const authHeader = request.headers.get('authorization');
        const host = request.headers.get('host');
        console.log('ðŸ”§ Debug Auth: Auth header:', authHeader ? 'EXISTS' : 'NULL');
        console.log('ðŸ”§ Debug Auth: Host:', host);
        return _server.NextResponse.json({
            debug: {
                nextAuth: {
                    hasSession: !!nextAuthSession,
                    user: nextAuthSession?.user ? {
                        email: nextAuthSession.user.email,
                        role: nextAuthSession.user.role
                    } : null
                },
                supabase: {
                    hasSession: !!supabaseSession,
                    error: supabaseError?.message || null,
                    user: supabaseSession?.user ? {
                        email: supabaseSession.user.email,
                        role: supabaseSession.user.app_metadata?.role || supabaseSession.user.user_metadata?.role
                    } : null
                },
                hybrid: {
                    hasUser: !!hybridUser,
                    user: hybridUser ? {
                        email: hybridUser.email,
                        role: hybridUser.role,
                        tenantId: hybridUser.tenantId
                    } : null
                },
                request: {
                    tenantId: tenantId,
                    host: host,
                    hasAuthHeader: !!authHeader,
                    cookieCount: cookies.length,
                    cookies: cookies.map((c)=>({
                            name: c.name,
                            hasValue: !!c.value
                        }))
                },
                timestamp: new Date().toISOString()
            }
        });
    } catch (error) {
        console.error('ðŸ”§ Debug Auth: Error:', error);
        return _server.NextResponse.json({
            error: error instanceof Error ? error.message : 'Unknown error',
            timestamp: new Date().toISOString()
        }, {
            status: 500
        });
    }
}

//# sourceMappingURL=data:application/json;base64,