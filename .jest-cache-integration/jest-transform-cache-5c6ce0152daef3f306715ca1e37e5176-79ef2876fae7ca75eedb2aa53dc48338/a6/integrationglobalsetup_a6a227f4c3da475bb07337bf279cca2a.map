{"version":3,"sources":["/Users/turanmusabosman/Projects/i-ep.app/test-utils/integration-global-setup.js"],"sourcesContent":["/* eslint-disable @typescript-eslint/no-require-imports */\n/**\n * ƒ∞-EP.APP - Integration Tests Global Setup\n * T√ºm integration testleri √∂ncesinde √ßalƒ±≈üƒ±r\n */\n\nconst { IntegrationTestManager } = require('./integration-test-setup');\n\nmodule.exports = async () => {\n  console.log('üöÄ Starting integration tests global setup...');\n  \n  // CRITICAL: Load environment variables FIRST before Next.js wrapper can interfere\n  const { config } = require('dotenv');\n  const path = require('path');\n  \n  const envPath = path.resolve(process.cwd(), '.env.test');\n  console.log('üîß Loading .env.test from globalSetup:', envPath);\n  \n  const result = config({ path: envPath, override: true });\n  \n  // MANUAL environment variable setting for critical ones\n  if (!process.env.NEXT_PUBLIC_SUPABASE_URL) {\n    process.env.NEXT_PUBLIC_SUPABASE_URL = 'http://localhost:54321';\n  }\n  if (!process.env.SUPABASE_SERVICE_ROLE_KEY) {\n    process.env.SUPABASE_SERVICE_ROLE_KEY = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZS1kZW1vIiwicm9sZSI6InNlcnZpY2Vfcm9sZSIsImV4cCI6MTk4MzgxMjk5Nn0.EGIM96RAZx35lJzdJsyH-qQwv8Hdp7fsn3W0YpN81IU';\n  }\n  if (!process.env.REDIS_URL) {\n    process.env.REDIS_URL = 'redis://localhost:6379';\n  }\n  if (!process.env.TEST_TENANT_ID) {\n    process.env.TEST_TENANT_ID = 'aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa';\n  }\n  \n  console.log('‚úÖ Global environment setup completed');\n  console.log('üìä SUPABASE_URL:', process.env.NEXT_PUBLIC_SUPABASE_URL);\n  console.log('üîÑ REDIS_URL:', process.env.REDIS_URL);\n  \n  const startTime = Date.now();\n  \n  try {\n    // Create test manager instance\n    const testManager = new IntegrationTestManager();\n    \n    // Test database connection\n    console.log('üîç Testing database connection...');\n    const dbTest = await testManager.testDatabaseConnection();\n    if (!dbTest.success) {\n      throw new Error(`Database connection failed: ${dbTest.error}`);\n    }\n    console.log('‚úÖ Database connection successful');\n    \n    // Test Redis connection\n    console.log('üîç Testing Redis connection...');\n    const redisTest = await testManager.testRedisConnection();\n    if (!redisTest.success) {\n      console.warn('‚ö†Ô∏è  Redis connection failed:', redisTest.error);\n      console.warn('‚ö†Ô∏è  Some tests may fail if they require Redis');\n    } else {\n      console.log('‚úÖ Redis connection successful');\n    }\n    \n    // Setup clean test environment\n    console.log('üßπ Setting up clean test environment...');\n    await testManager.setupTestEnvironment();\n    \n    // Store global test manager for cleanup\n    global.__INTEGRATION_TEST_MANAGER__ = testManager;\n    \n    const endTime = Date.now();\n    console.log(`‚úÖ Integration tests global setup completed in ${endTime - startTime}ms`);\n    console.log('üéØ Environment ready for integration testing');\n    \n  } catch (error) {\n    console.error('‚ùå Integration tests global setup failed:', error.message);\n    console.error('');\n    console.error('üîß Common solutions:');\n    console.error('   1. Make sure Supabase is running: npx supabase start');\n    console.error('   2. Make sure Redis is running: redis-server');\n    console.error('   3. Check .env.test file has correct DATABASE_URL and REDIS_URL');\n    console.error('   4. Verify test database is accessible');\n    console.error('');\n    \n    // Don't fail immediately, let individual tests handle connection errors\n    console.warn('‚ö†Ô∏è  Continuing with setup warnings...');\n  }\n};"],"names":["IntegrationTestManager","require","module","exports","console","log","config","path","envPath","resolve","process","cwd","result","override","env","NEXT_PUBLIC_SUPABASE_URL","SUPABASE_SERVICE_ROLE_KEY","REDIS_URL","TEST_TENANT_ID","startTime","Date","now","testManager","dbTest","testDatabaseConnection","success","Error","error","redisTest","testRedisConnection","warn","setupTestEnvironment","global","__INTEGRATION_TEST_MANAGER__","endTime","message"],"mappings":"AAAA,wDAAwD,GACxD;;;CAGC;AAED,MAAM,EAAEA,sBAAsB,EAAE,GAAGC,QAAQ;AAE3CC,OAAOC,OAAO,GAAG;IACfC,QAAQC,GAAG,CAAC;IAEZ,kFAAkF;IAClF,MAAM,EAAEC,MAAM,EAAE,GAAGL,QAAQ;IAC3B,MAAMM,OAAON,QAAQ;IAErB,MAAMO,UAAUD,KAAKE,OAAO,CAACC,QAAQC,GAAG,IAAI;IAC5CP,QAAQC,GAAG,CAAC,0CAA0CG;IAEtD,MAAMI,SAASN,OAAO;QAAEC,MAAMC;QAASK,UAAU;IAAK;IAEtD,wDAAwD;IACxD,IAAI,CAACH,QAAQI,GAAG,CAACC,wBAAwB,EAAE;QACzCL,QAAQI,GAAG,CAACC,wBAAwB,GAAG;IACzC;IACA,IAAI,CAACL,QAAQI,GAAG,CAACE,yBAAyB,EAAE;QAC1CN,QAAQI,GAAG,CAACE,yBAAyB,GAAG;IAC1C;IACA,IAAI,CAACN,QAAQI,GAAG,CAACG,SAAS,EAAE;QAC1BP,QAAQI,GAAG,CAACG,SAAS,GAAG;IAC1B;IACA,IAAI,CAACP,QAAQI,GAAG,CAACI,cAAc,EAAE;QAC/BR,QAAQI,GAAG,CAACI,cAAc,GAAG;IAC/B;IAEAd,QAAQC,GAAG,CAAC;IACZD,QAAQC,GAAG,CAAC,oBAAoBK,QAAQI,GAAG,CAACC,wBAAwB;IACpEX,QAAQC,GAAG,CAAC,iBAAiBK,QAAQI,GAAG,CAACG,SAAS;IAElD,MAAME,YAAYC,KAAKC,GAAG;IAE1B,IAAI;QACF,+BAA+B;QAC/B,MAAMC,cAAc,IAAItB;QAExB,2BAA2B;QAC3BI,QAAQC,GAAG,CAAC;QACZ,MAAMkB,SAAS,MAAMD,YAAYE,sBAAsB;QACvD,IAAI,CAACD,OAAOE,OAAO,EAAE;YACnB,MAAM,IAAIC,MAAM,CAAC,4BAA4B,EAAEH,OAAOI,KAAK,EAAE;QAC/D;QACAvB,QAAQC,GAAG,CAAC;QAEZ,wBAAwB;QACxBD,QAAQC,GAAG,CAAC;QACZ,MAAMuB,YAAY,MAAMN,YAAYO,mBAAmB;QACvD,IAAI,CAACD,UAAUH,OAAO,EAAE;YACtBrB,QAAQ0B,IAAI,CAAC,gCAAgCF,UAAUD,KAAK;YAC5DvB,QAAQ0B,IAAI,CAAC;QACf,OAAO;YACL1B,QAAQC,GAAG,CAAC;QACd;QAEA,+BAA+B;QAC/BD,QAAQC,GAAG,CAAC;QACZ,MAAMiB,YAAYS,oBAAoB;QAEtC,wCAAwC;QACxCC,OAAOC,4BAA4B,GAAGX;QAEtC,MAAMY,UAAUd,KAAKC,GAAG;QACxBjB,QAAQC,GAAG,CAAC,CAAC,8CAA8C,EAAE6B,UAAUf,UAAU,EAAE,CAAC;QACpFf,QAAQC,GAAG,CAAC;IAEd,EAAE,OAAOsB,OAAO;QACdvB,QAAQuB,KAAK,CAAC,4CAA4CA,MAAMQ,OAAO;QACvE/B,QAAQuB,KAAK,CAAC;QACdvB,QAAQuB,KAAK,CAAC;QACdvB,QAAQuB,KAAK,CAAC;QACdvB,QAAQuB,KAAK,CAAC;QACdvB,QAAQuB,KAAK,CAAC;QACdvB,QAAQuB,KAAK,CAAC;QACdvB,QAAQuB,KAAK,CAAC;QAEd,wEAAwE;QACxEvB,QAAQ0B,IAAI,CAAC;IACf;AACF"}