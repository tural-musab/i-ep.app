{"version":3,"sources":["/Users/turanmusabosman/Projects/i-ep.app/src/app/api/grades/route.ts"],"sourcesContent":["/**\n * Grade API - Main Route\n * Ä°-EP.APP - Grade Management System\n *\n * Endpoints:\n * - GET /api/grades - List grades with filtering and analytics\n * - POST /api/grades - Create new grade record or bulk create\n */\n\nimport { NextRequest, NextResponse } from 'next/server';\nimport { GradeRepository } from '@/lib/repository/grade-repository';\nimport { z } from 'zod';\n\n// Validation schemas\nconst GradeCreateSchema = z.object({\n  studentId: z.string().uuid('Invalid student ID'),\n  classId: z.string().uuid('Invalid class ID'),\n  subjectId: z.string().uuid('Invalid subject ID'),\n  assignmentId: z.string().uuid().optional(),\n  gradeType: z.enum(['exam', 'homework', 'project', 'participation', 'quiz', 'midterm', 'final']),\n  gradeValue: z.number().min(0, 'Grade value must be positive'),\n  maxGrade: z.number().min(1, 'Max grade must be at least 1'),\n  weight: z.number().min(0).max(1).optional().default(1.0),\n  examName: z.string().optional(),\n  description: z.string().optional(),\n  semester: z.number().int().min(1).max(2),\n  academicYear: z.string().regex(/^\\d{4}-\\d{4}$/, 'Invalid academic year format'),\n  gradeDate: z.string().optional(),\n});\n\nconst GradeQuerySchema = z.object({\n  studentId: z.string().uuid().optional(),\n  classId: z.string().uuid().optional(),\n  subjectId: z.string().uuid().optional(),\n  teacherId: z.string().uuid().optional(),\n  gradeType: z\n    .enum(['exam', 'homework', 'project', 'participation', 'quiz', 'midterm', 'final'])\n    .optional(),\n  semester: z.string().transform(Number).optional(),\n  academicYear: z.string().optional(),\n  startDate: z.string().optional(),\n  endDate: z.string().optional(),\n  minGrade: z.string().transform(Number).optional(),\n  maxGrade: z.string().transform(Number).optional(),\n  includeCalculations: z.string().transform(Boolean).optional().default(false),\n  includeComments: z.string().transform(Boolean).optional().default(false),\n  limit: z.string().transform(Number).optional(),\n  offset: z.string().transform(Number).optional(),\n});\n\nconst GradeBulkCreateSchema = z.object({\n  classId: z.string().uuid('Invalid class ID'),\n  subjectId: z.string().uuid('Invalid subject ID'),\n  gradeType: z.enum(['exam', 'homework', 'project', 'participation', 'quiz', 'midterm', 'final']),\n  examName: z.string().optional(),\n  maxGrade: z.number().min(1, 'Max grade must be at least 1'),\n  weight: z.number().min(0).max(1).optional().default(1.0),\n  semester: z.number().int().min(1).max(2),\n  academicYear: z.string().regex(/^\\d{4}-\\d{4}$/, 'Invalid academic year format'),\n  gradeDate: z.string().optional(),\n  grades: z\n    .array(\n      z.object({\n        studentId: z.string().uuid('Invalid student ID'),\n        gradeValue: z.number().min(0, 'Grade value must be positive'),\n        description: z.string().optional(),\n      })\n    )\n    .min(1, 'At least one grade is required'),\n});\n\n/**\n * GET /api/grades\n * Retrieve grades with filtering, sorting, and analytics\n */\nexport async function GET(request: NextRequest) {\n  try {\n    // Extract authentication headers - Modern Pattern\n    const userEmail = request.headers.get('X-User-Email') || 'teacher1@demo.local';\n    const userId = request.headers.get('X-User-ID') || 'demo-teacher-001';\n    const tenantId = request.headers.get('x-tenant-id') || 'localhost-tenant';\n\n    console.log('ðŸ”§ Grades API - Auth headers:', { userEmail, userId, tenantId });\n\n    // For demo, return mock grade data\n    const mockGrades = [\n      {\n        id: 'grade-001',\n        student_id: 'student-001',\n        student_name: 'Ahmet YILMAZ',\n        class_id: 'class-5a',\n        subject_id: 'subject-turkish',\n        subject_name: 'TÃ¼rkÃ§e',\n        assignment_id: 'assignment-001',\n        grade_type: 'homework',\n        grade_value: 85,\n        max_grade: 100,\n        weight: 1.0,\n        exam_name: 'Kompozisyon Ã–devi',\n        description: 'Okulum konulu kompozisyon',\n        semester: 1,\n        academic_year: '2024-2025',\n        grade_date: new Date().toISOString(),\n        teacher_id: userId,\n        tenant_id: tenantId,\n        created_at: new Date().toISOString()\n      },\n      {\n        id: 'grade-002',\n        student_id: 'student-002',\n        student_name: 'AyÅŸe KAYA',\n        class_id: 'class-5a',\n        subject_id: 'subject-math',\n        subject_name: 'Matematik',\n        assignment_id: 'assignment-002',\n        grade_type: 'homework',\n        grade_value: 92,\n        max_grade: 100,\n        weight: 1.0,\n        exam_name: 'Kesirler Ã‡alÄ±ÅŸmasÄ±',\n        description: 'Kesirlerle iÅŸlemler',\n        semester: 1,\n        academic_year: '2024-2025',\n        grade_date: new Date().toISOString(),\n        teacher_id: userId,\n        tenant_id: tenantId,\n        created_at: new Date().toISOString()\n      }\n    ];\n\n    const result = {\n      data: mockGrades,\n      pagination: {\n        total: mockGrades.length,\n        page: 1,\n        limit: 10,\n        totalPages: 1,\n        hasNextPage: false,\n        hasPreviousPage: false\n      }\n    };\n\n    console.log('âœ… Grades API - Returning mock data:', result);\n    return NextResponse.json(result);\n  } catch (error) {\n    console.error('Error fetching grades:', error);\n    return NextResponse.json({ error: 'Failed to fetch grades' }, { status: 500 });\n  }\n}\n\n/**\n * POST /api/grades\n * Create new grade record or bulk create grades\n */\nexport async function POST(request: NextRequest) {\n  try {\n    const tenantId = getTenantId();\n    const supabase = await createServerSupabaseClient();\n\n    // Verify authentication\n    const {\n      data: { session },\n      error: authError,\n    } = await supabase.auth.getSession();\n    if (authError || !session) {\n      return NextResponse.json({ error: 'Authentication required' }, { status: 401 });\n    }\n\n    const body = await request.json();\n    const gradeRepo = new GradeRepository(supabase, tenantId);\n\n    // Check if this is a bulk create request\n    if (body.grades && Array.isArray(body.grades)) {\n      // Bulk create\n      const validatedData = GradeBulkCreateSchema.parse(body);\n\n      // Verify user has permission to grade this class and subject\n      const hasPermission = await gradeRepo.verifyGradingPermission(\n        validatedData.classId,\n        validatedData.subjectId,\n        session.user.id\n      );\n\n      if (!hasPermission) {\n        return NextResponse.json(\n          { error: 'Insufficient permissions to grade this class and subject' },\n          { status: 403 }\n        );\n      }\n\n      // Create bulk grades\n      const createdGrades = await gradeRepo.createBulkGrades(\n        validatedData.classId,\n        validatedData.subjectId,\n        {\n          gradeType: validatedData.gradeType,\n          examName: validatedData.examName,\n          maxGrade: validatedData.maxGrade,\n          weight: validatedData.weight,\n          semester: validatedData.semester,\n          academicYear: validatedData.academicYear,\n          gradeDate: validatedData.gradeDate ? new Date(validatedData.gradeDate) : new Date(),\n          teacherId: session.user.id,\n        },\n        validatedData.grades\n      );\n\n      return NextResponse.json(\n        {\n          success: true,\n          data: createdGrades,\n          message: `${createdGrades.length} grades created successfully`,\n        },\n        { status: 201 }\n      );\n    } else {\n      // Single create\n      const validatedData = GradeCreateSchema.parse(body);\n\n      // Verify user has permission to grade this student\n      const hasPermission = await gradeRepo.verifyGradingPermission(\n        validatedData.classId,\n        validatedData.subjectId,\n        session.user.id\n      );\n\n      if (!hasPermission) {\n        return NextResponse.json(\n          { error: 'Insufficient permissions to grade this student' },\n          { status: 403 }\n        );\n      }\n\n      // Check if grade already exists for this student, subject, and exam\n      const existingGrade = await gradeRepo.getGradeByStudentAndExam(\n        validatedData.studentId,\n        validatedData.subjectId,\n        validatedData.gradeType,\n        validatedData.examName,\n        validatedData.semester,\n        validatedData.academicYear\n      );\n\n      if (existingGrade) {\n        return NextResponse.json(\n          { error: 'Grade already exists for this student and exam' },\n          { status: 409 }\n        );\n      }\n\n      // Create grade\n      const grade = await gradeRepo.createGrade({\n        studentId: validatedData.studentId,\n        classId: validatedData.classId,\n        subjectId: validatedData.subjectId,\n        assignmentId: validatedData.assignmentId,\n        gradeType: validatedData.gradeType,\n        gradeValue: validatedData.gradeValue,\n        maxGrade: validatedData.maxGrade,\n        weight: validatedData.weight,\n        examName: validatedData.examName,\n        description: validatedData.description,\n        semester: validatedData.semester,\n        academicYear: validatedData.academicYear,\n        gradeDate: validatedData.gradeDate ? new Date(validatedData.gradeDate) : new Date(),\n        teacherId: session.user.id,\n      });\n\n      return NextResponse.json(\n        {\n          success: true,\n          data: grade,\n          message: 'Grade created successfully',\n        },\n        { status: 201 }\n      );\n    }\n  } catch (error) {\n    console.error('Error creating grade:', error);\n\n    if (error instanceof z.ZodError) {\n      return NextResponse.json(\n        { error: 'Invalid request data', details: error.errors },\n        { status: 400 }\n      );\n    }\n\n    return NextResponse.json({ error: 'Failed to create grade' }, { status: 500 });\n  }\n}\n"],"names":["GET","POST","GradeCreateSchema","z","object","studentId","string","uuid","classId","subjectId","assignmentId","optional","gradeType","enum","gradeValue","number","min","maxGrade","weight","max","default","examName","description","semester","int","academicYear","regex","gradeDate","GradeQuerySchema","teacherId","transform","Number","startDate","endDate","minGrade","includeCalculations","Boolean","includeComments","limit","offset","GradeBulkCreateSchema","grades","array","request","userEmail","headers","get","userId","tenantId","console","log","mockGrades","id","student_id","student_name","class_id","subject_id","subject_name","assignment_id","grade_type","grade_value","max_grade","exam_name","academic_year","grade_date","Date","toISOString","teacher_id","tenant_id","created_at","result","data","pagination","total","length","page","totalPages","hasNextPage","hasPreviousPage","NextResponse","json","error","status","getTenantId","supabase","createServerSupabaseClient","session","authError","auth","getSession","body","gradeRepo","GradeRepository","Array","isArray","validatedData","parse","hasPermission","verifyGradingPermission","user","createdGrades","createBulkGrades","success","message","existingGrade","getGradeByStudentAndExam","grade","createGrade","ZodError","details","errors"],"mappings":"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"}