037aab49e2d0dec58be3243d04dd7558
/**
 * Grade API - Main Route
 * Ä°-EP.APP - Grade Management System
 *
 * Endpoints:
 * - GET /api/grades - List grades with filtering and analytics
 * - POST /api/grades - Create new grade record or bulk create
 */ "use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    GET: function() {
        return GET;
    },
    POST: function() {
        return POST;
    }
});
const _server = require("next/server");
const _graderepository = require("../../../lib/repository/grade-repository");
const _zod = require("zod");
// Validation schemas
const GradeCreateSchema = _zod.z.object({
    studentId: _zod.z.string().uuid('Invalid student ID'),
    classId: _zod.z.string().uuid('Invalid class ID'),
    subjectId: _zod.z.string().uuid('Invalid subject ID'),
    assignmentId: _zod.z.string().uuid().optional(),
    gradeType: _zod.z.enum([
        'exam',
        'homework',
        'project',
        'participation',
        'quiz',
        'midterm',
        'final'
    ]),
    gradeValue: _zod.z.number().min(0, 'Grade value must be positive'),
    maxGrade: _zod.z.number().min(1, 'Max grade must be at least 1'),
    weight: _zod.z.number().min(0).max(1).optional().default(1.0),
    examName: _zod.z.string().optional(),
    description: _zod.z.string().optional(),
    semester: _zod.z.number().int().min(1).max(2),
    academicYear: _zod.z.string().regex(/^\d{4}-\d{4}$/, 'Invalid academic year format'),
    gradeDate: _zod.z.string().optional()
});
const GradeQuerySchema = _zod.z.object({
    studentId: _zod.z.string().uuid().optional(),
    classId: _zod.z.string().uuid().optional(),
    subjectId: _zod.z.string().uuid().optional(),
    teacherId: _zod.z.string().uuid().optional(),
    gradeType: _zod.z.enum([
        'exam',
        'homework',
        'project',
        'participation',
        'quiz',
        'midterm',
        'final'
    ]).optional(),
    semester: _zod.z.string().transform(Number).optional(),
    academicYear: _zod.z.string().optional(),
    startDate: _zod.z.string().optional(),
    endDate: _zod.z.string().optional(),
    minGrade: _zod.z.string().transform(Number).optional(),
    maxGrade: _zod.z.string().transform(Number).optional(),
    includeCalculations: _zod.z.string().transform(Boolean).optional().default(false),
    includeComments: _zod.z.string().transform(Boolean).optional().default(false),
    limit: _zod.z.string().transform(Number).optional(),
    offset: _zod.z.string().transform(Number).optional()
});
const GradeBulkCreateSchema = _zod.z.object({
    classId: _zod.z.string().uuid('Invalid class ID'),
    subjectId: _zod.z.string().uuid('Invalid subject ID'),
    gradeType: _zod.z.enum([
        'exam',
        'homework',
        'project',
        'participation',
        'quiz',
        'midterm',
        'final'
    ]),
    examName: _zod.z.string().optional(),
    maxGrade: _zod.z.number().min(1, 'Max grade must be at least 1'),
    weight: _zod.z.number().min(0).max(1).optional().default(1.0),
    semester: _zod.z.number().int().min(1).max(2),
    academicYear: _zod.z.string().regex(/^\d{4}-\d{4}$/, 'Invalid academic year format'),
    gradeDate: _zod.z.string().optional(),
    grades: _zod.z.array(_zod.z.object({
        studentId: _zod.z.string().uuid('Invalid student ID'),
        gradeValue: _zod.z.number().min(0, 'Grade value must be positive'),
        description: _zod.z.string().optional()
    })).min(1, 'At least one grade is required')
});
async function GET(request) {
    try {
        // Extract authentication headers - Modern Pattern
        const userEmail = request.headers.get('X-User-Email') || 'teacher1@demo.local';
        const userId = request.headers.get('X-User-ID') || 'demo-teacher-001';
        const tenantId = request.headers.get('x-tenant-id') || 'localhost-tenant';
        console.log('ðŸ”§ Grades API - Auth headers:', {
            userEmail,
            userId,
            tenantId
        });
        // For demo, return mock grade data
        const mockGrades = [
            {
                id: 'grade-001',
                student_id: 'student-001',
                student_name: 'Ahmet YILMAZ',
                class_id: 'class-5a',
                subject_id: 'subject-turkish',
                subject_name: 'TÃ¼rkÃ§e',
                assignment_id: 'assignment-001',
                grade_type: 'homework',
                grade_value: 85,
                max_grade: 100,
                weight: 1.0,
                exam_name: 'Kompozisyon Ã–devi',
                description: 'Okulum konulu kompozisyon',
                semester: 1,
                academic_year: '2024-2025',
                grade_date: new Date().toISOString(),
                teacher_id: userId,
                tenant_id: tenantId,
                created_at: new Date().toISOString()
            },
            {
                id: 'grade-002',
                student_id: 'student-002',
                student_name: 'AyÅŸe KAYA',
                class_id: 'class-5a',
                subject_id: 'subject-math',
                subject_name: 'Matematik',
                assignment_id: 'assignment-002',
                grade_type: 'homework',
                grade_value: 92,
                max_grade: 100,
                weight: 1.0,
                exam_name: 'Kesirler Ã‡alÄ±ÅŸmasÄ±',
                description: 'Kesirlerle iÅŸlemler',
                semester: 1,
                academic_year: '2024-2025',
                grade_date: new Date().toISOString(),
                teacher_id: userId,
                tenant_id: tenantId,
                created_at: new Date().toISOString()
            }
        ];
        const result = {
            data: mockGrades,
            pagination: {
                total: mockGrades.length,
                page: 1,
                limit: 10,
                totalPages: 1,
                hasNextPage: false,
                hasPreviousPage: false
            }
        };
        console.log('âœ… Grades API - Returning mock data:', result);
        return _server.NextResponse.json(result);
    } catch (error) {
        console.error('Error fetching grades:', error);
        return _server.NextResponse.json({
            error: 'Failed to fetch grades'
        }, {
            status: 500
        });
    }
}
async function POST(request) {
    try {
        const tenantId = getTenantId();
        const supabase = await createServerSupabaseClient();
        // Verify authentication
        const { data: { session }, error: authError } = await supabase.auth.getSession();
        if (authError || !session) {
            return _server.NextResponse.json({
                error: 'Authentication required'
            }, {
                status: 401
            });
        }
        const body = await request.json();
        const gradeRepo = new _graderepository.GradeRepository(supabase, tenantId);
        // Check if this is a bulk create request
        if (body.grades && Array.isArray(body.grades)) {
            // Bulk create
            const validatedData = GradeBulkCreateSchema.parse(body);
            // Verify user has permission to grade this class and subject
            const hasPermission = await gradeRepo.verifyGradingPermission(validatedData.classId, validatedData.subjectId, session.user.id);
            if (!hasPermission) {
                return _server.NextResponse.json({
                    error: 'Insufficient permissions to grade this class and subject'
                }, {
                    status: 403
                });
            }
            // Create bulk grades
            const createdGrades = await gradeRepo.createBulkGrades(validatedData.classId, validatedData.subjectId, {
                gradeType: validatedData.gradeType,
                examName: validatedData.examName,
                maxGrade: validatedData.maxGrade,
                weight: validatedData.weight,
                semester: validatedData.semester,
                academicYear: validatedData.academicYear,
                gradeDate: validatedData.gradeDate ? new Date(validatedData.gradeDate) : new Date(),
                teacherId: session.user.id
            }, validatedData.grades);
            return _server.NextResponse.json({
                success: true,
                data: createdGrades,
                message: `${createdGrades.length} grades created successfully`
            }, {
                status: 201
            });
        } else {
            // Single create
            const validatedData = GradeCreateSchema.parse(body);
            // Verify user has permission to grade this student
            const hasPermission = await gradeRepo.verifyGradingPermission(validatedData.classId, validatedData.subjectId, session.user.id);
            if (!hasPermission) {
                return _server.NextResponse.json({
                    error: 'Insufficient permissions to grade this student'
                }, {
                    status: 403
                });
            }
            // Check if grade already exists for this student, subject, and exam
            const existingGrade = await gradeRepo.getGradeByStudentAndExam(validatedData.studentId, validatedData.subjectId, validatedData.gradeType, validatedData.examName, validatedData.semester, validatedData.academicYear);
            if (existingGrade) {
                return _server.NextResponse.json({
                    error: 'Grade already exists for this student and exam'
                }, {
                    status: 409
                });
            }
            // Create grade
            const grade = await gradeRepo.createGrade({
                studentId: validatedData.studentId,
                classId: validatedData.classId,
                subjectId: validatedData.subjectId,
                assignmentId: validatedData.assignmentId,
                gradeType: validatedData.gradeType,
                gradeValue: validatedData.gradeValue,
                maxGrade: validatedData.maxGrade,
                weight: validatedData.weight,
                examName: validatedData.examName,
                description: validatedData.description,
                semester: validatedData.semester,
                academicYear: validatedData.academicYear,
                gradeDate: validatedData.gradeDate ? new Date(validatedData.gradeDate) : new Date(),
                teacherId: session.user.id
            });
            return _server.NextResponse.json({
                success: true,
                data: grade,
                message: 'Grade created successfully'
            }, {
                status: 201
            });
        }
    } catch (error) {
        console.error('Error creating grade:', error);
        if (error instanceof _zod.z.ZodError) {
            return _server.NextResponse.json({
                error: 'Invalid request data',
                details: error.errors
            }, {
                status: 400
            });
        }
        return _server.NextResponse.json({
            error: 'Failed to create grade'
        }, {
            status: 500
        });
    }
}

//# sourceMappingURL=data:application/json;base64,