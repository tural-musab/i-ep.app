{"version":3,"sources":["/Users/turanmusabosman/Projects/i-ep.app/src/__tests__/integration/quarantine/assignments.integration.test.ts"],"sourcesContent":["/**\n * Assignment API Integration Tests\n * Phase 4.2 - Real API endpoint testing\n */\n\nimport { NextRequest } from 'next/server';\n\n// Mock Next.js environment for API route testing\nconst mockRequestGet = (url: string) => new NextRequest(`http://localhost:3000${url}`, { method: 'GET' });\nconst mockRequestPost = (url: string, body: any) => new NextRequest(`http://localhost:3000${url}`, {\n  method: 'POST',\n  body: JSON.stringify(body),\n  headers: { 'Content-Type': 'application/json' }\n});\n\ndescribe('Assignment API Integration Tests', () => {\n  describe('GET /api/assignments', () => {\n    it('should return 200 with empty array initially', async () => {\n      // Import the API route handler dynamically\n      const { GET } = await import('@/app/api/assignments/route');\n      \n      const request = mockRequestGet('/api/assignments');\n      const response = await GET(request);\n      \n      expect(response.status).toBe(200);\n      \n      const data = await response.json();\n      expect(Array.isArray(data)).toBe(true);\n      // Initially should be empty or contain existing assignments\n      expect(data).toBeDefined();\n    });\n  });\n\n  describe('POST /api/assignments', () => {\n    it('should create assignment and return 201 with ID', async () => {\n      const { POST } = await import('@/app/api/assignments/route');\n      \n      const assignmentData = {\n        title: 'Test Assignment',\n        description: 'Integration test assignment',\n        due_date: '2025-08-01T00:00:00Z',\n        class_id: 'test-class-id',\n        subject: 'Mathematics',\n        total_points: 100\n      };\n      \n      const request = mockRequestPost('/api/assignments', assignmentData);\n      const response = await POST(request);\n      \n      expect(response.status).toBe(201);\n      \n      const data = await response.json();\n      expect(data).toHaveProperty('id');\n      expect(data.title).toBe(assignmentData.title);\n      expect(data.description).toBe(assignmentData.description);\n    });\n  });\n\n  describe('GET /api/assignments (after creation)', () => {\n    it('should return at least 1 assignment after creation', async () => {\n      // First create an assignment\n      const { POST, GET } = await import('@/app/api/assignments/route');\n      \n      const assignmentData = {\n        title: 'Test Assignment 2',\n        description: 'Second test assignment',\n        due_date: '2025-08-02T00:00:00Z',\n        class_id: 'test-class-id-2', \n        subject: 'Science',\n        total_points: 90\n      };\n      \n      const postRequest = mockRequestPost('/api/assignments', assignmentData);\n      await POST(postRequest);\n      \n      // Then fetch all assignments\n      const getRequest = mockRequestGet('/api/assignments');\n      const response = await GET(getRequest);\n      \n      expect(response.status).toBe(200);\n      \n      const data = await response.json();\n      expect(Array.isArray(data)).toBe(true);\n      expect(data.length).toBeGreaterThanOrEqual(1);\n      \n      // Check if our created assignment exists\n      const createdAssignment = data.find((a: any) => a.title === 'Test Assignment 2');\n      expect(createdAssignment).toBeDefined();\n    });\n  });\n});"],"names":["mockRequestGet","url","NextRequest","method","mockRequestPost","body","JSON","stringify","headers","describe","it","GET","request","response","expect","status","toBe","data","json","Array","isArray","toBeDefined","POST","assignmentData","title","description","due_date","class_id","subject","total_points","toHaveProperty","postRequest","getRequest","length","toBeGreaterThanOrEqual","createdAssignment","find","a"],"mappings":"AAAA;;;CAGC;;;;wBAE2B;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAE5B,iDAAiD;AACjD,MAAMA,iBAAiB,CAACC,MAAgB,IAAIC,mBAAW,CAAC,CAAC,qBAAqB,EAAED,KAAK,EAAE;QAAEE,QAAQ;IAAM;AACvG,MAAMC,kBAAkB,CAACH,KAAaI,OAAc,IAAIH,mBAAW,CAAC,CAAC,qBAAqB,EAAED,KAAK,EAAE;QACjGE,QAAQ;QACRE,MAAMC,KAAKC,SAAS,CAACF;QACrBG,SAAS;YAAE,gBAAgB;QAAmB;IAChD;AAEAC,SAAS,oCAAoC;IAC3CA,SAAS,wBAAwB;QAC/BC,GAAG,gDAAgD;YACjD,2CAA2C;YAC3C,MAAM,EAAEC,GAAG,EAAE,GAAG,MAAM,mEAAA,QAAO;YAE7B,MAAMC,UAAUZ,eAAe;YAC/B,MAAMa,WAAW,MAAMF,IAAIC;YAE3BE,OAAOD,SAASE,MAAM,EAAEC,IAAI,CAAC;YAE7B,MAAMC,OAAO,MAAMJ,SAASK,IAAI;YAChCJ,OAAOK,MAAMC,OAAO,CAACH,OAAOD,IAAI,CAAC;YACjC,4DAA4D;YAC5DF,OAAOG,MAAMI,WAAW;QAC1B;IACF;IAEAZ,SAAS,yBAAyB;QAChCC,GAAG,mDAAmD;YACpD,MAAM,EAAEY,IAAI,EAAE,GAAG,MAAM,mEAAA,QAAO;YAE9B,MAAMC,iBAAiB;gBACrBC,OAAO;gBACPC,aAAa;gBACbC,UAAU;gBACVC,UAAU;gBACVC,SAAS;gBACTC,cAAc;YAChB;YAEA,MAAMjB,UAAUR,gBAAgB,oBAAoBmB;YACpD,MAAMV,WAAW,MAAMS,KAAKV;YAE5BE,OAAOD,SAASE,MAAM,EAAEC,IAAI,CAAC;YAE7B,MAAMC,OAAO,MAAMJ,SAASK,IAAI;YAChCJ,OAAOG,MAAMa,cAAc,CAAC;YAC5BhB,OAAOG,KAAKO,KAAK,EAAER,IAAI,CAACO,eAAeC,KAAK;YAC5CV,OAAOG,KAAKQ,WAAW,EAAET,IAAI,CAACO,eAAeE,WAAW;QAC1D;IACF;IAEAhB,SAAS,yCAAyC;QAChDC,GAAG,sDAAsD;YACvD,6BAA6B;YAC7B,MAAM,EAAEY,IAAI,EAAEX,GAAG,EAAE,GAAG,MAAM,mEAAA,QAAO;YAEnC,MAAMY,iBAAiB;gBACrBC,OAAO;gBACPC,aAAa;gBACbC,UAAU;gBACVC,UAAU;gBACVC,SAAS;gBACTC,cAAc;YAChB;YAEA,MAAME,cAAc3B,gBAAgB,oBAAoBmB;YACxD,MAAMD,KAAKS;YAEX,6BAA6B;YAC7B,MAAMC,aAAahC,eAAe;YAClC,MAAMa,WAAW,MAAMF,IAAIqB;YAE3BlB,OAAOD,SAASE,MAAM,EAAEC,IAAI,CAAC;YAE7B,MAAMC,OAAO,MAAMJ,SAASK,IAAI;YAChCJ,OAAOK,MAAMC,OAAO,CAACH,OAAOD,IAAI,CAAC;YACjCF,OAAOG,KAAKgB,MAAM,EAAEC,sBAAsB,CAAC;YAE3C,yCAAyC;YACzC,MAAMC,oBAAoBlB,KAAKmB,IAAI,CAAC,CAACC,IAAWA,EAAEb,KAAK,KAAK;YAC5DV,OAAOqB,mBAAmBd,WAAW;QACvC;IACF;AACF"}