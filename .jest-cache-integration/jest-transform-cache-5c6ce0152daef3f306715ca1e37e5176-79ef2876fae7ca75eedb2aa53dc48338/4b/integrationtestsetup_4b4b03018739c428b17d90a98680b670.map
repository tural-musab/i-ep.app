{"version":3,"sources":["/Users/turanmusabosman/Projects/i-ep.app/test-utils/integration-test-setup.js"],"sourcesContent":["/* eslint-disable @typescript-eslint/no-require-imports */\n/**\n * İ-EP.APP - Integration Test Utilities & Setup\n * Gerçek database ve Redis bağlantıları için test setup utilities\n */\n\nconst { createClient } = require('@supabase/supabase-js');\n\n/**\n * Integration Test Data Manager\n * Gerçek database ile clean fixtures için test data yönetimi\n */\nclass IntegrationTestManager {\n  constructor() {\n    this.supabase = createClient(\n      process.env.NEXT_PUBLIC_SUPABASE_URL,\n      process.env.SUPABASE_SERVICE_ROLE_KEY\n    );\n    this.testTenantId = process.env.TEST_TENANT_ID;\n    this.cleanupTasks = [];\n  }\n\n  /**\n   * Test tenant için clean environment hazırlar\n   */\n  async setupTestEnvironment() {\n    console.log('🧹 Setting up clean test environment...');\n    \n    // Clean existing test data\n    await this.cleanupTestData();\n    \n    // Create test tenant if not exists\n    await this.ensureTestTenant();\n    \n    console.log('✅ Test environment ready');\n  }\n\n  /**\n   * Test sonrası cleanup yapar\n   */\n  async cleanupTestEnvironment() {\n    console.log('🧹 Cleaning up test environment...');\n    \n    // Execute all cleanup tasks\n    for (const cleanup of this.cleanupTasks) {\n      try {\n        await cleanup();\n      } catch (error) {\n        console.warn('⚠️  Cleanup task failed:', error.message);\n      }\n    }\n    \n    // Final cleanup of test data\n    await this.cleanupTestData();\n    \n    console.log('✅ Test environment cleaned');\n  }\n\n  /**\n   * Test tenant'ın var olduğundan emin olur\n   */\n  async ensureTestTenant() {\n    if (!this.testTenantId) {\n      throw new Error('TEST_TENANT_ID environment variable is required');\n    }\n\n    const { data: existingTenant } = await this.supabase\n      .from('tenants')\n      .select('id')\n      .eq('id', this.testTenantId)\n      .single();\n\n    if (!existingTenant) {\n      const { error } = await this.supabase\n        .from('tenants')\n        .insert({\n          id: this.testTenantId,\n          name: 'Test School',\n          subdomain: 'test-school',\n          domain: 'test.i-ep.app',\n          status: 'active',\n          settings: {\n            locale: 'tr',\n            timezone: 'Europe/Istanbul',\n            academic_year: '2024-2025'\n          }\n        });\n\n      if (error) {\n        console.warn('⚠️  Could not create test tenant:', error.message);\n      } else {\n        console.log('✅ Test tenant created');\n      }\n    }\n  }\n\n  /**\n   * Test data'yı temizler\n   */\n  async cleanupTestData() {\n    const tables = [\n      'grade_comments',\n      'grades', \n      'attendance_records',\n      'assignments',\n      'users',\n      'classes',\n      'subjects'\n    ];\n\n    for (const table of tables) {\n      try {\n        const { error } = await this.supabase\n          .from(table)\n          .delete()\n          .eq('tenant_id', this.testTenantId);\n\n        if (error && !error.message.includes('does not exist')) {\n          console.warn(`⚠️  Could not clean ${table}:`, error.message);\n        }\n      } catch (err) {\n        // Table might not exist yet, ignore\n      }\n    }\n  }\n\n  /**\n   * Test user oluşturur ve cleanup task ekler\n   */\n  async createTestUser(userData = {}) {\n    const defaultUser = {\n      id: `test-user-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`,\n      email: `test-${Date.now()}@i-ep.app`,\n      tenant_id: this.testTenantId,\n      role: 'student',\n      name: 'Test User',\n      created_at: new Date().toISOString(),\n      updated_at: new Date().toISOString(),\n      ...userData\n    };\n\n    const { data, error } = await this.supabase\n      .from('users')\n      .insert(defaultUser)\n      .select()\n      .single();\n\n    if (error) {\n      throw new Error(`Failed to create test user: ${error.message}`);\n    }\n\n    // Add cleanup task\n    this.cleanupTasks.push(async () => {\n      await this.supabase\n        .from('users')\n        .delete()\n        .eq('id', data.id);\n    });\n\n    return data;\n  }\n\n  /**\n   * Test class oluşturur\n   */\n  async createTestClass(classData = {}) {\n    const defaultClass = {\n      id: `test-class-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`,\n      tenant_id: this.testTenantId,\n      name: 'Test Sınıfı',\n      grade_level: 9,\n      academic_year: '2024-2025',\n      created_at: new Date().toISOString(),\n      updated_at: new Date().toISOString(),\n      ...classData\n    };\n\n    const { data, error } = await this.supabase\n      .from('classes')\n      .insert(defaultClass)\n      .select()\n      .single();\n\n    if (error) {\n      throw new Error(`Failed to create test class: ${error.message}`);\n    }\n\n    // Add cleanup task\n    this.cleanupTasks.push(async () => {\n      await this.supabase\n        .from('classes')\n        .delete()\n        .eq('id', data.id);\n    });\n\n    return data;\n  }\n\n  /**\n   * Test assignment oluşturur\n   */\n  async createTestAssignment(assignmentData = {}) {\n    const defaultAssignment = {\n      id: `test-assignment-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`,\n      tenant_id: this.testTenantId,\n      title: 'Test Ödevi',\n      description: 'Bu bir test ödevi açıklamasıdır',\n      due_date: new Date(Date.now() + 7 * 24 * 60 * 60 * 1000).toISOString(), // 1 week from now\n      status: 'active',\n      created_at: new Date().toISOString(),\n      updated_at: new Date().toISOString(),\n      ...assignmentData\n    };\n\n    const { data, error } = await this.supabase\n      .from('assignments')\n      .insert(defaultAssignment)\n      .select()\n      .single();\n\n    if (error) {\n      throw new Error(`Failed to create test assignment: ${error.message}`);\n    }\n\n    // Add cleanup task\n    this.cleanupTasks.push(async () => {\n      await this.supabase\n        .from('assignments')\n        .delete()\n        .eq('id', data.id);\n    });\n\n    return data;\n  }\n\n  /**\n   * Database bağlantısını test eder\n   */\n  async testDatabaseConnection() {\n    try {\n      const { data, error } = await this.supabase\n        .from('tenants')\n        .select('id')\n        .limit(1);\n\n      return { success: !error, error: error?.message };\n    } catch (err) {\n      return { success: false, error: err.message };\n    }\n  }\n\n  /**\n   * Redis bağlantısını test eder\n   */\n  async testRedisConnection() {\n    try {\n      const { Redis } = require('@upstash/redis');\n      const redis = new Redis({\n        url: process.env.REDIS_URL || process.env.UPSTASH_REDIS_URL,\n        token: process.env.UPSTASH_REDIS_TOKEN || 'test-token',\n      });\n\n      const testKey = `integration-test-${Date.now()}`;\n      await redis.set(testKey, 'test-value', { ex: 5 });\n      const result = await redis.get(testKey);\n      await redis.del(testKey);\n\n      return { \n        success: result === 'test-value', \n        error: result !== 'test-value' ? 'Redis read/write test failed' : null \n      };\n    } catch (err) {\n      return { success: false, error: err.message };\n    }\n  }\n}\n\n// Global instance for use in tests\nglobal.testManager = new IntegrationTestManager();\n\n// Export for direct imports\nmodule.exports = {\n  IntegrationTestManager,\n  testManager: global.testManager\n};\n\nconsole.log('🔧 Integration test utilities loaded');\nconsole.log('🎯 TestManager available globally as testManager');\nconsole.log('📊 Clean fixtures and database utilities ready');"],"names":["createClient","require","IntegrationTestManager","constructor","supabase","process","env","NEXT_PUBLIC_SUPABASE_URL","SUPABASE_SERVICE_ROLE_KEY","testTenantId","TEST_TENANT_ID","cleanupTasks","setupTestEnvironment","console","log","cleanupTestData","ensureTestTenant","cleanupTestEnvironment","cleanup","error","warn","message","Error","data","existingTenant","from","select","eq","single","insert","id","name","subdomain","domain","status","settings","locale","timezone","academic_year","tables","table","delete","includes","err","createTestUser","userData","defaultUser","Date","now","Math","random","toString","substr","email","tenant_id","role","created_at","toISOString","updated_at","push","createTestClass","classData","defaultClass","grade_level","createTestAssignment","assignmentData","defaultAssignment","title","description","due_date","testDatabaseConnection","limit","success","testRedisConnection","Redis","redis","url","REDIS_URL","UPSTASH_REDIS_URL","token","UPSTASH_REDIS_TOKEN","testKey","set","ex","result","get","del","global","testManager","module","exports"],"mappings":"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"}