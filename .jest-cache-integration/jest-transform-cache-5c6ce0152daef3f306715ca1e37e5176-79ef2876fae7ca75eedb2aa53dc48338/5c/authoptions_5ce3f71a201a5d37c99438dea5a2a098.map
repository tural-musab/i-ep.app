{"version":3,"sources":["/Users/turanmusabosman/Projects/i-ep.app/src/lib/auth/auth-options.ts"],"sourcesContent":["import { createServerComponentClient } from '@supabase/auth-helpers-nextjs';\nimport { NextAuthOptions, Session, User } from 'next-auth';\nimport { cookies } from 'next/headers';\nimport { SupabaseAdapter } from '@auth/supabase-adapter';\nimport CredentialsProvider from 'next-auth/providers/credentials';\nimport GoogleProvider from 'next-auth/providers/google';\nimport EmailProvider from 'next-auth/providers/email';\nimport { getTenantSupabaseClient } from '../supabase/server';\nimport { getTenantById, getTenantByDomain } from '../tenant/tenant-utils';\nimport { Database } from '@/types/database.types';\n\n/**\n * Next-Auth yapılandırma ayarları\n *\n * Bu dosya, Next-Auth kütüphanesi için yapılandırma seçeneklerini içerir\n * ve Supabase ile entegrasyonu sağlar. Tenant-aware kimlik doğrulama\n * mekanizmasını da içerir.\n */\nexport const authOptions: NextAuthOptions = {\n  adapter: SupabaseAdapter({\n    url: process.env.NEXT_PUBLIC_SUPABASE_URL!,\n    secret: process.env.SUPABASE_SERVICE_ROLE_KEY!,\n  }),\n  \n  // Use dynamic BASE_URL for callbacks\n  basePath: '/api/auth',\n  secret: process.env.NEXTAUTH_SECRET,\n\n  // Desteklenen oturum açma metodları\n  providers: [\n    // E-posta / Şifre ile giriş\n    CredentialsProvider({\n      name: 'E-posta & Şifre',\n      credentials: {\n        email: { label: 'E-posta', type: 'email' },\n        password: { label: 'Şifre', type: 'password' },\n      },\n      async authorize(credentials, req) {\n        if (!credentials?.email || !credentials.password) {\n          return null;\n        }\n\n        try {\n          // Tenant bilgisi için host adresini kullan\n          const tenantDomain = req.headers?.host || '';\n          const tenant = await getTenantByDomain(tenantDomain);\n\n          if (!tenant) {\n            console.error(`Tenant bulunamadı: ${tenantDomain}`);\n            return null;\n          }\n\n          // Tenant'a özel Supabase client oluştur\n          const supabase = getTenantSupabaseClient(tenant.id);\n\n          // Kullanıcı girişi\n          const { data, error } = await supabase.auth.signInWithPassword({\n            email: credentials.email,\n            password: credentials.password,\n          });\n\n          if (error || !data.user) {\n            console.error(`Giriş hatası: ${error?.message}`);\n            return null;\n          }\n\n          // Kullanıcı profil bilgilerini al\n          // @ts-ignore - Dinamik tablo adları için bir geçici çözüm\n          const { data: userProfile, error: profileError } = await supabase\n            .from(`users`) // tenant şemasındaki users tablosu\n            .select('*')\n            .eq('auth_id', data.user.id)\n            .single();\n\n          if (profileError || !userProfile) {\n            console.error(`Kullanıcı profili bulunamadı: ${profileError?.message}`);\n            return null;\n          }\n\n          // Aktif olmayan kullanıcılar giremez\n          if (userProfile.is_active !== true) {\n            console.error(`Kullanıcı aktif değil: ${userProfile.email}`);\n            return null;\n          }\n\n          // Kullanıcı bilgilerini ve tenant referansını döndür\n          return {\n            id: data.user.id,\n            email: data.user.email,\n            name: `${userProfile.first_name} ${userProfile.last_name}`,\n            image: userProfile.avatar_url,\n            role: userProfile.role,\n            tenantId: tenant.id, // Tenant ID'yi ekle\n          };\n        } catch (error) {\n          console.error('Yetkilendirme hatası:', error);\n          return null;\n        }\n      },\n    }),\n\n    // Google ile giriş\n    GoogleProvider({\n      clientId: process.env.GOOGLE_CLIENT_ID!,\n      clientSecret: process.env.GOOGLE_CLIENT_SECRET!,\n      profile(profile) {\n        return {\n          id: profile.sub,\n          name: profile.name,\n          email: profile.email,\n          image: profile.picture,\n          role: 'user', // Varsayılan rol\n          tenantId: undefined, // Google ile girişte tenant bilgisi sonradan belirlenecek\n        };\n      },\n    }),\n\n    // Şifresiz e-posta bağlantısı ile giriş (development'ta disabled)\n    ...(process.env.NODE_ENV === 'production'\n      ? [\n          EmailProvider({\n            server: {\n              host: process.env.EMAIL_SERVER_HOST,\n              port: process.env.EMAIL_SERVER_PORT,\n              auth: {\n                user: process.env.EMAIL_SERVER_USER,\n                pass: process.env.EMAIL_SERVER_PASSWORD,\n              },\n            },\n            from: process.env.EMAIL_FROM,\n            maxAge: 24 * 60 * 60, // Bağlantının geçerlilik süresi (24 saat)\n          }),\n        ]\n      : []),\n  ],\n\n  // Oturum ayarları\n  session: {\n    strategy: 'jwt',\n    maxAge: 24 * 60 * 60, // 1 gün\n  },\n\n  // Sayfa yönlendirmeleri\n  pages: {\n    signIn: '/auth/giris',\n    signOut: '/auth/cikis',\n    error: '/auth/hata',\n  },\n\n  // JWT ve oturum işlemleri\n  callbacks: {\n    async jwt({ token, user, account, profile, trigger, session }) {\n      // Kullanıcı ilk giriş yaptığında user objesi dolu gelir\n      if (user) {\n        token.id = user.id;\n        token.email = user.email;\n        token.role = user.role || 'user';\n        token.tenantId = user.tenantId;\n      }\n\n      // Oturum güncellendiğinde\n      if (session?.tenantId) {\n        token.tenantId = session.tenantId;\n      }\n\n      // Oturum süresi kontrolleri ve yenileme burada yapılabilir\n\n      return token;\n    },\n\n    async session({ session, token }) {\n      if (token && session.user) {\n        session.user.id = token.id;\n        session.user.role = token.role as string;\n        session.user.tenantId = token.tenantId as string; // Tenant ID'yi oturum nesnesine ekle\n      }\n\n      return session;\n    },\n  },\n};\n\n// Tenant-aware kimlik doğrulama için oturum kontrolü\nexport async function getSessionWithTenant() {\n  const supabase = createServerComponentClient({ cookies });\n\n  // Mevcut oturumu al\n  const {\n    data: { session },\n  } = await supabase.auth.getSession();\n\n  if (!session) {\n    return { session: null, tenant: null };\n  }\n\n  // Oturumdaki tenant_id'yi al\n  let tenantId = null;\n\n  if (session.user.user_metadata.tenant_id) {\n    tenantId = session.user.user_metadata.tenant_id;\n  }\n\n  // Tenant bilgisini al\n  let tenant = null;\n  if (tenantId) {\n    tenant = await getTenantById(tenantId);\n  }\n\n  return {\n    session,\n    tenant,\n  };\n}\n\n/**\n * Kullanıcının roller bazında erişim yetkisini kontrol eder\n *\n * @param session Kullanıcı oturumu\n * @param allowedRoles İzin verilen roller\n * @returns Kullanıcının yetkili olup olmadığı\n */\nexport function isAuthorized(session: Session | null, allowedRoles: string[]): boolean {\n  if (!session || !session.user?.role) {\n    return false;\n  }\n\n  return allowedRoles.includes(session.user.role);\n}\n\n// Yardımcı fonksiyon - session'da tanımlı tenant ile erişilen tenant eşleşiyor mu?\nexport function isTenantAuthorized(session: Session | null, tenantId: string): boolean {\n  if (!session || !session.user?.tenantId) {\n    return false;\n  }\n\n  // Super admin her tenant'a erişebilir\n  if (session.user.role === 'super_admin') {\n    return true;\n  }\n\n  return session.user.tenantId === tenantId;\n}\n"],"names":["authOptions","getSessionWithTenant","isAuthorized","isTenantAuthorized","adapter","SupabaseAdapter","url","process","env","NEXT_PUBLIC_SUPABASE_URL","secret","SUPABASE_SERVICE_ROLE_KEY","basePath","NEXTAUTH_SECRET","providers","CredentialsProvider","name","credentials","email","label","type","password","authorize","req","tenantDomain","headers","host","tenant","getTenantByDomain","console","error","supabase","getTenantSupabaseClient","id","data","auth","signInWithPassword","user","message","userProfile","profileError","from","select","eq","single","is_active","first_name","last_name","image","avatar_url","role","tenantId","GoogleProvider","clientId","GOOGLE_CLIENT_ID","clientSecret","GOOGLE_CLIENT_SECRET","profile","sub","picture","undefined","NODE_ENV","EmailProvider","server","EMAIL_SERVER_HOST","port","EMAIL_SERVER_PORT","EMAIL_SERVER_USER","pass","EMAIL_SERVER_PASSWORD","EMAIL_FROM","maxAge","session","strategy","pages","signIn","signOut","callbacks","jwt","token","account","trigger","createServerComponentClient","cookies","getSession","user_metadata","tenant_id","getTenantById","allowedRoles","includes"],"mappings":"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"}