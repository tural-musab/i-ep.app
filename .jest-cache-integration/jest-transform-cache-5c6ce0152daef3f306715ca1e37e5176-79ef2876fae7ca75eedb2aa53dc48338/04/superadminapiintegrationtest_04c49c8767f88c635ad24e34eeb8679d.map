{"version":3,"sources":["/Users/turanmusabosman/Projects/i-ep.app/src/__tests__/integration/quarantine/super-admin-api-integration.test.ts"],"sourcesContent":["/**\n * Super Admin API Integration Tests\n * Sprint 7: API endpoint'lerinin integration test'leri\n */\n\nimport { describe, it, expect, beforeEach, jest } from '@jest/globals';\nimport { NextRequest } from 'next/server';\nimport { GET as systemHealthGET } from '@/app/api/super-admin/system-health/route';\nimport { GET as quickHealthGET } from '@/app/api/super-admin/system-health/quick/route';\nimport { GET as tenantsGET, POST as tenantsPOST } from '@/app/api/super-admin/tenants/route';\nimport { GET as domainsGET, POST as domainsPOST } from '@/app/api/super-admin/domains/route';\n\n// Mock dependencies\njest.mock('@/lib/supabase/admin', () => ({\n  supabaseAdmin: {\n    auth: {\n      getUser: jest.fn(() =>\n        Promise.resolve({\n          data: { user: { id: 'test-user', user_metadata: { role: 'super_admin' } } },\n          error: null,\n        })\n      ),\n    },\n    rpc: jest.fn(() => Promise.resolve({ data: [], error: null })),\n    from: jest.fn(() => ({\n      select: jest.fn(() => ({\n        eq: jest.fn(() => ({\n          single: jest.fn(() => Promise.resolve({ data: null, error: null })),\n        })),\n        order: jest.fn(() => ({\n          range: jest.fn(() => Promise.resolve({ data: [], error: null })),\n        })),\n        range: jest.fn(() => Promise.resolve({ data: [], error: null })),\n      })),\n      insert: jest.fn(() => Promise.resolve({ data: { id: 'new-id' }, error: null })),\n    })),\n  },\n}));\n\njest.mock('@/lib/system/system-health', () => ({\n  SystemHealthService: {\n    getFullHealthReport: jest.fn(() =>\n      Promise.resolve({\n        overall: {\n          status: 'healthy',\n          timestamp: new Date().toISOString(),\n          uptime: 3600,\n          checks: [],\n          version: '1.0.0',\n          environment: 'test',\n        },\n        database: { connection: true, responseTime: 50 },\n        redis: { connection: true, responseTime: 20 },\n        ssl: [],\n      })\n    ),\n    getQuickHealthCheck: jest.fn(() =>\n      Promise.resolve({\n        status: 'healthy',\n        timestamp: new Date().toISOString(),\n        database: true,\n        redis: true,\n        ssl_certificates: 'healthy',\n      })\n    ),\n  },\n}));\n\njest.mock('@/lib/audit/audit-log', () => ({\n  AuditLogService: {\n    logSystemAction: jest.fn(() => Promise.resolve()),\n    logTenantAction: jest.fn(() => Promise.resolve()),\n    logDomainAction: jest.fn(() => Promise.resolve()),\n  },\n}));\n\njest.mock('@/lib/domain/cloudflare-domain-manager', () => ({\n  CloudflareDomainManager: {\n    getAllDomains: jest.fn(() =>\n      Promise.resolve([\n        {\n          domain: 'test.i-ep.app',\n          ssl_status: 'active',\n          created_at: new Date().toISOString(),\n        },\n      ])\n    ),\n    createDomain: jest.fn(() => Promise.resolve({ success: true })),\n  },\n}));\n\ndescribe('Super Admin API Integration Tests', () => {\n  beforeEach(() => {\n    jest.clearAllMocks();\n  });\n\n  describe('System Health Endpoints', () => {\n    it('should get full system health report', async () => {\n      const request = new NextRequest('http://localhost:3000/api/super-admin/system-health', {\n        method: 'GET',\n        headers: { Authorization: 'Bearer valid-token' },\n      });\n\n      const response = await systemHealthGET(request);\n      const data = await response.json();\n\n      expect(response.status).toBe(200);\n      expect(data.success).toBe(true);\n      expect(data.data.overall.status).toBe('healthy');\n    });\n\n    it('should get quick health check', async () => {\n      const request = new NextRequest('http://localhost:3000/api/super-admin/system-health/quick', {\n        method: 'GET',\n        headers: { Authorization: 'Bearer valid-token' },\n      });\n\n      const response = await quickHealthGET(request);\n      const data = await response.json();\n\n      expect(response.status).toBe(200);\n      expect(data.success).toBe(true);\n      expect(data.data.status).toBe('healthy');\n    });\n  });\n\n  describe('Tenants Management Endpoints', () => {\n    it('should list tenants with pagination', async () => {\n      const request = new NextRequest(\n        'http://localhost:3000/api/super-admin/tenants?page=1&limit=10',\n        {\n          method: 'GET',\n          headers: { Authorization: 'Bearer valid-token' },\n        }\n      );\n\n      const response = await tenantsGET(request);\n      const data = await response.json();\n\n      expect(response.status).toBe(200);\n      expect(data.success).toBe(true);\n      expect(Array.isArray(data.data)).toBe(true);\n      expect(data.pagination).toBeDefined();\n    });\n\n    it('should create new tenant', async () => {\n      const request = new NextRequest('http://localhost:3000/api/super-admin/tenants', {\n        method: 'POST',\n        headers: {\n          Authorization: 'Bearer valid-token',\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          name: 'Test Tenant',\n          slug: 'test-tenant',\n          domain: 'test.i-ep.app',\n        }),\n      });\n\n      const response = await tenantsPOST(request);\n      const data = await response.json();\n\n      expect(response.status).toBe(201);\n      expect(data.success).toBe(true);\n    });\n\n    it('should handle invalid tenant creation data', async () => {\n      const request = new NextRequest('http://localhost:3000/api/super-admin/tenants', {\n        method: 'POST',\n        headers: {\n          Authorization: 'Bearer valid-token',\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          name: '', // Invalid empty name\n          slug: 'test',\n        }),\n      });\n\n      const response = await tenantsPOST(request);\n\n      expect(response.status).toBe(400);\n    });\n  });\n\n  describe('Domains Management Endpoints', () => {\n    it('should list all domains', async () => {\n      const request = new NextRequest('http://localhost:3000/api/super-admin/domains', {\n        method: 'GET',\n        headers: { Authorization: 'Bearer valid-token' },\n      });\n\n      const response = await domainsGET(request);\n      const data = await response.json();\n\n      expect(response.status).toBe(200);\n      expect(data.success).toBe(true);\n      expect(Array.isArray(data.data)).toBe(true);\n    });\n\n    it('should create new domain', async () => {\n      const request = new NextRequest('http://localhost:3000/api/super-admin/domains', {\n        method: 'POST',\n        headers: {\n          Authorization: 'Bearer valid-token',\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          domain: 'newdomain.i-ep.app',\n          tenant_id: 'test-tenant-id',\n        }),\n      });\n\n      const response = await domainsPOST(request);\n      const data = await response.json();\n\n      expect(response.status).toBe(201);\n      expect(data.success).toBe(true);\n    });\n\n    it('should handle invalid domain creation', async () => {\n      const request = new NextRequest('http://localhost:3000/api/super-admin/domains', {\n        method: 'POST',\n        headers: {\n          Authorization: 'Bearer valid-token',\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          domain: '', // Invalid empty domain\n        }),\n      });\n\n      const response = await domainsPOST(request);\n\n      expect(response.status).toBe(400);\n    });\n  });\n\n  describe('Authentication & Authorization', () => {\n    it('should reject requests without authorization', async () => {\n      const request = new NextRequest('http://localhost:3000/api/super-admin/system-health', {\n        method: 'GET',\n      });\n\n      const response = await systemHealthGET(request);\n\n      expect(response.status).toBe(401);\n    });\n\n    it('should reject non-super-admin users', async () => {\n      // Mock non-super-admin user\n      const supabaseAdminModule = await import('@/lib/supabase/admin');\n      const supabaseAdmin = supabaseAdminModule.supabaseAdmin as unknown;\n      supabaseAdmin.auth.getUser.mockResolvedValueOnce({\n        data: { user: { id: 'regular-user', user_metadata: { role: 'user' } } },\n        error: null,\n      });\n\n      const request = new NextRequest('http://localhost:3000/api/super-admin/system-health', {\n        method: 'GET',\n        headers: { Authorization: 'Bearer valid-token' },\n      });\n\n      const response = await systemHealthGET(request);\n\n      expect(response.status).toBe(403);\n    });\n  });\n\n  describe('Error Handling', () => {\n    it('should handle database connection errors', async () => {\n      // Mock database error\n      const supabaseAdminModule = await import('@/lib/supabase/admin');\n      const supabaseAdmin = supabaseAdminModule.supabaseAdmin as unknown;\n      supabaseAdmin.auth.getUser.mockRejectedValueOnce(new Error('Database connection failed'));\n\n      const request = new NextRequest('http://localhost:3000/api/super-admin/system-health', {\n        method: 'GET',\n        headers: { Authorization: 'Bearer valid-token' },\n      });\n\n      const response = await systemHealthGET(request);\n\n      expect(response.status).toBe(500);\n    });\n\n    it('should handle invalid JSON in POST requests', async () => {\n      const request = new NextRequest('http://localhost:3000/api/super-admin/tenants', {\n        method: 'POST',\n        headers: {\n          Authorization: 'Bearer valid-token',\n          'Content-Type': 'application/json',\n        },\n        body: 'invalid json{',\n      });\n\n      const response = await tenantsPOST(request);\n\n      expect(response.status).toBe(400);\n    });\n  });\n\n  describe('Response Format Validation', () => {\n    it('should return consistent response format for all endpoints', async () => {\n      const endpoints = [\n        { handler: systemHealthGET, path: '/api/super-admin/system-health' },\n        { handler: quickHealthGET, path: '/api/super-admin/system-health/quick' },\n        { handler: tenantsGET, path: '/api/super-admin/tenants' },\n        { handler: domainsGET, path: '/api/super-admin/domains' },\n      ];\n\n      for (const endpoint of endpoints) {\n        const request = new NextRequest(`http://localhost:3000${endpoint.path}`, {\n          method: 'GET',\n          headers: { Authorization: 'Bearer valid-token' },\n        });\n\n        const response = await endpoint.handler(request);\n        const data = await response.json();\n\n        expect(data).toHaveProperty('success');\n        expect(data).toHaveProperty('data');\n        expect(typeof data.success).toBe('boolean');\n      }\n    });\n  });\n});\n"],"names":["jest","mock","supabaseAdmin","auth","getUser","fn","Promise","resolve","data","user","id","user_metadata","role","error","rpc","from","select","eq","single","order","range","insert","SystemHealthService","getFullHealthReport","overall","status","timestamp","Date","toISOString","uptime","checks","version","environment","database","connection","responseTime","redis","ssl","getQuickHealthCheck","ssl_certificates","AuditLogService","logSystemAction","logTenantAction","logDomainAction","CloudflareDomainManager","getAllDomains","domain","ssl_status","created_at","createDomain","success","describe","beforeEach","clearAllMocks","it","request","NextRequest","method","headers","Authorization","response","systemHealthGET","json","expect","toBe","quickHealthGET","tenantsGET","Array","isArray","pagination","toBeDefined","body","JSON","stringify","name","slug","tenantsPOST","domainsGET","tenant_id","domainsPOST","supabaseAdminModule","mockResolvedValueOnce","mockRejectedValueOnce","Error","endpoints","handler","path","endpoint","toHaveProperty"],"mappings":"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"}