173251b68786423d7fef3c80561eaa67
/**
 * Super Admin API Integration Tests
 * Sprint 7: API endpoint'lerinin integration test'leri
 */ "use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
const _globals = require("@jest/globals");
const _server = require("next/server");
const _route = require("../../../app/api/super-admin/system-health/route");
const _route1 = require("../../../app/api/super-admin/system-health/quick/route");
const _route2 = require("../../../app/api/super-admin/tenants/route");
const _route3 = require("../../../app/api/super-admin/domains/route");
function _getRequireWildcardCache(nodeInterop) {
    if (typeof WeakMap !== "function") return null;
    var cacheBabelInterop = new WeakMap();
    var cacheNodeInterop = new WeakMap();
    return (_getRequireWildcardCache = function(nodeInterop) {
        return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
    })(nodeInterop);
}
function _interop_require_wildcard(obj, nodeInterop) {
    if (!nodeInterop && obj && obj.__esModule) {
        return obj;
    }
    if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
        return {
            default: obj
        };
    }
    var cache = _getRequireWildcardCache(nodeInterop);
    if (cache && cache.has(obj)) {
        return cache.get(obj);
    }
    var newObj = {
        __proto__: null
    };
    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for(var key in obj){
        if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
            if (desc && (desc.get || desc.set)) {
                Object.defineProperty(newObj, key, desc);
            } else {
                newObj[key] = obj[key];
            }
        }
    }
    newObj.default = obj;
    if (cache) {
        cache.set(obj, newObj);
    }
    return newObj;
}
// Mock dependencies
_globals.jest.mock('@/lib/supabase/admin', ()=>({
        supabaseAdmin: {
            auth: {
                getUser: _globals.jest.fn(()=>Promise.resolve({
                        data: {
                            user: {
                                id: 'test-user',
                                user_metadata: {
                                    role: 'super_admin'
                                }
                            }
                        },
                        error: null
                    }))
            },
            rpc: _globals.jest.fn(()=>Promise.resolve({
                    data: [],
                    error: null
                })),
            from: _globals.jest.fn(()=>({
                    select: _globals.jest.fn(()=>({
                            eq: _globals.jest.fn(()=>({
                                    single: _globals.jest.fn(()=>Promise.resolve({
                                            data: null,
                                            error: null
                                        }))
                                })),
                            order: _globals.jest.fn(()=>({
                                    range: _globals.jest.fn(()=>Promise.resolve({
                                            data: [],
                                            error: null
                                        }))
                                })),
                            range: _globals.jest.fn(()=>Promise.resolve({
                                    data: [],
                                    error: null
                                }))
                        })),
                    insert: _globals.jest.fn(()=>Promise.resolve({
                            data: {
                                id: 'new-id'
                            },
                            error: null
                        }))
                }))
        }
    }));
_globals.jest.mock('@/lib/system/system-health', ()=>({
        SystemHealthService: {
            getFullHealthReport: _globals.jest.fn(()=>Promise.resolve({
                    overall: {
                        status: 'healthy',
                        timestamp: new Date().toISOString(),
                        uptime: 3600,
                        checks: [],
                        version: '1.0.0',
                        environment: 'test'
                    },
                    database: {
                        connection: true,
                        responseTime: 50
                    },
                    redis: {
                        connection: true,
                        responseTime: 20
                    },
                    ssl: []
                })),
            getQuickHealthCheck: _globals.jest.fn(()=>Promise.resolve({
                    status: 'healthy',
                    timestamp: new Date().toISOString(),
                    database: true,
                    redis: true,
                    ssl_certificates: 'healthy'
                }))
        }
    }));
_globals.jest.mock('@/lib/audit/audit-log', ()=>({
        AuditLogService: {
            logSystemAction: _globals.jest.fn(()=>Promise.resolve()),
            logTenantAction: _globals.jest.fn(()=>Promise.resolve()),
            logDomainAction: _globals.jest.fn(()=>Promise.resolve())
        }
    }));
_globals.jest.mock('@/lib/domain/cloudflare-domain-manager', ()=>({
        CloudflareDomainManager: {
            getAllDomains: _globals.jest.fn(()=>Promise.resolve([
                    {
                        domain: 'test.i-ep.app',
                        ssl_status: 'active',
                        created_at: new Date().toISOString()
                    }
                ])),
            createDomain: _globals.jest.fn(()=>Promise.resolve({
                    success: true
                }))
        }
    }));
(0, _globals.describe)('Super Admin API Integration Tests', ()=>{
    (0, _globals.beforeEach)(()=>{
        _globals.jest.clearAllMocks();
    });
    (0, _globals.describe)('System Health Endpoints', ()=>{
        (0, _globals.it)('should get full system health report', async ()=>{
            const request = new _server.NextRequest('http://localhost:3000/api/super-admin/system-health', {
                method: 'GET',
                headers: {
                    Authorization: 'Bearer valid-token'
                }
            });
            const response = await (0, _route.GET)(request);
            const data = await response.json();
            (0, _globals.expect)(response.status).toBe(200);
            (0, _globals.expect)(data.success).toBe(true);
            (0, _globals.expect)(data.data.overall.status).toBe('healthy');
        });
        (0, _globals.it)('should get quick health check', async ()=>{
            const request = new _server.NextRequest('http://localhost:3000/api/super-admin/system-health/quick', {
                method: 'GET',
                headers: {
                    Authorization: 'Bearer valid-token'
                }
            });
            const response = await (0, _route1.GET)(request);
            const data = await response.json();
            (0, _globals.expect)(response.status).toBe(200);
            (0, _globals.expect)(data.success).toBe(true);
            (0, _globals.expect)(data.data.status).toBe('healthy');
        });
    });
    (0, _globals.describe)('Tenants Management Endpoints', ()=>{
        (0, _globals.it)('should list tenants with pagination', async ()=>{
            const request = new _server.NextRequest('http://localhost:3000/api/super-admin/tenants?page=1&limit=10', {
                method: 'GET',
                headers: {
                    Authorization: 'Bearer valid-token'
                }
            });
            const response = await (0, _route2.GET)(request);
            const data = await response.json();
            (0, _globals.expect)(response.status).toBe(200);
            (0, _globals.expect)(data.success).toBe(true);
            (0, _globals.expect)(Array.isArray(data.data)).toBe(true);
            (0, _globals.expect)(data.pagination).toBeDefined();
        });
        (0, _globals.it)('should create new tenant', async ()=>{
            const request = new _server.NextRequest('http://localhost:3000/api/super-admin/tenants', {
                method: 'POST',
                headers: {
                    Authorization: 'Bearer valid-token',
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({
                    name: 'Test Tenant',
                    slug: 'test-tenant',
                    domain: 'test.i-ep.app'
                })
            });
            const response = await (0, _route2.POST)(request);
            const data = await response.json();
            (0, _globals.expect)(response.status).toBe(201);
            (0, _globals.expect)(data.success).toBe(true);
        });
        (0, _globals.it)('should handle invalid tenant creation data', async ()=>{
            const request = new _server.NextRequest('http://localhost:3000/api/super-admin/tenants', {
                method: 'POST',
                headers: {
                    Authorization: 'Bearer valid-token',
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({
                    name: '',
                    slug: 'test'
                })
            });
            const response = await (0, _route2.POST)(request);
            (0, _globals.expect)(response.status).toBe(400);
        });
    });
    (0, _globals.describe)('Domains Management Endpoints', ()=>{
        (0, _globals.it)('should list all domains', async ()=>{
            const request = new _server.NextRequest('http://localhost:3000/api/super-admin/domains', {
                method: 'GET',
                headers: {
                    Authorization: 'Bearer valid-token'
                }
            });
            const response = await (0, _route3.GET)(request);
            const data = await response.json();
            (0, _globals.expect)(response.status).toBe(200);
            (0, _globals.expect)(data.success).toBe(true);
            (0, _globals.expect)(Array.isArray(data.data)).toBe(true);
        });
        (0, _globals.it)('should create new domain', async ()=>{
            const request = new _server.NextRequest('http://localhost:3000/api/super-admin/domains', {
                method: 'POST',
                headers: {
                    Authorization: 'Bearer valid-token',
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({
                    domain: 'newdomain.i-ep.app',
                    tenant_id: 'test-tenant-id'
                })
            });
            const response = await (0, _route3.POST)(request);
            const data = await response.json();
            (0, _globals.expect)(response.status).toBe(201);
            (0, _globals.expect)(data.success).toBe(true);
        });
        (0, _globals.it)('should handle invalid domain creation', async ()=>{
            const request = new _server.NextRequest('http://localhost:3000/api/super-admin/domains', {
                method: 'POST',
                headers: {
                    Authorization: 'Bearer valid-token',
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({
                    domain: ''
                })
            });
            const response = await (0, _route3.POST)(request);
            (0, _globals.expect)(response.status).toBe(400);
        });
    });
    (0, _globals.describe)('Authentication & Authorization', ()=>{
        (0, _globals.it)('should reject requests without authorization', async ()=>{
            const request = new _server.NextRequest('http://localhost:3000/api/super-admin/system-health', {
                method: 'GET'
            });
            const response = await (0, _route.GET)(request);
            (0, _globals.expect)(response.status).toBe(401);
        });
        (0, _globals.it)('should reject non-super-admin users', async ()=>{
            // Mock non-super-admin user
            const supabaseAdminModule = await Promise.resolve().then(()=>/*#__PURE__*/ _interop_require_wildcard(require("../../../lib/supabase/admin")));
            const supabaseAdmin = supabaseAdminModule.supabaseAdmin;
            supabaseAdmin.auth.getUser.mockResolvedValueOnce({
                data: {
                    user: {
                        id: 'regular-user',
                        user_metadata: {
                            role: 'user'
                        }
                    }
                },
                error: null
            });
            const request = new _server.NextRequest('http://localhost:3000/api/super-admin/system-health', {
                method: 'GET',
                headers: {
                    Authorization: 'Bearer valid-token'
                }
            });
            const response = await (0, _route.GET)(request);
            (0, _globals.expect)(response.status).toBe(403);
        });
    });
    (0, _globals.describe)('Error Handling', ()=>{
        (0, _globals.it)('should handle database connection errors', async ()=>{
            // Mock database error
            const supabaseAdminModule = await Promise.resolve().then(()=>/*#__PURE__*/ _interop_require_wildcard(require("../../../lib/supabase/admin")));
            const supabaseAdmin = supabaseAdminModule.supabaseAdmin;
            supabaseAdmin.auth.getUser.mockRejectedValueOnce(new Error('Database connection failed'));
            const request = new _server.NextRequest('http://localhost:3000/api/super-admin/system-health', {
                method: 'GET',
                headers: {
                    Authorization: 'Bearer valid-token'
                }
            });
            const response = await (0, _route.GET)(request);
            (0, _globals.expect)(response.status).toBe(500);
        });
        (0, _globals.it)('should handle invalid JSON in POST requests', async ()=>{
            const request = new _server.NextRequest('http://localhost:3000/api/super-admin/tenants', {
                method: 'POST',
                headers: {
                    Authorization: 'Bearer valid-token',
                    'Content-Type': 'application/json'
                },
                body: 'invalid json{'
            });
            const response = await (0, _route2.POST)(request);
            (0, _globals.expect)(response.status).toBe(400);
        });
    });
    (0, _globals.describe)('Response Format Validation', ()=>{
        (0, _globals.it)('should return consistent response format for all endpoints', async ()=>{
            const endpoints = [
                {
                    handler: _route.GET,
                    path: '/api/super-admin/system-health'
                },
                {
                    handler: _route1.GET,
                    path: '/api/super-admin/system-health/quick'
                },
                {
                    handler: _route2.GET,
                    path: '/api/super-admin/tenants'
                },
                {
                    handler: _route3.GET,
                    path: '/api/super-admin/domains'
                }
            ];
            for (const endpoint of endpoints){
                const request = new _server.NextRequest(`http://localhost:3000${endpoint.path}`, {
                    method: 'GET',
                    headers: {
                        Authorization: 'Bearer valid-token'
                    }
                });
                const response = await endpoint.handler(request);
                const data = await response.json();
                (0, _globals.expect)(data).toHaveProperty('success');
                (0, _globals.expect)(data).toHaveProperty('data');
                (0, _globals.expect)(typeof data.success).toBe('boolean');
            }
        });
    });
});

//# sourceMappingURL=data:application/json;base64,