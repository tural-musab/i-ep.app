3fe3c1437f38912777362f13fa001c82
/**
 * API Endpoint Security Tests
 * API endpoint'lerinin güvenlik testleri
 */ "use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
const _globals = require("@jest/globals");
const _route = require("../../../../app/api/super-admin/users/route");
(0, _globals.describe)('API Endpoint Security', ()=>{
    (0, _globals.beforeEach)(()=>{
        _globals.jest.clearAllMocks();
        (0, _route.resetRateLimit)();
    });
    function createMockRequest(options) {
        const headers = new Headers();
        if (options.headers) {
            Object.entries(options.headers).forEach(([key, value])=>{
                headers.append(key, value);
            });
        }
        const init = {
            method: options.method,
            headers
        };
        if (options.body) {
            init.body = JSON.stringify(options.body);
        }
        return new Request(options.url, init);
    }
    (0, _globals.describe)('Authentication Headers', ()=>{
        (0, _globals.it)('should reject requests without proper auth headers', async ()=>{
            const req = createMockRequest({
                method: 'GET',
                url: 'http://localhost:3000/api/super-admin/users'
            });
            const response = await (0, _route.GET)(req);
            (0, _globals.expect)(response.status).toBe(401);
        });
        (0, _globals.it)('should validate service role token format', async ()=>{
            const req = createMockRequest({
                method: 'GET',
                url: 'http://localhost:3000/api/super-admin/users',
                headers: {
                    Authorization: 'InvalidToken'
                }
            });
            const response = await (0, _route.GET)(req);
            (0, _globals.expect)(response.status).toBe(401);
        });
    });
    (0, _globals.describe)('Rate Limiting', ()=>{
        (0, _globals.it)('should enforce rate limits even with service role', async ()=>{
            const requests = Array(10).fill(null).map(()=>{
                return createMockRequest({
                    method: 'GET',
                    url: 'http://localhost:3000/api/super-admin/users',
                    headers: {
                        Authorization: 'Bearer validToken'
                    }
                });
            });
            // Sıralı olarak istekleri gönder
            for (const req of requests){
                const response = await (0, _route.GET)(req);
                if (response.status === 429) {
                    // Rate limit aşıldı
                    return;
                }
            }
            // Rate limit aşılmadıysa test başarısız
            (0, _globals.expect)('Rate limit should have been exceeded').toBe(false);
        });
    });
    (0, _globals.describe)('Input Validation', ()=>{
        (0, _globals.it)('should validate and sanitize query parameters', async ()=>{
            const req = createMockRequest({
                method: 'GET',
                url: 'http://localhost:3000/api/super-admin/users?query=DROP TABLE users',
                headers: {
                    Authorization: 'Bearer validToken'
                }
            });
            const response = await (0, _route.GET)(req);
            (0, _globals.expect)(response.status).toBe(400);
        });
        (0, _globals.it)('should validate request body content', async ()=>{
            const req = createMockRequest({
                method: 'POST',
                url: 'http://localhost:3000/api/super-admin/users',
                headers: {
                    Authorization: 'Bearer validToken'
                },
                body: {
                    name: '<script>alert("xss")</script>'
                }
            });
            const response = await (0, _route.POST)(req);
            (0, _globals.expect)(response.status).toBe(400);
        });
    });
    (0, _globals.describe)('Error Handling', ()=>{
        (0, _globals.it)('should not expose sensitive information in errors', async ()=>{
            const req = createMockRequest({
                method: 'GET',
                url: 'http://localhost:3000/api/super-admin/users/invalid',
                headers: {
                    Authorization: 'Bearer validToken'
                }
            });
            const response = await (0, _route.GET)(req);
            (0, _globals.expect)(response.status).toBe(404);
            const data = await response.json();
            (0, _globals.expect)(data).not.toHaveProperty('stack');
            (0, _globals.expect)(data).not.toHaveProperty('query');
        });
    });
    (0, _globals.describe)('Tenant Context', ()=>{
        (0, _globals.it)('should enforce tenant context in headers', async ()=>{
            const req = createMockRequest({
                method: 'GET',
                url: 'http://localhost:3000/api/super-admin/users/tenant/123',
                headers: {
                    Authorization: 'Bearer validToken'
                }
            });
            const response = await (0, _route.GET)(req);
            (0, _globals.expect)(response.status).toBe(400);
            const data = await response.json();
            (0, _globals.expect)(data.message).toContain('tenant');
        });
    });
});

//# sourceMappingURL=data:application/json;base64,