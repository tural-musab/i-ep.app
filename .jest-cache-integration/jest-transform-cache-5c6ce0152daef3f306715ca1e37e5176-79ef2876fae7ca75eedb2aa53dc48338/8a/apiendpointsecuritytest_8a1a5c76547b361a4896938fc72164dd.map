{"version":3,"sources":["/Users/turanmusabosman/Projects/i-ep.app/src/__tests__/integration/quarantine/security/api-endpoint-security.test.ts"],"sourcesContent":["/**\n * API Endpoint Security Tests\n * API endpoint'lerinin güvenlik testleri\n */\n\nimport { describe, it, expect, beforeEach, jest } from '@jest/globals';\nimport { NextRequest } from 'next/server';\nimport { GET, POST, resetRateLimit } from '@/app/api/super-admin/users/route';\n\ndescribe('API Endpoint Security', () => {\n  beforeEach(() => {\n    jest.clearAllMocks();\n    resetRateLimit();\n  });\n\n  function createMockRequest(options: {\n    method: string;\n    url: string;\n    headers?: Record<string, string>;\n    body?: unknown;\n  }): Request {\n    const headers = new Headers();\n    if (options.headers) {\n      Object.entries(options.headers).forEach(([key, value]) => {\n        headers.append(key, value);\n      });\n    }\n\n    const init: RequestInit = {\n      method: options.method,\n      headers,\n    };\n\n    if (options.body) {\n      init.body = JSON.stringify(options.body);\n    }\n\n    return new Request(options.url, init);\n  }\n\n  describe('Authentication Headers', () => {\n    it('should reject requests without proper auth headers', async () => {\n      const req = createMockRequest({\n        method: 'GET',\n        url: 'http://localhost:3000/api/super-admin/users',\n      });\n\n      const response = await GET(req as NextRequest);\n      expect(response.status).toBe(401);\n    });\n\n    it('should validate service role token format', async () => {\n      const req = createMockRequest({\n        method: 'GET',\n        url: 'http://localhost:3000/api/super-admin/users',\n        headers: {\n          Authorization: 'InvalidToken',\n        },\n      });\n\n      const response = await GET(req as NextRequest);\n      expect(response.status).toBe(401);\n    });\n  });\n\n  describe('Rate Limiting', () => {\n    it('should enforce rate limits even with service role', async () => {\n      const requests = Array(10)\n        .fill(null)\n        .map(() => {\n          return createMockRequest({\n            method: 'GET',\n            url: 'http://localhost:3000/api/super-admin/users',\n            headers: {\n              Authorization: 'Bearer validToken',\n            },\n          });\n        });\n\n      // Sıralı olarak istekleri gönder\n      for (const req of requests) {\n        const response = await GET(req as NextRequest);\n        if (response.status === 429) {\n          // Rate limit aşıldı\n          return;\n        }\n      }\n\n      // Rate limit aşılmadıysa test başarısız\n      expect('Rate limit should have been exceeded').toBe(false);\n    });\n  });\n\n  describe('Input Validation', () => {\n    it('should validate and sanitize query parameters', async () => {\n      const req = createMockRequest({\n        method: 'GET',\n        url: 'http://localhost:3000/api/super-admin/users?query=DROP TABLE users',\n        headers: {\n          Authorization: 'Bearer validToken',\n        },\n      });\n\n      const response = await GET(req as NextRequest);\n      expect(response.status).toBe(400);\n    });\n\n    it('should validate request body content', async () => {\n      const req = createMockRequest({\n        method: 'POST',\n        url: 'http://localhost:3000/api/super-admin/users',\n        headers: {\n          Authorization: 'Bearer validToken',\n        },\n        body: {\n          name: '<script>alert(\"xss\")</script>',\n        },\n      });\n\n      const response = await POST(req as NextRequest);\n      expect(response.status).toBe(400);\n    });\n  });\n\n  describe('Error Handling', () => {\n    it('should not expose sensitive information in errors', async () => {\n      const req = createMockRequest({\n        method: 'GET',\n        url: 'http://localhost:3000/api/super-admin/users/invalid',\n        headers: {\n          Authorization: 'Bearer validToken',\n        },\n      });\n\n      const response = await GET(req as NextRequest);\n      expect(response.status).toBe(404);\n      const data = await response.json();\n      expect(data).not.toHaveProperty('stack');\n      expect(data).not.toHaveProperty('query');\n    });\n  });\n\n  describe('Tenant Context', () => {\n    it('should enforce tenant context in headers', async () => {\n      const req = createMockRequest({\n        method: 'GET',\n        url: 'http://localhost:3000/api/super-admin/users/tenant/123',\n        headers: {\n          Authorization: 'Bearer validToken',\n        },\n      });\n\n      const response = await GET(req as NextRequest);\n      expect(response.status).toBe(400);\n      const data = await response.json();\n      expect(data.message).toContain('tenant');\n    });\n  });\n});\n"],"names":["describe","beforeEach","jest","clearAllMocks","resetRateLimit","createMockRequest","options","headers","Headers","Object","entries","forEach","key","value","append","init","method","body","JSON","stringify","Request","url","it","req","response","GET","expect","status","toBe","Authorization","requests","Array","fill","map","name","POST","data","json","not","toHaveProperty","message","toContain"],"mappings":"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"}