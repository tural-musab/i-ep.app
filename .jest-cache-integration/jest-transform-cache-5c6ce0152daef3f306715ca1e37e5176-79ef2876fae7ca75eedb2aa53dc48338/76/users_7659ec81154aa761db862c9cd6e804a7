b6d49779a6f45089800f0f312bc9863e
/**
 * Kullanıcı tipi
 */ "use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    ApiError: function() {
        return ApiError;
    },
    createUser: function() {
        return createUser;
    },
    deleteUser: function() {
        return deleteUser;
    },
    fetchUsers: function() {
        return fetchUsers;
    },
    updateUser: function() {
        return updateUser;
    }
});
class ApiError extends Error {
    constructor(message, statusCode = 500){
        super(message);
        this.statusCode = statusCode;
        this.name = 'ApiError';
    }
}
async function fetchUsers(role) {
    try {
        const url = new URL('/api/v1/users', window.location.origin);
        if (role) {
            url.searchParams.append('role', role);
        }
        const response = await fetch(url.toString());
        if (!response.ok) {
            const errorData = await response.json();
            throw new ApiError(errorData.error || 'Kullanıcılar getirilirken bir hata oluştu', response.status);
        }
        return await response.json();
    } catch (error) {
        if (error instanceof ApiError) {
            throw error;
        }
        throw new ApiError('Kullanıcılar getirilirken bir hata oluştu');
    }
}
async function createUser(userData) {
    try {
        const response = await fetch('/api/v1/users', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify(userData)
        });
        if (!response.ok) {
            const errorData = await response.json();
            throw new ApiError(errorData.error || 'Kullanıcı oluşturulurken bir hata oluştu', response.status);
        }
        return await response.json();
    } catch (error) {
        if (error instanceof ApiError) {
            throw error;
        }
        throw new ApiError('Kullanıcı oluşturulurken bir hata oluştu');
    }
}
async function updateUser(id, userData) {
    try {
        const response = await fetch(`/api/v1/users/${id}`, {
            method: 'PATCH',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify(userData)
        });
        if (!response.ok) {
            const errorData = await response.json();
            throw new ApiError(errorData.error || 'Kullanıcı güncellenirken bir hata oluştu', response.status);
        }
        return await response.json();
    } catch (error) {
        if (error instanceof ApiError) {
            throw error;
        }
        throw new ApiError('Kullanıcı güncellenirken bir hata oluştu');
    }
}
async function deleteUser(id) {
    try {
        const response = await fetch(`/api/v1/users/${id}`, {
            method: 'DELETE'
        });
        if (!response.ok) {
            const errorData = await response.json();
            throw new ApiError(errorData.error || 'Kullanıcı silinirken bir hata oluştu', response.status);
        }
    } catch (error) {
        if (error instanceof ApiError) {
            throw error;
        }
        throw new ApiError('Kullanıcı silinirken bir hata oluştu');
    }
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy90dXJhbm11c2Fib3NtYW4vUHJvamVjdHMvaS1lcC5hcHAvc3JjL2xpYi9hcGkvdXNlcnMudHMiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBLdWxsYW7EsWPEsSB0aXBpXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgVXNlciB7XG4gIGlkOiBzdHJpbmc7XG4gIGZ1bGxfbmFtZTogc3RyaW5nO1xuICBlbWFpbDogc3RyaW5nO1xuICByb2xlOiBzdHJpbmc7XG4gIGF2YXRhcl91cmw6IHN0cmluZyB8IG51bGw7XG4gIGxhc3RfbG9naW46IHN0cmluZyB8IG51bGw7XG4gIGNyZWF0ZWRfYXQ/OiBzdHJpbmc7XG59XG5cbi8qKlxuICogWWVuaSBrdWxsYW7EsWPEsSBvbHXFn3R1cm1hayBpw6dpbiB0aXBcbiAqL1xuZXhwb3J0IGludGVyZmFjZSBDcmVhdGVVc2VySW5wdXQge1xuICBmdWxsX25hbWU6IHN0cmluZztcbiAgZW1haWw6IHN0cmluZztcbiAgcm9sZTogc3RyaW5nO1xuICBwaG9uZT86IHN0cmluZztcbn1cblxuLyoqXG4gKiBBUEkgaGF0YSBzxLFuxLFmxLFcbiAqL1xuZXhwb3J0IGNsYXNzIEFwaUVycm9yIGV4dGVuZHMgRXJyb3Ige1xuICBzdGF0dXNDb2RlOiBudW1iZXI7XG5cbiAgY29uc3RydWN0b3IobWVzc2FnZTogc3RyaW5nLCBzdGF0dXNDb2RlOiBudW1iZXIgPSA1MDApIHtcbiAgICBzdXBlcihtZXNzYWdlKTtcbiAgICB0aGlzLnN0YXR1c0NvZGUgPSBzdGF0dXNDb2RlO1xuICAgIHRoaXMubmFtZSA9ICdBcGlFcnJvcic7XG4gIH1cbn1cblxuLyoqXG4gKiBUw7xtIGt1bGxhbsSxY8SxbGFyxLEgZ2V0aXJcbiAqL1xuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGZldGNoVXNlcnMocm9sZT86IHN0cmluZyk6IFByb21pc2U8VXNlcltdPiB7XG4gIHRyeSB7XG4gICAgY29uc3QgdXJsID0gbmV3IFVSTCgnL2FwaS92MS91c2VycycsIHdpbmRvdy5sb2NhdGlvbi5vcmlnaW4pO1xuXG4gICAgaWYgKHJvbGUpIHtcbiAgICAgIHVybC5zZWFyY2hQYXJhbXMuYXBwZW5kKCdyb2xlJywgcm9sZSk7XG4gICAgfVxuXG4gICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBmZXRjaCh1cmwudG9TdHJpbmcoKSk7XG5cbiAgICBpZiAoIXJlc3BvbnNlLm9rKSB7XG4gICAgICBjb25zdCBlcnJvckRhdGEgPSBhd2FpdCByZXNwb25zZS5qc29uKCk7XG4gICAgICB0aHJvdyBuZXcgQXBpRXJyb3IoXG4gICAgICAgIGVycm9yRGF0YS5lcnJvciB8fCAnS3VsbGFuxLFjxLFsYXIgZ2V0aXJpbGlya2VuIGJpciBoYXRhIG9sdcWfdHUnLFxuICAgICAgICByZXNwb25zZS5zdGF0dXNcbiAgICAgICk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGF3YWl0IHJlc3BvbnNlLmpzb24oKTtcbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICBpZiAoZXJyb3IgaW5zdGFuY2VvZiBBcGlFcnJvcikge1xuICAgICAgdGhyb3cgZXJyb3I7XG4gICAgfVxuICAgIHRocm93IG5ldyBBcGlFcnJvcignS3VsbGFuxLFjxLFsYXIgZ2V0aXJpbGlya2VuIGJpciBoYXRhIG9sdcWfdHUnKTtcbiAgfVxufVxuXG4vKipcbiAqIEt1bGxhbsSxY8SxIG9sdcWfdHVyXG4gKi9cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBjcmVhdGVVc2VyKHVzZXJEYXRhOiBDcmVhdGVVc2VySW5wdXQpOiBQcm9taXNlPFVzZXI+IHtcbiAgdHJ5IHtcbiAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IGZldGNoKCcvYXBpL3YxL3VzZXJzJywge1xuICAgICAgbWV0aG9kOiAnUE9TVCcsXG4gICAgICBoZWFkZXJzOiB7XG4gICAgICAgICdDb250ZW50LVR5cGUnOiAnYXBwbGljYXRpb24vanNvbicsXG4gICAgICB9LFxuICAgICAgYm9keTogSlNPTi5zdHJpbmdpZnkodXNlckRhdGEpLFxuICAgIH0pO1xuXG4gICAgaWYgKCFyZXNwb25zZS5vaykge1xuICAgICAgY29uc3QgZXJyb3JEYXRhID0gYXdhaXQgcmVzcG9uc2UuanNvbigpO1xuICAgICAgdGhyb3cgbmV3IEFwaUVycm9yKFxuICAgICAgICBlcnJvckRhdGEuZXJyb3IgfHwgJ0t1bGxhbsSxY8SxIG9sdcWfdHVydWx1cmtlbiBiaXIgaGF0YSBvbHXFn3R1JyxcbiAgICAgICAgcmVzcG9uc2Uuc3RhdHVzXG4gICAgICApO1xuICAgIH1cblxuICAgIHJldHVybiBhd2FpdCByZXNwb25zZS5qc29uKCk7XG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgaWYgKGVycm9yIGluc3RhbmNlb2YgQXBpRXJyb3IpIHtcbiAgICAgIHRocm93IGVycm9yO1xuICAgIH1cbiAgICB0aHJvdyBuZXcgQXBpRXJyb3IoJ0t1bGxhbsSxY8SxIG9sdcWfdHVydWx1cmtlbiBiaXIgaGF0YSBvbHXFn3R1Jyk7XG4gIH1cbn1cblxuLyoqXG4gKiBLdWxsYW7EsWPEsSBiaWxnaWxlcmluaSBnw7xuY2VsbGVcbiAqL1xuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIHVwZGF0ZVVzZXIoaWQ6IHN0cmluZywgdXNlckRhdGE6IFBhcnRpYWw8Q3JlYXRlVXNlcklucHV0Pik6IFByb21pc2U8VXNlcj4ge1xuICB0cnkge1xuICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgZmV0Y2goYC9hcGkvdjEvdXNlcnMvJHtpZH1gLCB7XG4gICAgICBtZXRob2Q6ICdQQVRDSCcsXG4gICAgICBoZWFkZXJzOiB7XG4gICAgICAgICdDb250ZW50LVR5cGUnOiAnYXBwbGljYXRpb24vanNvbicsXG4gICAgICB9LFxuICAgICAgYm9keTogSlNPTi5zdHJpbmdpZnkodXNlckRhdGEpLFxuICAgIH0pO1xuXG4gICAgaWYgKCFyZXNwb25zZS5vaykge1xuICAgICAgY29uc3QgZXJyb3JEYXRhID0gYXdhaXQgcmVzcG9uc2UuanNvbigpO1xuICAgICAgdGhyb3cgbmV3IEFwaUVycm9yKFxuICAgICAgICBlcnJvckRhdGEuZXJyb3IgfHwgJ0t1bGxhbsSxY8SxIGfDvG5jZWxsZW5pcmtlbiBiaXIgaGF0YSBvbHXFn3R1JyxcbiAgICAgICAgcmVzcG9uc2Uuc3RhdHVzXG4gICAgICApO1xuICAgIH1cblxuICAgIHJldHVybiBhd2FpdCByZXNwb25zZS5qc29uKCk7XG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgaWYgKGVycm9yIGluc3RhbmNlb2YgQXBpRXJyb3IpIHtcbiAgICAgIHRocm93IGVycm9yO1xuICAgIH1cbiAgICB0aHJvdyBuZXcgQXBpRXJyb3IoJ0t1bGxhbsSxY8SxIGfDvG5jZWxsZW5pcmtlbiBiaXIgaGF0YSBvbHXFn3R1Jyk7XG4gIH1cbn1cblxuLyoqXG4gKiBLdWxsYW7EsWPEsSBzaWxcbiAqL1xuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGRlbGV0ZVVzZXIoaWQ6IHN0cmluZyk6IFByb21pc2U8dm9pZD4ge1xuICB0cnkge1xuICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgZmV0Y2goYC9hcGkvdjEvdXNlcnMvJHtpZH1gLCB7XG4gICAgICBtZXRob2Q6ICdERUxFVEUnLFxuICAgIH0pO1xuXG4gICAgaWYgKCFyZXNwb25zZS5vaykge1xuICAgICAgY29uc3QgZXJyb3JEYXRhID0gYXdhaXQgcmVzcG9uc2UuanNvbigpO1xuICAgICAgdGhyb3cgbmV3IEFwaUVycm9yKFxuICAgICAgICBlcnJvckRhdGEuZXJyb3IgfHwgJ0t1bGxhbsSxY8SxIHNpbGluaXJrZW4gYmlyIGhhdGEgb2x1xZ90dScsXG4gICAgICAgIHJlc3BvbnNlLnN0YXR1c1xuICAgICAgKTtcbiAgICB9XG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgaWYgKGVycm9yIGluc3RhbmNlb2YgQXBpRXJyb3IpIHtcbiAgICAgIHRocm93IGVycm9yO1xuICAgIH1cbiAgICB0aHJvdyBuZXcgQXBpRXJyb3IoJ0t1bGxhbsSxY8SxIHNpbGluaXJrZW4gYmlyIGhhdGEgb2x1xZ90dScpO1xuICB9XG59XG4iXSwibmFtZXMiOlsiQXBpRXJyb3IiLCJjcmVhdGVVc2VyIiwiZGVsZXRlVXNlciIsImZldGNoVXNlcnMiLCJ1cGRhdGVVc2VyIiwiRXJyb3IiLCJjb25zdHJ1Y3RvciIsIm1lc3NhZ2UiLCJzdGF0dXNDb2RlIiwibmFtZSIsInJvbGUiLCJ1cmwiLCJVUkwiLCJ3aW5kb3ciLCJsb2NhdGlvbiIsIm9yaWdpbiIsInNlYXJjaFBhcmFtcyIsImFwcGVuZCIsInJlc3BvbnNlIiwiZmV0Y2giLCJ0b1N0cmluZyIsIm9rIiwiZXJyb3JEYXRhIiwianNvbiIsImVycm9yIiwic3RhdHVzIiwidXNlckRhdGEiLCJtZXRob2QiLCJoZWFkZXJzIiwiYm9keSIsIkpTT04iLCJzdHJpbmdpZnkiLCJpZCJdLCJtYXBwaW5ncyI6IkFBQUE7O0NBRUM7Ozs7Ozs7Ozs7O0lBd0JZQSxRQUFRO2VBQVJBOztJQTJDU0MsVUFBVTtlQUFWQTs7SUE0REFDLFVBQVU7ZUFBVkE7O0lBMUZBQyxVQUFVO2VBQVZBOztJQTREQUMsVUFBVTtlQUFWQTs7O0FBekVmLE1BQU1KLGlCQUFpQks7SUFHNUJDLFlBQVlDLE9BQWUsRUFBRUMsYUFBcUIsR0FBRyxDQUFFO1FBQ3JELEtBQUssQ0FBQ0Q7UUFDTixJQUFJLENBQUNDLFVBQVUsR0FBR0E7UUFDbEIsSUFBSSxDQUFDQyxJQUFJLEdBQUc7SUFDZDtBQUNGO0FBS08sZUFBZU4sV0FBV08sSUFBYTtJQUM1QyxJQUFJO1FBQ0YsTUFBTUMsTUFBTSxJQUFJQyxJQUFJLGlCQUFpQkMsT0FBT0MsUUFBUSxDQUFDQyxNQUFNO1FBRTNELElBQUlMLE1BQU07WUFDUkMsSUFBSUssWUFBWSxDQUFDQyxNQUFNLENBQUMsUUFBUVA7UUFDbEM7UUFFQSxNQUFNUSxXQUFXLE1BQU1DLE1BQU1SLElBQUlTLFFBQVE7UUFFekMsSUFBSSxDQUFDRixTQUFTRyxFQUFFLEVBQUU7WUFDaEIsTUFBTUMsWUFBWSxNQUFNSixTQUFTSyxJQUFJO1lBQ3JDLE1BQU0sSUFBSXZCLFNBQ1JzQixVQUFVRSxLQUFLLElBQUksNkNBQ25CTixTQUFTTyxNQUFNO1FBRW5CO1FBRUEsT0FBTyxNQUFNUCxTQUFTSyxJQUFJO0lBQzVCLEVBQUUsT0FBT0MsT0FBTztRQUNkLElBQUlBLGlCQUFpQnhCLFVBQVU7WUFDN0IsTUFBTXdCO1FBQ1I7UUFDQSxNQUFNLElBQUl4QixTQUFTO0lBQ3JCO0FBQ0Y7QUFLTyxlQUFlQyxXQUFXeUIsUUFBeUI7SUFDeEQsSUFBSTtRQUNGLE1BQU1SLFdBQVcsTUFBTUMsTUFBTSxpQkFBaUI7WUFDNUNRLFFBQVE7WUFDUkMsU0FBUztnQkFDUCxnQkFBZ0I7WUFDbEI7WUFDQUMsTUFBTUMsS0FBS0MsU0FBUyxDQUFDTDtRQUN2QjtRQUVBLElBQUksQ0FBQ1IsU0FBU0csRUFBRSxFQUFFO1lBQ2hCLE1BQU1DLFlBQVksTUFBTUosU0FBU0ssSUFBSTtZQUNyQyxNQUFNLElBQUl2QixTQUNSc0IsVUFBVUUsS0FBSyxJQUFJLDRDQUNuQk4sU0FBU08sTUFBTTtRQUVuQjtRQUVBLE9BQU8sTUFBTVAsU0FBU0ssSUFBSTtJQUM1QixFQUFFLE9BQU9DLE9BQU87UUFDZCxJQUFJQSxpQkFBaUJ4QixVQUFVO1lBQzdCLE1BQU13QjtRQUNSO1FBQ0EsTUFBTSxJQUFJeEIsU0FBUztJQUNyQjtBQUNGO0FBS08sZUFBZUksV0FBVzRCLEVBQVUsRUFBRU4sUUFBa0M7SUFDN0UsSUFBSTtRQUNGLE1BQU1SLFdBQVcsTUFBTUMsTUFBTSxDQUFDLGNBQWMsRUFBRWEsSUFBSSxFQUFFO1lBQ2xETCxRQUFRO1lBQ1JDLFNBQVM7Z0JBQ1AsZ0JBQWdCO1lBQ2xCO1lBQ0FDLE1BQU1DLEtBQUtDLFNBQVMsQ0FBQ0w7UUFDdkI7UUFFQSxJQUFJLENBQUNSLFNBQVNHLEVBQUUsRUFBRTtZQUNoQixNQUFNQyxZQUFZLE1BQU1KLFNBQVNLLElBQUk7WUFDckMsTUFBTSxJQUFJdkIsU0FDUnNCLFVBQVVFLEtBQUssSUFBSSw0Q0FDbkJOLFNBQVNPLE1BQU07UUFFbkI7UUFFQSxPQUFPLE1BQU1QLFNBQVNLLElBQUk7SUFDNUIsRUFBRSxPQUFPQyxPQUFPO1FBQ2QsSUFBSUEsaUJBQWlCeEIsVUFBVTtZQUM3QixNQUFNd0I7UUFDUjtRQUNBLE1BQU0sSUFBSXhCLFNBQVM7SUFDckI7QUFDRjtBQUtPLGVBQWVFLFdBQVc4QixFQUFVO0lBQ3pDLElBQUk7UUFDRixNQUFNZCxXQUFXLE1BQU1DLE1BQU0sQ0FBQyxjQUFjLEVBQUVhLElBQUksRUFBRTtZQUNsREwsUUFBUTtRQUNWO1FBRUEsSUFBSSxDQUFDVCxTQUFTRyxFQUFFLEVBQUU7WUFDaEIsTUFBTUMsWUFBWSxNQUFNSixTQUFTSyxJQUFJO1lBQ3JDLE1BQU0sSUFBSXZCLFNBQ1JzQixVQUFVRSxLQUFLLElBQUksd0NBQ25CTixTQUFTTyxNQUFNO1FBRW5CO0lBQ0YsRUFBRSxPQUFPRCxPQUFPO1FBQ2QsSUFBSUEsaUJBQWlCeEIsVUFBVTtZQUM3QixNQUFNd0I7UUFDUjtRQUNBLE1BQU0sSUFBSXhCLFNBQVM7SUFDckI7QUFDRiJ9