ff061eea5bfbfff51d7991f1a0772d7e
/**
 * Base Repository Pattern Implementation
 * Sprint 2 BL-001: Repository Pattern Foundation
 * Ä°-EP.APP Multi-tenant SaaS - Database Access Layer
 */ "use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    BaseRepository: function() {
        return BaseRepository;
    },
    RepositoryFactory: function() {
        return RepositoryFactory;
    }
});
const _client = require("../supabase/client");
class BaseRepository {
    constructor(tableName, tenantId){
        this.supabase = (0, _client.createClient)();
        this.tableName = tableName;
        this.tenantId = tenantId;
    }
    /**
   * Tenant-aware base query builder
   */ getBaseQuery() {
        return this.supabase.from(this.tableName).select('*').eq('tenant_id', this.tenantId);
    }
    /**
   * Find entity by ID with tenant isolation
   */ async findById(id) {
        const { data, error } = await this.getBaseQuery().eq('id', id).single();
        if (error) {
            if (error.code === 'PGRST116') {
                return null; // Not found
            }
            throw new Error(`Repository error: ${error.message}`);
        }
        return data;
    }
    /**
   * Find all entities with pagination and filtering
   */ async findAll(options = {}) {
        const { page = 1, limit = 10, sortBy = 'created_at', sortOrder = 'desc', filters = {} } = options;
        let query = this.getBaseQuery();
        // Apply filters
        Object.entries(filters).forEach(([key, value])=>{
            if (value !== undefined && value !== null) {
                query = query.eq(key, value);
            }
        });
        // Apply sorting
        query = query.order(sortBy, {
            ascending: sortOrder === 'asc'
        });
        // Apply pagination
        const from = (page - 1) * limit;
        const to = from + limit - 1;
        const { data, error, count } = await query.range(from, to).select('*', {
            count: 'exact'
        });
        if (error) {
            throw new Error(`Repository error: ${error.message}`);
        }
        const totalPages = Math.ceil((count || 0) / limit);
        return {
            data: data,
            count: count || 0,
            page,
            totalPages,
            hasMore: page < totalPages
        };
    }
    /**
   * Create new entity with tenant isolation
   */ async create(entity) {
        const { data, error } = await this.supabase.from(this.tableName).insert({
            ...entity,
            tenant_id: this.tenantId
        }).select().single();
        if (error) {
            throw new Error(`Repository error: ${error.message}`);
        }
        return data;
    }
    /**
   * Update entity with tenant isolation
   */ async update(id, updates) {
        const { data, error } = await this.supabase.from(this.tableName).update({
            ...updates,
            updated_at: new Date().toISOString()
        }).eq('id', id).eq('tenant_id', this.tenantId).select().single();
        if (error) {
            if (error.code === 'PGRST116') {
                return null; // Not found
            }
            throw new Error(`Repository error: ${error.message}`);
        }
        return data;
    }
    /**
   * Delete entity with tenant isolation
   */ async delete(id) {
        const { error } = await this.supabase.from(this.tableName).delete().eq('id', id).eq('tenant_id', this.tenantId);
        if (error) {
            throw new Error(`Repository error: ${error.message}`);
        }
        return true;
    }
    /**
   * Count entities with optional filtering
   */ async count(filters = {}) {
        let query = this.getBaseQuery();
        // Apply filters
        Object.entries(filters).forEach(([key, value])=>{
            if (value !== undefined && value !== null) {
                query = query.eq(key, value);
            }
        });
        const { count, error } = await query.select('*', {
            count: 'exact',
            head: true
        });
        if (error) {
            throw new Error(`Repository error: ${error.message}`);
        }
        return count || 0;
    }
    /**
   * Check if entity exists
   */ async exists(id) {
        const { data, error } = await this.getBaseQuery().eq('id', id).select('id').limit(1);
        if (error) {
            throw new Error(`Repository error: ${error.message}`);
        }
        return data && data.length > 0;
    }
    /**
   * Transaction wrapper
   */ async transaction(operation) {
        // Supabase handles transactions automatically for single operations
        // For complex transactions, we would need to use stored procedures
        return await operation(this.supabase);
    }
    /**
   * Custom query method for complex queries
   */ async customQuery(query, params = []) {
        const { data, error } = await this.supabase.rpc('execute_custom_query', {
            query_text: query,
            query_params: params,
            tenant_id: this.tenantId
        });
        if (error) {
            throw new Error(`Repository error: ${error.message}`);
        }
        return data;
    }
}
class RepositoryFactory {
    static{
        this.repositories = new Map();
    }
    static getRepository(repositoryClass, tenantId) {
        const key = `${repositoryClass.name}_${tenantId}`;
        if (!this.repositories.has(key)) {
            this.repositories.set(key, new repositoryClass(tenantId));
        }
        return this.repositories.get(key);
    }
    static clearCache(tenantId) {
        if (tenantId) {
            // Clear specific tenant repositories
            for (const key of this.repositories.keys()){
                if (key.endsWith(`_${tenantId}`)) {
                    this.repositories.delete(key);
                }
            }
        } else {
            // Clear all repositories
            this.repositories.clear();
        }
    }
}

//# sourceMappingURL=data:application/json;base64,