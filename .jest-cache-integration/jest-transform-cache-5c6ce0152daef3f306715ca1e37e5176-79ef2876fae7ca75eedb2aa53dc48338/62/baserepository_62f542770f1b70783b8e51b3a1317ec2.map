{"version":3,"sources":["/Users/turanmusabosman/Projects/i-ep.app/src/lib/repository/base-repository.ts"],"sourcesContent":["/**\n * Base Repository Pattern Implementation\n * Sprint 2 BL-001: Repository Pattern Foundation\n * Ä°-EP.APP Multi-tenant SaaS - Database Access Layer\n */\n\nimport { createClient } from '@/lib/supabase/client';\nimport { Database } from '@/types/database';\n\nexport interface BaseEntity {\n  id: string;\n  created_at: string;\n  updated_at: string;\n  tenant_id: string;\n}\n\nexport interface QueryOptions {\n  page?: number;\n  limit?: number;\n  sortBy?: string;\n  sortOrder?: 'asc' | 'desc';\n  filters?: Record<string, any>;\n}\n\nexport interface QueryResult<T> {\n  data: T[];\n  count: number;\n  page: number;\n  totalPages: number;\n  hasMore: boolean;\n}\n\nexport abstract class BaseRepository<T extends BaseEntity> {\n  protected supabase;\n  protected tableName: string;\n  protected tenantId: string;\n\n  constructor(tableName: string, tenantId: string) {\n    this.supabase = createClient();\n    this.tableName = tableName;\n    this.tenantId = tenantId;\n  }\n\n  /**\n   * Tenant-aware base query builder\n   */\n  protected getBaseQuery() {\n    return this.supabase.from(this.tableName).select('*').eq('tenant_id', this.tenantId);\n  }\n\n  /**\n   * Find entity by ID with tenant isolation\n   */\n  async findById(id: string): Promise<T | null> {\n    const { data, error } = await this.getBaseQuery().eq('id', id).single();\n\n    if (error) {\n      if (error.code === 'PGRST116') {\n        return null; // Not found\n      }\n      throw new Error(`Repository error: ${error.message}`);\n    }\n\n    return data as T;\n  }\n\n  /**\n   * Find all entities with pagination and filtering\n   */\n  async findAll(options: QueryOptions = {}): Promise<QueryResult<T>> {\n    const {\n      page = 1,\n      limit = 10,\n      sortBy = 'created_at',\n      sortOrder = 'desc',\n      filters = {},\n    } = options;\n\n    let query = this.getBaseQuery();\n\n    // Apply filters\n    Object.entries(filters).forEach(([key, value]) => {\n      if (value !== undefined && value !== null) {\n        query = query.eq(key, value);\n      }\n    });\n\n    // Apply sorting\n    query = query.order(sortBy, { ascending: sortOrder === 'asc' });\n\n    // Apply pagination\n    const from = (page - 1) * limit;\n    const to = from + limit - 1;\n\n    const { data, error, count } = await query.range(from, to).select('*', { count: 'exact' });\n\n    if (error) {\n      throw new Error(`Repository error: ${error.message}`);\n    }\n\n    const totalPages = Math.ceil((count || 0) / limit);\n\n    return {\n      data: data as T[],\n      count: count || 0,\n      page,\n      totalPages,\n      hasMore: page < totalPages,\n    };\n  }\n\n  /**\n   * Create new entity with tenant isolation\n   */\n  async create(entity: Omit<T, 'id' | 'created_at' | 'updated_at' | 'tenant_id'>): Promise<T> {\n    const { data, error } = await this.supabase\n      .from(this.tableName)\n      .insert({\n        ...entity,\n        tenant_id: this.tenantId,\n      })\n      .select()\n      .single();\n\n    if (error) {\n      throw new Error(`Repository error: ${error.message}`);\n    }\n\n    return data as T;\n  }\n\n  /**\n   * Update entity with tenant isolation\n   */\n  async update(\n    id: string,\n    updates: Partial<Omit<T, 'id' | 'created_at' | 'tenant_id'>>\n  ): Promise<T | null> {\n    const { data, error } = await this.supabase\n      .from(this.tableName)\n      .update({\n        ...updates,\n        updated_at: new Date().toISOString(),\n      })\n      .eq('id', id)\n      .eq('tenant_id', this.tenantId)\n      .select()\n      .single();\n\n    if (error) {\n      if (error.code === 'PGRST116') {\n        return null; // Not found\n      }\n      throw new Error(`Repository error: ${error.message}`);\n    }\n\n    return data as T;\n  }\n\n  /**\n   * Delete entity with tenant isolation\n   */\n  async delete(id: string): Promise<boolean> {\n    const { error } = await this.supabase\n      .from(this.tableName)\n      .delete()\n      .eq('id', id)\n      .eq('tenant_id', this.tenantId);\n\n    if (error) {\n      throw new Error(`Repository error: ${error.message}`);\n    }\n\n    return true;\n  }\n\n  /**\n   * Count entities with optional filtering\n   */\n  async count(filters: Record<string, any> = {}): Promise<number> {\n    let query = this.getBaseQuery();\n\n    // Apply filters\n    Object.entries(filters).forEach(([key, value]) => {\n      if (value !== undefined && value !== null) {\n        query = query.eq(key, value);\n      }\n    });\n\n    const { count, error } = await query.select('*', { count: 'exact', head: true });\n\n    if (error) {\n      throw new Error(`Repository error: ${error.message}`);\n    }\n\n    return count || 0;\n  }\n\n  /**\n   * Check if entity exists\n   */\n  async exists(id: string): Promise<boolean> {\n    const { data, error } = await this.getBaseQuery().eq('id', id).select('id').limit(1);\n\n    if (error) {\n      throw new Error(`Repository error: ${error.message}`);\n    }\n\n    return data && data.length > 0;\n  }\n\n  /**\n   * Transaction wrapper\n   */\n  async transaction<TResult>(\n    operation: (client: typeof this.supabase) => Promise<TResult>\n  ): Promise<TResult> {\n    // Supabase handles transactions automatically for single operations\n    // For complex transactions, we would need to use stored procedures\n    return await operation(this.supabase);\n  }\n\n  /**\n   * Custom query method for complex queries\n   */\n  protected async customQuery<TResult = any>(query: string, params: any[] = []): Promise<TResult> {\n    const { data, error } = await this.supabase.rpc('execute_custom_query', {\n      query_text: query,\n      query_params: params,\n      tenant_id: this.tenantId,\n    });\n\n    if (error) {\n      throw new Error(`Repository error: ${error.message}`);\n    }\n\n    return data as TResult;\n  }\n}\n\n/**\n * Repository Factory\n */\nexport class RepositoryFactory {\n  private static repositories = new Map<string, any>();\n\n  static getRepository<T extends BaseEntity>(\n    repositoryClass: new (tenantId: string) => BaseRepository<T>,\n    tenantId: string\n  ): BaseRepository<T> {\n    const key = `${repositoryClass.name}_${tenantId}`;\n\n    if (!this.repositories.has(key)) {\n      this.repositories.set(key, new repositoryClass(tenantId));\n    }\n\n    return this.repositories.get(key);\n  }\n\n  static clearCache(tenantId?: string) {\n    if (tenantId) {\n      // Clear specific tenant repositories\n      for (const key of this.repositories.keys()) {\n        if (key.endsWith(`_${tenantId}`)) {\n          this.repositories.delete(key);\n        }\n      }\n    } else {\n      // Clear all repositories\n      this.repositories.clear();\n    }\n  }\n}\n\nexport type { Database };\n"],"names":["BaseRepository","RepositoryFactory","constructor","tableName","tenantId","supabase","createClient","getBaseQuery","from","select","eq","findById","id","data","error","single","code","Error","message","findAll","options","page","limit","sortBy","sortOrder","filters","query","Object","entries","forEach","key","value","undefined","order","ascending","to","count","range","totalPages","Math","ceil","hasMore","create","entity","insert","tenant_id","update","updates","updated_at","Date","toISOString","delete","head","exists","length","transaction","operation","customQuery","params","rpc","query_text","query_params","repositories","Map","getRepository","repositoryClass","name","has","set","get","clearCache","keys","endsWith","clear"],"mappings":"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"}