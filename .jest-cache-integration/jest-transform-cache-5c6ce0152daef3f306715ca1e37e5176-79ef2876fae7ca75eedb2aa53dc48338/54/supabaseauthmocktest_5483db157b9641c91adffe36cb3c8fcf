7311fa964a94bdf30ac0af3eaaad7c17
"use strict";
// Mock the Supabase client
jest.mock('@supabase/auth-helpers-nextjs', ()=>({
        createClientComponentClient: jest.fn()
    }));
Object.defineProperty(exports, "__esModule", {
    value: true
});
const _globals = require("@jest/globals");
const _mswhelpers = require("../../../tests/fixtures/msw-helpers");
const _authhelpersnextjs = require("@supabase/auth-helpers-nextjs");
(0, _globals.describe)('Supabase Auth Integration Tests (Mocked)', ()=>{
    let mockSupabaseClient;
    (0, _globals.beforeAll)(()=>{
        _mswhelpers.TestEnvironmentHelper.setupTestEnvironment();
        _mswhelpers.TestEnvironmentHelper.setupMockServer();
    });
    (0, _globals.beforeEach)(()=>{
        // Mock Supabase client oluştur
        mockSupabaseClient = {
            auth: {
                signInWithPassword: jest.fn(),
                signUp: jest.fn(),
                signOut: jest.fn(),
                resetPasswordForEmail: jest.fn(),
                getSession: jest.fn(),
                onAuthStateChange: jest.fn(()=>({
                        data: {
                            subscription: {
                                unsubscribe: jest.fn()
                            }
                        }
                    }))
            },
            from: jest.fn(()=>({
                    select: jest.fn(()=>({
                            eq: jest.fn(()=>({
                                    single: jest.fn()
                                }))
                        }))
                }))
        };
        _authhelpersnextjs.createClientComponentClient.mockReturnValue(mockSupabaseClient);
        // Her test öncesinde mock'ları temizle
        _mswhelpers.TestEnvironmentHelper.cleanup();
    });
    (0, _globals.afterEach)(()=>{
        // Her test sonrasında mock'ları temizle
        _mswhelpers.TestEnvironmentHelper.cleanup();
        jest.clearAllMocks();
    });
    (0, _globals.afterAll)(()=>{
        // Test suite bittiğinde mock server'ı kapat
        _mswhelpers.TestEnvironmentHelper.teardown();
    });
    (0, _globals.describe)('User Sign In Tests', ()=>{
        (0, _globals.it)('should successfully sign in a user with valid credentials', async ()=>{
            // Arrange
            const email = 'test@example.com';
            const password = 'validPassword123';
            // Başarılı giriş mock'ını ayarla
            mockSupabaseClient.auth.signInWithPassword.mockResolvedValue({
                data: {
                    user: {
                        id: '550e8400-e29b-41d4-a716-446655440000',
                        email: email,
                        user_metadata: {
                            tenant_id: 'tenant-123',
                            role: 'admin'
                        }
                    },
                    session: {
                        access_token: 'test-access-token',
                        refresh_token: 'test-refresh-token'
                    }
                },
                error: null
            });
            // Act
            const result = await mockSupabaseClient.auth.signInWithPassword({
                email,
                password
            });
            // Assert
            (0, _globals.expect)(result.data.user).toBeDefined();
            (0, _globals.expect)(result.data.user.email).toBe(email);
            (0, _globals.expect)(result.data.user.user_metadata.tenant_id).toBe('tenant-123');
            (0, _globals.expect)(result.data.session).toBeDefined();
            (0, _globals.expect)(result.error).toBeNull();
            (0, _globals.expect)(mockSupabaseClient.auth.signInWithPassword).toHaveBeenCalledWith({
                email,
                password
            });
        });
        (0, _globals.it)('should fail to sign in with invalid credentials', async ()=>{
            // Arrange
            const email = 'test@example.com';
            const wrongPassword = 'wrongPassword';
            // Hatalı giriş mock'ını ayarla
            mockSupabaseClient.auth.signInWithPassword.mockResolvedValue({
                data: {
                    user: null,
                    session: null
                },
                error: {
                    name: 'AuthApiError',
                    message: 'Invalid login credentials',
                    status: 400
                }
            });
            // Act
            const result = await mockSupabaseClient.auth.signInWithPassword({
                email,
                password: wrongPassword
            });
            // Assert
            (0, _globals.expect)(result.data.user).toBeNull();
            (0, _globals.expect)(result.data.session).toBeNull();
            (0, _globals.expect)(result.error).toBeDefined();
            (0, _globals.expect)(result.error.message).toBe('Invalid login credentials');
            (0, _globals.expect)(result.error.status).toBe(400);
        });
        (0, _globals.it)('should handle tenant-specific user sign in', async ()=>{
            // Arrange
            const email = 'tenant-user@example.com';
            const password = 'tenantPassword123';
            const tenantId = 'tenant-456';
            // Tenant-specific giriş mock'ını ayarla
            mockSupabaseClient.auth.signInWithPassword.mockResolvedValue({
                data: {
                    user: {
                        id: '660e8400-e29b-41d4-a716-446655440001',
                        email: email,
                        user_metadata: {
                            tenant_id: tenantId,
                            role: 'teacher'
                        }
                    },
                    session: {
                        access_token: 'tenant-access-token',
                        refresh_token: 'tenant-refresh-token'
                    }
                },
                error: null
            });
            // Kullanıcı profil bilgilerini alma mock'ı
            mockSupabaseClient.from.mockReturnValue({
                select: jest.fn().mockReturnValue({
                    eq: jest.fn().mockReturnValue({
                        single: jest.fn().mockResolvedValue({
                            data: {
                                id: '660e8400-e29b-41d4-a716-446655440001',
                                email: email,
                                role: 'teacher',
                                tenant_id: tenantId,
                                is_active: true
                            },
                            error: null
                        })
                    })
                })
            });
            // Act
            const authResult = await mockSupabaseClient.auth.signInWithPassword({
                email,
                password
            });
            // Kullanıcı profil bilgilerini al
            const profileResult = await mockSupabaseClient.from('users').select('*').eq('auth_id', authResult.data.user.id).single();
            // Assert
            (0, _globals.expect)(authResult.data.user.user_metadata.tenant_id).toBe(tenantId);
            (0, _globals.expect)(profileResult.data.tenant_id).toBe(tenantId);
            (0, _globals.expect)(profileResult.data.role).toBe('teacher');
            (0, _globals.expect)(profileResult.data.is_active).toBe(true);
        });
    });
    (0, _globals.describe)('User Sign Up Tests', ()=>{
        (0, _globals.it)('should successfully sign up a new user', async ()=>{
            // Arrange
            const email = _mswhelpers.TestUtilityHelper.generateRandomEmail();
            const password = 'newUserPassword123';
            const tenantId = _mswhelpers.TestUtilityHelper.generateRandomTenantId();
            // Başarılı kayıt mock'ını ayarla
            mockSupabaseClient.auth.signUp.mockResolvedValue({
                data: {
                    user: {
                        id: '770e8400-e29b-41d4-a716-446655440002',
                        email: email,
                        email_confirmed_at: null,
                        user_metadata: {
                            tenant_id: tenantId,
                            role: 'student',
                            name: 'Yeni Kullanıcı'
                        }
                    },
                    session: null
                },
                error: null
            });
            // Act
            const result = await mockSupabaseClient.auth.signUp({
                email,
                password,
                options: {
                    data: {
                        tenant_id: tenantId,
                        role: 'student',
                        name: 'Yeni Kullanıcı'
                    }
                }
            });
            // Assert
            (0, _globals.expect)(result.data.user).toBeDefined();
            (0, _globals.expect)(result.data.user.email).toBe(email);
            (0, _globals.expect)(result.data.user.user_metadata.tenant_id).toBe(tenantId);
            (0, _globals.expect)(result.data.user.email_confirmed_at).toBeNull();
            (0, _globals.expect)(result.data.session).toBeNull(); // E-posta onayı bekleniyor
            (0, _globals.expect)(result.error).toBeNull();
        });
        (0, _globals.it)('should fail to sign up with an existing email', async ()=>{
            // Arrange
            const existingEmail = 'existing@example.com';
            const password = 'somePassword123';
            // E-posta zaten mevcut hatası mock'ını ayarla
            mockSupabaseClient.auth.signUp.mockResolvedValue({
                data: {
                    user: null,
                    session: null
                },
                error: {
                    name: 'AuthApiError',
                    message: 'User already registered',
                    status: 422
                }
            });
            // Act
            const result = await mockSupabaseClient.auth.signUp({
                email: existingEmail,
                password
            });
            // Assert
            (0, _globals.expect)(result.data.user).toBeNull();
            (0, _globals.expect)(result.data.session).toBeNull();
            (0, _globals.expect)(result.error).toBeDefined();
            (0, _globals.expect)(result.error.message).toBe('User already registered');
            (0, _globals.expect)(result.error.status).toBe(422);
        });
        (0, _globals.it)('should handle weak password during sign up', async ()=>{
            // Arrange
            const email = 'newuser@example.com';
            const weakPassword = '123'; // Çok zayıf şifre
            // Zayıf şifre hatası mock'ını ayarla
            mockSupabaseClient.auth.signUp.mockResolvedValue({
                data: {
                    user: null,
                    session: null
                },
                error: {
                    name: 'AuthApiError',
                    message: 'Password should be at least 6 characters',
                    status: 422
                }
            });
            // Act
            const result = await mockSupabaseClient.auth.signUp({
                email,
                password: weakPassword
            });
            // Assert
            (0, _globals.expect)(result.data.user).toBeNull();
            (0, _globals.expect)(result.error).toBeDefined();
            (0, _globals.expect)(result.error.message).toContain('Password should be at least');
        });
    });
    (0, _globals.describe)('Session Management Tests', ()=>{
        (0, _globals.it)('should retrieve existing user session', async ()=>{
            // Arrange
            const mockSession = {
                access_token: 'existing-access-token',
                refresh_token: 'existing-refresh-token',
                user: {
                    id: '550e8400-e29b-41d4-a716-446655440000',
                    email: 'session-user@example.com',
                    user_metadata: {
                        tenant_id: 'tenant-789',
                        role: 'admin'
                    }
                }
            };
            // Mevcut session mock'ını ayarla
            mockSupabaseClient.auth.getSession.mockResolvedValue({
                data: {
                    session: mockSession
                },
                error: null
            });
            // Act
            const result = await mockSupabaseClient.auth.getSession();
            // Assert
            (0, _globals.expect)(result.data.session).toBeDefined();
            (0, _globals.expect)(result.data.session.user.email).toBe('session-user@example.com');
            (0, _globals.expect)(result.data.session.user.user_metadata.tenant_id).toBe('tenant-789');
            (0, _globals.expect)(result.error).toBeNull();
        });
        (0, _globals.it)('should handle no existing session', async ()=>{
            // Arrange
            mockSupabaseClient.auth.getSession.mockResolvedValue({
                data: {
                    session: null
                },
                error: null
            });
            // Act
            const result = await mockSupabaseClient.auth.getSession();
            // Assert
            (0, _globals.expect)(result.data.session).toBeNull();
            (0, _globals.expect)(result.error).toBeNull();
        });
        (0, _globals.it)('should successfully sign out user', async ()=>{
            // Arrange
            mockSupabaseClient.auth.signOut.mockResolvedValue({
                error: null
            });
            // Act
            const result = await mockSupabaseClient.auth.signOut();
            // Assert
            (0, _globals.expect)(result.error).toBeNull();
            (0, _globals.expect)(mockSupabaseClient.auth.signOut).toHaveBeenCalledTimes(1);
        });
    });
    (0, _globals.describe)('Password Reset Tests', ()=>{
        (0, _globals.it)('should successfully send password reset email', async ()=>{
            // Arrange
            const email = 'user@example.com';
            mockSupabaseClient.auth.resetPasswordForEmail.mockResolvedValue({
                data: {},
                error: null
            });
            // Act
            const result = await mockSupabaseClient.auth.resetPasswordForEmail(email);
            // Assert
            (0, _globals.expect)(result.error).toBeNull();
            (0, _globals.expect)(mockSupabaseClient.auth.resetPasswordForEmail).toHaveBeenCalledWith(email);
        });
        (0, _globals.it)('should handle password reset for non-existent email', async ()=>{
            // Arrange
            const nonExistentEmail = 'nonexistent@example.com';
            mockSupabaseClient.auth.resetPasswordForEmail.mockResolvedValue({
                data: {},
                error: {
                    name: 'AuthApiError',
                    message: 'User not found',
                    status: 400
                }
            });
            // Act
            const result = await mockSupabaseClient.auth.resetPasswordForEmail(nonExistentEmail);
            // Assert
            (0, _globals.expect)(result.error).toBeDefined();
            (0, _globals.expect)(result.error.message).toBe('User not found');
        });
    });
    (0, _globals.describe)('Multi-Tenant Auth Integration', ()=>{
        (0, _globals.it)('should validate user belongs to correct tenant during auth', async ()=>{
            // Arrange
            const email = 'multitenant-user@example.com';
            const password = 'password123';
            const expectedTenantId = 'tenant-123';
            // Başarılı auth ama farklı tenant
            mockSupabaseClient.auth.signInWithPassword.mockResolvedValue({
                data: {
                    user: {
                        id: '880e8400-e29b-41d4-a716-446655440003',
                        email: email,
                        user_metadata: {
                            tenant_id: 'tenant-456',
                            role: 'user'
                        }
                    },
                    session: {
                        access_token: 'token'
                    }
                },
                error: null
            });
            // Act
            const result = await mockSupabaseClient.auth.signInWithPassword({
                email,
                password
            });
            // Assert - Kullanıcı farklı tenant'ta
            (0, _globals.expect)(result.data.user.user_metadata.tenant_id).not.toBe(expectedTenantId);
            (0, _globals.expect)(result.data.user.user_metadata.tenant_id).toBe('tenant-456');
        // Bu durumda uygulama mantığında tenant kontrolü yapılması gerekir
        });
        (0, _globals.it)('should handle auth state changes for tenant-specific users', async ()=>{
            // Arrange
            const mockCallback = jest.fn();
            const mockUnsubscribe = jest.fn();
            mockSupabaseClient.auth.onAuthStateChange.mockReturnValue({
                data: {
                    subscription: {
                        unsubscribe: mockUnsubscribe
                    }
                }
            });
            // Act
            const { data } = mockSupabaseClient.auth.onAuthStateChange(mockCallback);
            // Assert
            (0, _globals.expect)(mockSupabaseClient.auth.onAuthStateChange).toHaveBeenCalledWith(mockCallback);
            (0, _globals.expect)(data.subscription.unsubscribe).toBe(mockUnsubscribe);
        });
    });
    (0, _globals.describe)('Error Handling and Resilience', ()=>{
        (0, _globals.it)('should handle network timeouts gracefully', async ()=>{
            // Arrange
            mockSupabaseClient.auth.signInWithPassword.mockRejectedValue(new Error('Network timeout'));
            // Act & Assert
            await (0, _globals.expect)(mockSupabaseClient.auth.signInWithPassword({
                email: 'test@example.com',
                password: 'password'
            })).rejects.toThrow('Network timeout');
        });
        (0, _globals.it)('should retry failed auth operations', async ()=>{
            // Arrange
            const email = 'retry-test@example.com';
            const password = 'password123';
            // İlk iki çağrıda hata, üçüncüde başarı
            mockSupabaseClient.auth.signInWithPassword.mockRejectedValueOnce(new Error('Network error')).mockRejectedValueOnce(new Error('Network error')).mockResolvedValueOnce({
                data: {
                    user: {
                        id: 'test-user-id',
                        email
                    },
                    session: {
                        access_token: 'success-token'
                    }
                },
                error: null
            });
            // Act
            const result = await _mswhelpers.TestUtilityHelper.retryOperation(()=>mockSupabaseClient.auth.signInWithPassword({
                    email,
                    password
                }), 3, 50);
            // Assert
            (0, _globals.expect)(result.data.user.email).toBe(email);
            (0, _globals.expect)(mockSupabaseClient.auth.signInWithPassword).toHaveBeenCalledTimes(3);
        });
    });
});

//# sourceMappingURL=data:application/json;base64,