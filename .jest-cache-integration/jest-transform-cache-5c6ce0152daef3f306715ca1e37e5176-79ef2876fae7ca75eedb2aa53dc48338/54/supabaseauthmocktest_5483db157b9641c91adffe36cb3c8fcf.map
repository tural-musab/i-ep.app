{"version":3,"sources":["/Users/turanmusabosman/Projects/i-ep.app/src/__tests__/integration/quarantine/supabase-auth-mock.test.ts"],"sourcesContent":["import { describe, it, expect, beforeEach, afterEach, beforeAll, afterAll } from '@jest/globals';\nimport { TestEnvironmentHelper, TestUtilityHelper } from '../../../tests/fixtures/msw-helpers';\nimport { createClientComponentClient } from '@supabase/auth-helpers-nextjs';\n\n// Mock the Supabase client\njest.mock('@supabase/auth-helpers-nextjs', () => ({\n  createClientComponentClient: jest.fn(),\n}));\n\ndescribe('Supabase Auth Integration Tests (Mocked)', () => {\n  let mockSupabaseClient: {\n    auth: {\n      signInWithPassword: jest.Mock;\n      signUp: jest.Mock;\n      signOut: jest.Mock;\n      resetPasswordForEmail: jest.Mock;\n      getSession: jest.Mock;\n      onAuthStateChange: jest.Mock;\n    };\n    from: jest.Mock;\n  };\n\n  beforeAll(() => {\n    TestEnvironmentHelper.setupTestEnvironment();\n    TestEnvironmentHelper.setupMockServer();\n  });\n\n  beforeEach(() => {\n    // Mock Supabase client oluştur\n    mockSupabaseClient = {\n      auth: {\n        signInWithPassword: jest.fn(),\n        signUp: jest.fn(),\n        signOut: jest.fn(),\n        resetPasswordForEmail: jest.fn(),\n        getSession: jest.fn(),\n        onAuthStateChange: jest.fn(() => ({\n          data: { subscription: { unsubscribe: jest.fn() } },\n        })),\n      },\n      from: jest.fn(() => ({\n        select: jest.fn(() => ({\n          eq: jest.fn(() => ({\n            single: jest.fn(),\n          })),\n        })),\n      })),\n    };\n\n    (createClientComponentClient as jest.Mock).mockReturnValue(mockSupabaseClient);\n\n    // Her test öncesinde mock'ları temizle\n    TestEnvironmentHelper.cleanup();\n  });\n\n  afterEach(() => {\n    // Her test sonrasında mock'ları temizle\n    TestEnvironmentHelper.cleanup();\n    jest.clearAllMocks();\n  });\n\n  afterAll(() => {\n    // Test suite bittiğinde mock server'ı kapat\n    TestEnvironmentHelper.teardown();\n  });\n\n  describe('User Sign In Tests', () => {\n    it('should successfully sign in a user with valid credentials', async () => {\n      // Arrange\n      const email = 'test@example.com';\n      const password = 'validPassword123';\n\n      // Başarılı giriş mock'ını ayarla\n      mockSupabaseClient.auth.signInWithPassword.mockResolvedValue({\n        data: {\n          user: {\n            id: '550e8400-e29b-41d4-a716-446655440000',\n            email: email,\n            user_metadata: {\n              tenant_id: 'tenant-123',\n              role: 'admin',\n            },\n          },\n          session: {\n            access_token: 'test-access-token',\n            refresh_token: 'test-refresh-token',\n          },\n        },\n        error: null,\n      });\n\n      // Act\n      const result = await mockSupabaseClient.auth.signInWithPassword({\n        email,\n        password,\n      });\n\n      // Assert\n      expect(result.data.user).toBeDefined();\n      expect(result.data.user.email).toBe(email);\n      expect(result.data.user.user_metadata.tenant_id).toBe('tenant-123');\n      expect(result.data.session).toBeDefined();\n      expect(result.error).toBeNull();\n      expect(mockSupabaseClient.auth.signInWithPassword).toHaveBeenCalledWith({\n        email,\n        password,\n      });\n    });\n\n    it('should fail to sign in with invalid credentials', async () => {\n      // Arrange\n      const email = 'test@example.com';\n      const wrongPassword = 'wrongPassword';\n\n      // Hatalı giriş mock'ını ayarla\n      mockSupabaseClient.auth.signInWithPassword.mockResolvedValue({\n        data: { user: null, session: null },\n        error: {\n          name: 'AuthApiError',\n          message: 'Invalid login credentials',\n          status: 400,\n        },\n      });\n\n      // Act\n      const result = await mockSupabaseClient.auth.signInWithPassword({\n        email,\n        password: wrongPassword,\n      });\n\n      // Assert\n      expect(result.data.user).toBeNull();\n      expect(result.data.session).toBeNull();\n      expect(result.error).toBeDefined();\n      expect(result.error.message).toBe('Invalid login credentials');\n      expect(result.error.status).toBe(400);\n    });\n\n    it('should handle tenant-specific user sign in', async () => {\n      // Arrange\n      const email = 'tenant-user@example.com';\n      const password = 'tenantPassword123';\n      const tenantId = 'tenant-456';\n\n      // Tenant-specific giriş mock'ını ayarla\n      mockSupabaseClient.auth.signInWithPassword.mockResolvedValue({\n        data: {\n          user: {\n            id: '660e8400-e29b-41d4-a716-446655440001',\n            email: email,\n            user_metadata: {\n              tenant_id: tenantId,\n              role: 'teacher',\n            },\n          },\n          session: {\n            access_token: 'tenant-access-token',\n            refresh_token: 'tenant-refresh-token',\n          },\n        },\n        error: null,\n      });\n\n      // Kullanıcı profil bilgilerini alma mock'ı\n      mockSupabaseClient.from.mockReturnValue({\n        select: jest.fn().mockReturnValue({\n          eq: jest.fn().mockReturnValue({\n            single: jest.fn().mockResolvedValue({\n              data: {\n                id: '660e8400-e29b-41d4-a716-446655440001',\n                email: email,\n                role: 'teacher',\n                tenant_id: tenantId,\n                is_active: true,\n              },\n              error: null,\n            }),\n          }),\n        }),\n      });\n\n      // Act\n      const authResult = await mockSupabaseClient.auth.signInWithPassword({\n        email,\n        password,\n      });\n\n      // Kullanıcı profil bilgilerini al\n      const profileResult = await mockSupabaseClient\n        .from('users')\n        .select('*')\n        .eq('auth_id', authResult.data.user.id)\n        .single();\n\n      // Assert\n      expect(authResult.data.user.user_metadata.tenant_id).toBe(tenantId);\n      expect(profileResult.data.tenant_id).toBe(tenantId);\n      expect(profileResult.data.role).toBe('teacher');\n      expect(profileResult.data.is_active).toBe(true);\n    });\n  });\n\n  describe('User Sign Up Tests', () => {\n    it('should successfully sign up a new user', async () => {\n      // Arrange\n      const email = TestUtilityHelper.generateRandomEmail();\n      const password = 'newUserPassword123';\n      const tenantId = TestUtilityHelper.generateRandomTenantId();\n\n      // Başarılı kayıt mock'ını ayarla\n      mockSupabaseClient.auth.signUp.mockResolvedValue({\n        data: {\n          user: {\n            id: '770e8400-e29b-41d4-a716-446655440002',\n            email: email,\n            email_confirmed_at: null,\n            user_metadata: {\n              tenant_id: tenantId,\n              role: 'student',\n              name: 'Yeni Kullanıcı',\n            },\n          },\n          session: null, // E-posta onayı beklendiği için\n        },\n        error: null,\n      });\n\n      // Act\n      const result = await mockSupabaseClient.auth.signUp({\n        email,\n        password,\n        options: {\n          data: {\n            tenant_id: tenantId,\n            role: 'student',\n            name: 'Yeni Kullanıcı',\n          },\n        },\n      });\n\n      // Assert\n      expect(result.data.user).toBeDefined();\n      expect(result.data.user.email).toBe(email);\n      expect(result.data.user.user_metadata.tenant_id).toBe(tenantId);\n      expect(result.data.user.email_confirmed_at).toBeNull();\n      expect(result.data.session).toBeNull(); // E-posta onayı bekleniyor\n      expect(result.error).toBeNull();\n    });\n\n    it('should fail to sign up with an existing email', async () => {\n      // Arrange\n      const existingEmail = 'existing@example.com';\n      const password = 'somePassword123';\n\n      // E-posta zaten mevcut hatası mock'ını ayarla\n      mockSupabaseClient.auth.signUp.mockResolvedValue({\n        data: { user: null, session: null },\n        error: {\n          name: 'AuthApiError',\n          message: 'User already registered',\n          status: 422,\n        },\n      });\n\n      // Act\n      const result = await mockSupabaseClient.auth.signUp({\n        email: existingEmail,\n        password,\n      });\n\n      // Assert\n      expect(result.data.user).toBeNull();\n      expect(result.data.session).toBeNull();\n      expect(result.error).toBeDefined();\n      expect(result.error.message).toBe('User already registered');\n      expect(result.error.status).toBe(422);\n    });\n\n    it('should handle weak password during sign up', async () => {\n      // Arrange\n      const email = 'newuser@example.com';\n      const weakPassword = '123'; // Çok zayıf şifre\n\n      // Zayıf şifre hatası mock'ını ayarla\n      mockSupabaseClient.auth.signUp.mockResolvedValue({\n        data: { user: null, session: null },\n        error: {\n          name: 'AuthApiError',\n          message: 'Password should be at least 6 characters',\n          status: 422,\n        },\n      });\n\n      // Act\n      const result = await mockSupabaseClient.auth.signUp({\n        email,\n        password: weakPassword,\n      });\n\n      // Assert\n      expect(result.data.user).toBeNull();\n      expect(result.error).toBeDefined();\n      expect(result.error.message).toContain('Password should be at least');\n    });\n  });\n\n  describe('Session Management Tests', () => {\n    it('should retrieve existing user session', async () => {\n      // Arrange\n      const mockSession = {\n        access_token: 'existing-access-token',\n        refresh_token: 'existing-refresh-token',\n        user: {\n          id: '550e8400-e29b-41d4-a716-446655440000',\n          email: 'session-user@example.com',\n          user_metadata: {\n            tenant_id: 'tenant-789',\n            role: 'admin',\n          },\n        },\n      };\n\n      // Mevcut session mock'ını ayarla\n      mockSupabaseClient.auth.getSession.mockResolvedValue({\n        data: { session: mockSession },\n        error: null,\n      });\n\n      // Act\n      const result = await mockSupabaseClient.auth.getSession();\n\n      // Assert\n      expect(result.data.session).toBeDefined();\n      expect(result.data.session.user.email).toBe('session-user@example.com');\n      expect(result.data.session.user.user_metadata.tenant_id).toBe('tenant-789');\n      expect(result.error).toBeNull();\n    });\n\n    it('should handle no existing session', async () => {\n      // Arrange\n      mockSupabaseClient.auth.getSession.mockResolvedValue({\n        data: { session: null },\n        error: null,\n      });\n\n      // Act\n      const result = await mockSupabaseClient.auth.getSession();\n\n      // Assert\n      expect(result.data.session).toBeNull();\n      expect(result.error).toBeNull();\n    });\n\n    it('should successfully sign out user', async () => {\n      // Arrange\n      mockSupabaseClient.auth.signOut.mockResolvedValue({\n        error: null,\n      });\n\n      // Act\n      const result = await mockSupabaseClient.auth.signOut();\n\n      // Assert\n      expect(result.error).toBeNull();\n      expect(mockSupabaseClient.auth.signOut).toHaveBeenCalledTimes(1);\n    });\n  });\n\n  describe('Password Reset Tests', () => {\n    it('should successfully send password reset email', async () => {\n      // Arrange\n      const email = 'user@example.com';\n\n      mockSupabaseClient.auth.resetPasswordForEmail.mockResolvedValue({\n        data: {},\n        error: null,\n      });\n\n      // Act\n      const result = await mockSupabaseClient.auth.resetPasswordForEmail(email);\n\n      // Assert\n      expect(result.error).toBeNull();\n      expect(mockSupabaseClient.auth.resetPasswordForEmail).toHaveBeenCalledWith(email);\n    });\n\n    it('should handle password reset for non-existent email', async () => {\n      // Arrange\n      const nonExistentEmail = 'nonexistent@example.com';\n\n      mockSupabaseClient.auth.resetPasswordForEmail.mockResolvedValue({\n        data: {},\n        error: {\n          name: 'AuthApiError',\n          message: 'User not found',\n          status: 400,\n        },\n      });\n\n      // Act\n      const result = await mockSupabaseClient.auth.resetPasswordForEmail(nonExistentEmail);\n\n      // Assert\n      expect(result.error).toBeDefined();\n      expect(result.error.message).toBe('User not found');\n    });\n  });\n\n  describe('Multi-Tenant Auth Integration', () => {\n    it('should validate user belongs to correct tenant during auth', async () => {\n      // Arrange\n      const email = 'multitenant-user@example.com';\n      const password = 'password123';\n      const expectedTenantId = 'tenant-123';\n\n      // Başarılı auth ama farklı tenant\n      mockSupabaseClient.auth.signInWithPassword.mockResolvedValue({\n        data: {\n          user: {\n            id: '880e8400-e29b-41d4-a716-446655440003',\n            email: email,\n            user_metadata: {\n              tenant_id: 'tenant-456', // Farklı tenant\n              role: 'user',\n            },\n          },\n          session: { access_token: 'token' },\n        },\n        error: null,\n      });\n\n      // Act\n      const result = await mockSupabaseClient.auth.signInWithPassword({\n        email,\n        password,\n      });\n\n      // Assert - Kullanıcı farklı tenant'ta\n      expect(result.data.user.user_metadata.tenant_id).not.toBe(expectedTenantId);\n      expect(result.data.user.user_metadata.tenant_id).toBe('tenant-456');\n\n      // Bu durumda uygulama mantığında tenant kontrolü yapılması gerekir\n    });\n\n    it('should handle auth state changes for tenant-specific users', async () => {\n      // Arrange\n      const mockCallback = jest.fn();\n      const mockUnsubscribe = jest.fn();\n\n      mockSupabaseClient.auth.onAuthStateChange.mockReturnValue({\n        data: {\n          subscription: {\n            unsubscribe: mockUnsubscribe,\n          },\n        },\n      });\n\n      // Act\n      const { data } = mockSupabaseClient.auth.onAuthStateChange(mockCallback);\n\n      // Assert\n      expect(mockSupabaseClient.auth.onAuthStateChange).toHaveBeenCalledWith(mockCallback);\n      expect(data.subscription.unsubscribe).toBe(mockUnsubscribe);\n    });\n  });\n\n  describe('Error Handling and Resilience', () => {\n    it('should handle network timeouts gracefully', async () => {\n      // Arrange\n      mockSupabaseClient.auth.signInWithPassword.mockRejectedValue(new Error('Network timeout'));\n\n      // Act & Assert\n      await expect(\n        mockSupabaseClient.auth.signInWithPassword({\n          email: 'test@example.com',\n          password: 'password',\n        })\n      ).rejects.toThrow('Network timeout');\n    });\n\n    it('should retry failed auth operations', async () => {\n      // Arrange\n      const email = 'retry-test@example.com';\n      const password = 'password123';\n\n      // İlk iki çağrıda hata, üçüncüde başarı\n      mockSupabaseClient.auth.signInWithPassword\n        .mockRejectedValueOnce(new Error('Network error'))\n        .mockRejectedValueOnce(new Error('Network error'))\n        .mockResolvedValueOnce({\n          data: {\n            user: { id: 'test-user-id', email },\n            session: { access_token: 'success-token' },\n          },\n          error: null,\n        });\n\n      // Act\n      const result = await TestUtilityHelper.retryOperation<{\n        data: { user: { id: string; email: string }; session: { access_token: string } };\n        error: null;\n      }>(() => mockSupabaseClient.auth.signInWithPassword({ email, password }), 3, 50);\n\n      // Assert\n      expect(result.data.user.email).toBe(email);\n      expect(mockSupabaseClient.auth.signInWithPassword).toHaveBeenCalledTimes(3);\n    });\n  });\n});\n"],"names":["jest","mock","createClientComponentClient","fn","describe","mockSupabaseClient","beforeAll","TestEnvironmentHelper","setupTestEnvironment","setupMockServer","beforeEach","auth","signInWithPassword","signUp","signOut","resetPasswordForEmail","getSession","onAuthStateChange","data","subscription","unsubscribe","from","select","eq","single","mockReturnValue","cleanup","afterEach","clearAllMocks","afterAll","teardown","it","email","password","mockResolvedValue","user","id","user_metadata","tenant_id","role","session","access_token","refresh_token","error","result","expect","toBeDefined","toBe","toBeNull","toHaveBeenCalledWith","wrongPassword","name","message","status","tenantId","is_active","authResult","profileResult","TestUtilityHelper","generateRandomEmail","generateRandomTenantId","email_confirmed_at","options","existingEmail","weakPassword","toContain","mockSession","toHaveBeenCalledTimes","nonExistentEmail","expectedTenantId","not","mockCallback","mockUnsubscribe","mockRejectedValue","Error","rejects","toThrow","mockRejectedValueOnce","mockResolvedValueOnce","retryOperation"],"mappings":"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"}