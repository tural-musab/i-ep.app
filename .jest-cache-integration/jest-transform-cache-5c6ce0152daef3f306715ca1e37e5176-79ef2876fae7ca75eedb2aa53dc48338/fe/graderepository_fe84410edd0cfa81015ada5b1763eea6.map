{"version":3,"sources":["/Users/turanmusabosman/Projects/i-ep.app/src/lib/repository/grade-repository.ts"],"sourcesContent":["/**\n * Grade Repository - Enhanced\n * Ä°-EP.APP - Grade Management System\n *\n * Comprehensive grade repository with Turkish education system support\n * Database integration with PostgreSQL functions and stored procedures\n * Enterprise-grade features with multi-tenant architecture\n */\n\nimport { SupabaseClient } from '@supabase/supabase-js';\nimport { BaseRepository } from './base-repository';\n\n// ============================================================================\n// INTERFACES AND TYPES\n// ============================================================================\n\nexport interface Grade {\n  id: string;\n  tenantId: string;\n  studentId: string;\n  classId: string;\n  subjectId: string;\n  teacherId: string;\n  assignmentId?: string;\n  gradeType: 'exam' | 'homework' | 'project' | 'participation' | 'quiz' | 'midterm' | 'final';\n  gradeValue: number;\n  maxGrade: number;\n  weight: number;\n  percentage: number;\n  letterGrade: string;\n  gpaPoints: number;\n  examName?: string;\n  description?: string;\n  semester: 1 | 2;\n  academicYear: string;\n  gradeDate: Date;\n  metadata?: Record<string, any>;\n  createdAt: Date;\n  updatedAt: Date;\n  // Joined fields\n  studentName?: string;\n  subjectName?: string;\n  className?: string;\n  teacherName?: string;\n  comments?: GradeComment[];\n}\n\nexport interface GradeConfiguration {\n  id: string;\n  tenantId: string;\n  subjectId: string;\n  classId?: string;\n  gradeType: Grade['gradeType'];\n  weight: number;\n  minGrade: number;\n  maxGrade: number;\n  passingGrade: number;\n  honorRollGrade: number;\n  isRequired: boolean;\n  allowsMakeup: boolean;\n  semester: 1 | 2;\n  academicYear: string;\n  createdAt: Date;\n  updatedAt: Date;\n}\n\nexport interface GradeCalculation {\n  id: string;\n  tenantId: string;\n  studentId: string;\n  subjectId: string;\n  classId: string;\n  semester: 1 | 2;\n  academicYear: string;\n  totalPoints: number;\n  totalWeight: number;\n  weightedAverage: number;\n  unweightedAverage: number;\n  finalPercentage: number;\n  finalLetterGrade: string;\n  gpaPoints: number;\n  isPassing: boolean;\n  isHonorRoll: boolean;\n  gradeCount: number;\n  lastCalculatedAt: Date;\n  calculationMethod: 'weighted' | 'unweighted';\n  createdAt: Date;\n  updatedAt: Date;\n}\n\nexport interface GradeRubric {\n  id: string;\n  tenantId: string;\n  teacherId: string;\n  subjectId: string;\n  assignmentId?: string;\n  rubricName: string;\n  description?: string;\n  gradeType: Grade['gradeType'];\n  maxPoints: number;\n  criteria: RubricCriteria[];\n  isActive: boolean;\n  usageCount: number;\n  createdAt: Date;\n  updatedAt: Date;\n}\n\nexport interface RubricCriteria {\n  id: string;\n  name: string;\n  description: string;\n  maxPoints: number;\n  weight: number;\n  levels: RubricLevel[];\n}\n\nexport interface RubricLevel {\n  id: string;\n  name: string;\n  description: string;\n  points: number;\n  qualityIndicators: string[];\n}\n\nexport interface GradeComment {\n  id: string;\n  tenantId: string;\n  gradeId: string;\n  teacherId: string;\n  commentText: string;\n  commentType: 'general' | 'strength' | 'improvement' | 'recommendation';\n  isVisibleToStudent: boolean;\n  isVisibleToParent: boolean;\n  createdAt: Date;\n  updatedAt: Date;\n}\n\n// Query options interfaces\nexport interface GradeQueryOptions {\n  studentId?: string;\n  classId?: string;\n  subjectId?: string;\n  teacherId?: string;\n  gradeType?: Grade['gradeType'];\n  semester?: number;\n  academicYear?: string;\n  startDate?: Date;\n  endDate?: Date;\n  minGrade?: number;\n  maxGrade?: number;\n  includeCalculations?: boolean;\n  includeComments?: boolean;\n  includeStudent?: boolean;\n  limit?: number;\n  offset?: number;\n}\n\nexport interface GradeStatistics {\n  totalGrades: number;\n  averageGrade: number;\n  highestGrade: number;\n  lowestGrade: number;\n  medianGrade: number;\n  standardDeviation: number;\n  passingGrades: number;\n  passingPercentage: number;\n  gradeDistribution: Record<string, number>;\n  letterGradeDistribution: Record<string, number>;\n}\n\n// ============================================================================\n// GRADE REPOSITORY CLASS\n// ============================================================================\n\nexport class GradeRepository extends BaseRepository<Grade> {\n  constructor(supabase: SupabaseClient, tenantId: string) {\n    super(supabase, 'grades', tenantId);\n  }\n\n  // ============================================================================\n  // CORE GRADE OPERATIONS\n  // ============================================================================\n\n  /**\n   * Create a new grade record\n   */\n  async createGrade(data: {\n    studentId: string;\n    classId: string;\n    subjectId: string;\n    assignmentId?: string;\n    gradeType: Grade['gradeType'];\n    gradeValue: number;\n    maxGrade: number;\n    weight?: number;\n    examName?: string;\n    description?: string;\n    semester: 1 | 2;\n    academicYear: string;\n    gradeDate: Date;\n    teacherId: string;\n  }): Promise<Grade> {\n    const { data: result, error } = await this.supabase\n      .from('grades')\n      .insert({\n        tenant_id: this.tenantId,\n        student_id: data.studentId,\n        class_id: data.classId,\n        subject_id: data.subjectId,\n        assignment_id: data.assignmentId,\n        teacher_id: data.teacherId,\n        grade_type: data.gradeType,\n        grade_value: data.gradeValue,\n        max_grade: data.maxGrade,\n        weight: data.weight || 1.0,\n        exam_name: data.examName,\n        description: data.description,\n        semester: data.semester,\n        academic_year: data.academicYear,\n        grade_date: data.gradeDate.toISOString().split('T')[0],\n      })\n      .select()\n      .single();\n\n    if (error) throw new Error(`Failed to create grade: ${error.message}`);\n    return this.transformGrade(result);\n  }\n\n  /**\n   * Update an existing grade record\n   */\n  async updateGrade(\n    id: string,\n    data: {\n      gradeValue?: number;\n      maxGrade?: number;\n      weight?: number;\n      examName?: string;\n      description?: string;\n      gradeDate?: Date;\n    }\n  ): Promise<Grade> {\n    const updateData: any = {};\n\n    if (data.gradeValue !== undefined) updateData.grade_value = data.gradeValue;\n    if (data.maxGrade !== undefined) updateData.max_grade = data.maxGrade;\n    if (data.weight !== undefined) updateData.weight = data.weight;\n    if (data.examName !== undefined) updateData.exam_name = data.examName;\n    if (data.description !== undefined) updateData.description = data.description;\n    if (data.gradeDate !== undefined)\n      updateData.grade_date = data.gradeDate.toISOString().split('T')[0];\n\n    const { data: result, error } = await this.supabase\n      .from('grades')\n      .update(updateData)\n      .eq('id', id)\n      .eq('tenant_id', this.tenantId)\n      .select()\n      .single();\n\n    if (error) throw new Error(`Failed to update grade: ${error.message}`);\n    return this.transformGrade(result);\n  }\n\n  /**\n   * Delete a grade record\n   */\n  async deleteGrade(id: string): Promise<void> {\n    const { error } = await this.supabase\n      .from('grades')\n      .delete()\n      .eq('id', id)\n      .eq('tenant_id', this.tenantId);\n\n    if (error) throw new Error(`Failed to delete grade: ${error.message}`);\n  }\n\n  /**\n   * Get grade by ID with optional details\n   */\n  async getGradeById(\n    id: string,\n    options: {\n      includeComments?: boolean;\n      includeCalculations?: boolean;\n      includeStudent?: boolean;\n    } = {}\n  ): Promise<Grade | null> {\n    let query = this.supabase\n      .from('grades')\n      .select(\n        `\n        *,\n        ${options.includeStudent ? 'students(name, student_number),' : ''}\n        subjects(name),\n        classes(name),\n        users(name)\n      `\n      )\n      .eq('id', id)\n      .eq('tenant_id', this.tenantId);\n\n    const { data, error } = await query.single();\n\n    if (error) {\n      if (error.code === 'PGRST116') return null;\n      throw new Error(`Failed to get grade: ${error.message}`);\n    }\n\n    const grade = this.transformGrade(data);\n\n    if (options.includeComments) {\n      grade.comments = await this.getGradeComments(id);\n    }\n\n    return grade;\n  }\n\n  /**\n   * Get grades with filtering and pagination\n   */\n  async getGrades(options: GradeQueryOptions): Promise<Grade[]> {\n    let query = this.supabase\n      .from('grades')\n      .select(\n        `\n        *,\n        ${options.includeStudent ? 'students(name, student_number),' : ''}\n        subjects(name),\n        classes(name),\n        users(name)\n      `\n      )\n      .eq('tenant_id', this.tenantId);\n\n    // Apply filters\n    if (options.studentId) query = query.eq('student_id', options.studentId);\n    if (options.classId) query = query.eq('class_id', options.classId);\n    if (options.subjectId) query = query.eq('subject_id', options.subjectId);\n    if (options.teacherId) query = query.eq('teacher_id', options.teacherId);\n    if (options.gradeType) query = query.eq('grade_type', options.gradeType);\n    if (options.semester) query = query.eq('semester', options.semester);\n    if (options.academicYear) query = query.eq('academic_year', options.academicYear);\n    if (options.startDate)\n      query = query.gte('grade_date', options.startDate.toISOString().split('T')[0]);\n    if (options.endDate)\n      query = query.lte('grade_date', options.endDate.toISOString().split('T')[0]);\n    if (options.minGrade) query = query.gte('percentage', options.minGrade);\n    if (options.maxGrade) query = query.lte('percentage', options.maxGrade);\n\n    // Apply pagination\n    if (options.limit) query = query.limit(options.limit);\n    if (options.offset)\n      query = query.range(options.offset, options.offset + (options.limit || 50) - 1);\n\n    // Order by grade date descending\n    query = query.order('grade_date', { ascending: false });\n\n    const { data, error } = await query;\n\n    if (error) throw new Error(`Failed to get grades: ${error.message}`);\n\n    const grades = (data || []).map((grade) => this.transformGrade(grade));\n\n    // Include comments if requested\n    if (options.includeComments) {\n      for (const grade of grades) {\n        grade.comments = await this.getGradeComments(grade.id);\n      }\n    }\n\n    return grades;\n  }\n\n  /**\n   * Get grades count for pagination\n   */\n  async getGradesCount(options: GradeQueryOptions): Promise<number> {\n    let query = this.supabase\n      .from('grades')\n      .select('id', { count: 'exact', head: true })\n      .eq('tenant_id', this.tenantId);\n\n    // Apply same filters as getGrades\n    if (options.studentId) query = query.eq('student_id', options.studentId);\n    if (options.classId) query = query.eq('class_id', options.classId);\n    if (options.subjectId) query = query.eq('subject_id', options.subjectId);\n    if (options.teacherId) query = query.eq('teacher_id', options.teacherId);\n    if (options.gradeType) query = query.eq('grade_type', options.gradeType);\n    if (options.semester) query = query.eq('semester', options.semester);\n    if (options.academicYear) query = query.eq('academic_year', options.academicYear);\n    if (options.startDate)\n      query = query.gte('grade_date', options.startDate.toISOString().split('T')[0]);\n    if (options.endDate)\n      query = query.lte('grade_date', options.endDate.toISOString().split('T')[0]);\n    if (options.minGrade) query = query.gte('percentage', options.minGrade);\n    if (options.maxGrade) query = query.lte('percentage', options.maxGrade);\n\n    const { count, error } = await query;\n\n    if (error) throw new Error(`Failed to get grades count: ${error.message}`);\n    return count || 0;\n  }\n\n  // ============================================================================\n  // BULK OPERATIONS\n  // ============================================================================\n\n  /**\n   * Create multiple grades in bulk\n   */\n  async createBulkGrades(\n    classId: string,\n    subjectId: string,\n    gradeConfig: {\n      gradeType: Grade['gradeType'];\n      examName?: string;\n      maxGrade: number;\n      weight: number;\n      semester: 1 | 2;\n      academicYear: string;\n      gradeDate: Date;\n      teacherId: string;\n    },\n    grades: {\n      studentId: string;\n      gradeValue: number;\n      description?: string;\n    }[]\n  ): Promise<Grade[]> {\n    const gradeRecords = grades.map((grade) => ({\n      tenant_id: this.tenantId,\n      student_id: grade.studentId,\n      class_id: classId,\n      subject_id: subjectId,\n      teacher_id: gradeConfig.teacherId,\n      grade_type: gradeConfig.gradeType,\n      grade_value: grade.gradeValue,\n      max_grade: gradeConfig.maxGrade,\n      weight: gradeConfig.weight,\n      exam_name: gradeConfig.examName,\n      description: grade.description,\n      semester: gradeConfig.semester,\n      academic_year: gradeConfig.academicYear,\n      grade_date: gradeConfig.gradeDate.toISOString().split('T')[0],\n    }));\n\n    const { data, error } = await this.supabase.from('grades').insert(gradeRecords).select();\n\n    if (error) throw new Error(`Failed to create bulk grades: ${error.message}`);\n    return (data || []).map((grade) => this.transformGrade(grade));\n  }\n\n  // ============================================================================\n  // SPECIALIZED RETRIEVAL METHODS\n  // ============================================================================\n\n  /**\n   * Get student grades with optional subject filtering\n   */\n  async getStudentGrades(\n    studentId: string,\n    options: {\n      subjectId?: string;\n      semester?: number;\n      academicYear?: string;\n      includeComments?: boolean;\n      includeCalculations?: boolean;\n    } = {}\n  ): Promise<Grade[]> {\n    return this.getGrades({\n      studentId,\n      ...options,\n    });\n  }\n\n  /**\n   * Get class grades with optional subject filtering\n   */\n  async getClassGrades(\n    classId: string,\n    subjectId?: string,\n    semester?: number,\n    academicYear?: string\n  ): Promise<Grade[]> {\n    return this.getGrades({\n      classId,\n      subjectId,\n      semester,\n      academicYear,\n    });\n  }\n\n  /**\n   * Get subject grades with optional class filtering\n   */\n  async getSubjectGrades(\n    subjectId: string,\n    classId?: string,\n    semester?: number,\n    academicYear?: string\n  ): Promise<Grade[]> {\n    return this.getGrades({\n      subjectId,\n      classId,\n      semester,\n      academicYear,\n    });\n  }\n\n  /**\n   * Get grade by student and exam (for duplicate checking)\n   */\n  async getGradeByStudentAndExam(\n    studentId: string,\n    subjectId: string,\n    gradeType: Grade['gradeType'],\n    examName?: string,\n    semester?: number,\n    academicYear?: string\n  ): Promise<Grade | null> {\n    let query = this.supabase\n      .from('grades')\n      .select('*')\n      .eq('tenant_id', this.tenantId)\n      .eq('student_id', studentId)\n      .eq('subject_id', subjectId)\n      .eq('grade_type', gradeType);\n\n    if (examName) query = query.eq('exam_name', examName);\n    if (semester) query = query.eq('semester', semester);\n    if (academicYear) query = query.eq('academic_year', academicYear);\n\n    const { data, error } = await query.single();\n\n    if (error) {\n      if (error.code === 'PGRST116') return null;\n      throw new Error(`Failed to get grade: ${error.message}`);\n    }\n\n    return this.transformGrade(data);\n  }\n\n  // ============================================================================\n  // GRADE CALCULATIONS\n  // ============================================================================\n\n  /**\n   * Get student grade calculations\n   */\n  async getStudentGradeCalculations(\n    studentId: string,\n    semester?: number,\n    academicYear?: string,\n    subjectId?: string\n  ): Promise<GradeCalculation[]> {\n    let query = this.supabase\n      .from('grade_calculations')\n      .select('*')\n      .eq('tenant_id', this.tenantId)\n      .eq('student_id', studentId);\n\n    if (semester) query = query.eq('semester', semester);\n    if (academicYear) query = query.eq('academic_year', academicYear);\n    if (subjectId) query = query.eq('subject_id', subjectId);\n\n    const { data, error } = await query;\n\n    if (error) throw new Error(`Failed to get grade calculations: ${error.message}`);\n    return (data || []).map((calc) => this.transformGradeCalculation(calc));\n  }\n\n  /**\n   * Calculate student GPA\n   */\n  async calculateStudentGPA(\n    studentId: string,\n    semester?: number,\n    academicYear?: string\n  ): Promise<number> {\n    const { data, error } = await this.supabase.rpc('calculate_student_gpa', {\n      p_student_id: studentId,\n      p_semester: semester,\n      p_academic_year: academicYear,\n      p_tenant_id: this.tenantId,\n    });\n\n    if (error) throw new Error(`Failed to calculate GPA: ${error.message}`);\n    return data || 0;\n  }\n\n  /**\n   * Trigger grade calculations for a student\n   */\n  async triggerStudentCalculations(\n    studentId: string,\n    subjectId?: string,\n    semester?: number,\n    academicYear?: string,\n    force: boolean = false\n  ): Promise<{ calculationsTriggered: number; calculationsUpdated: number }> {\n    // Get all subjects for the student if not specified\n    const subjects = subjectId\n      ? [subjectId]\n      : await this.getStudentSubjects(studentId, semester, academicYear);\n\n    let calculationsTriggered = 0;\n    let calculationsUpdated = 0;\n\n    for (const subject of subjects) {\n      const { error } = await this.supabase.rpc('update_grade_calculations', {\n        p_student_id: studentId,\n        p_subject_id: subject,\n        p_semester: semester,\n        p_academic_year: academicYear,\n        p_tenant_id: this.tenantId,\n      });\n\n      if (error) {\n        console.error(`Failed to update calculations for subject ${subject}:`, error);\n        continue;\n      }\n\n      calculationsTriggered++;\n      calculationsUpdated++;\n    }\n\n    return { calculationsTriggered, calculationsUpdated };\n  }\n\n  // ============================================================================\n  // STATISTICS AND ANALYTICS\n  // ============================================================================\n\n  /**\n   * Get grade analytics for a class and subject\n   */\n  async getGradeAnalytics(\n    classId: string,\n    subjectId: string,\n    semester?: number,\n    academicYear?: string\n  ): Promise<GradeStatistics> {\n    const { data, error } = await this.supabase.rpc('get_class_grade_statistics', {\n      p_class_id: classId,\n      p_subject_id: subjectId,\n      p_semester: semester,\n      p_academic_year: academicYear,\n      p_tenant_id: this.tenantId,\n    });\n\n    if (error) throw new Error(`Failed to get grade analytics: ${error.message}`);\n\n    return {\n      totalGrades: data?.total_count || 0,\n      averageGrade: data?.average_grade || 0,\n      highestGrade: data?.highest_grade || 0,\n      lowestGrade: data?.lowest_grade || 0,\n      medianGrade: data?.median_grade || 0,\n      standardDeviation: 0, // Calculate from data if needed\n      passingGrades: data?.passing_count || 0,\n      passingPercentage: data?.passing_percentage || 0,\n      gradeDistribution: {},\n      letterGradeDistribution: {},\n    };\n  }\n\n  /**\n   * Get student grade statistics\n   */\n  async getStudentGradeStatistics(\n    studentId: string,\n    subjectId?: string,\n    semester?: number,\n    academicYear?: string\n  ): Promise<GradeStatistics> {\n    const grades = await this.getStudentGrades(studentId, {\n      subjectId,\n      semester,\n      academicYear,\n    });\n\n    return this.calculateStatistics(grades);\n  }\n\n  /**\n   * Get class grade statistics\n   */\n  async getClassGradeStatistics(\n    classId: string,\n    subjectId?: string,\n    semester?: number,\n    academicYear?: string\n  ): Promise<GradeStatistics> {\n    const grades = await this.getClassGrades(classId, subjectId, semester, academicYear);\n    return this.calculateStatistics(grades);\n  }\n\n  /**\n   * Get subject grade statistics\n   */\n  async getSubjectGradeStatistics(\n    subjectId: string,\n    classId?: string,\n    semester?: number,\n    academicYear?: string\n  ): Promise<GradeStatistics> {\n    const grades = await this.getSubjectGrades(subjectId, classId, semester, academicYear);\n    return this.calculateStatistics(grades);\n  }\n\n  // ============================================================================\n  // GRADE COMMENTS\n  // ============================================================================\n\n  /**\n   * Add comment to grade\n   */\n  async addGradeComment(\n    gradeId: string,\n    comment: {\n      commentText: string;\n      commentType: GradeComment['commentType'];\n      isVisibleToStudent: boolean;\n      isVisibleToParent: boolean;\n      teacherId: string;\n    }\n  ): Promise<GradeComment> {\n    const { data, error } = await this.supabase\n      .from('grade_comments')\n      .insert({\n        tenant_id: this.tenantId,\n        grade_id: gradeId,\n        teacher_id: comment.teacherId,\n        comment_text: comment.commentText,\n        comment_type: comment.commentType,\n        is_visible_to_student: comment.isVisibleToStudent,\n        is_visible_to_parent: comment.isVisibleToParent,\n      })\n      .select()\n      .single();\n\n    if (error) throw new Error(`Failed to add grade comment: ${error.message}`);\n    return this.transformGradeComment(data);\n  }\n\n  /**\n   * Get comments for a grade\n   */\n  async getGradeComments(gradeId: string): Promise<GradeComment[]> {\n    const { data, error } = await this.supabase\n      .from('grade_comments')\n      .select('*')\n      .eq('tenant_id', this.tenantId)\n      .eq('grade_id', gradeId)\n      .order('created_at', { ascending: false });\n\n    if (error) throw new Error(`Failed to get grade comments: ${error.message}`);\n    return (data || []).map((comment) => this.transformGradeComment(comment));\n  }\n\n  // ============================================================================\n  // PERMISSION VERIFICATION\n  // ============================================================================\n\n  /**\n   * Verify user has permission to grade students in a class and subject\n   */\n  async verifyGradingPermission(\n    classId: string,\n    subjectId: string,\n    userId: string\n  ): Promise<boolean> {\n    // Check if user is teacher for this class and subject\n    const { data, error } = await this.supabase\n      .from('class_subjects')\n      .select('id')\n      .eq('class_id', classId)\n      .eq('subject_id', subjectId)\n      .eq('teacher_id', userId)\n      .eq('tenant_id', this.tenantId);\n\n    if (error) return false;\n    return (data || []).length > 0;\n  }\n\n  /**\n   * Verify user has permission to view a grade\n   */\n  async verifyGradeViewPermission(gradeId: string, userId: string): Promise<boolean> {\n    // Check if user is the teacher who assigned the grade or has admin role\n    const { data, error } = await this.supabase\n      .from('grades')\n      .select('teacher_id')\n      .eq('id', gradeId)\n      .eq('tenant_id', this.tenantId)\n      .single();\n\n    if (error) return false;\n    return data?.teacher_id === userId; // Add admin role check here\n  }\n\n  // ============================================================================\n  // CONFIGURATION MANAGEMENT\n  // ============================================================================\n\n  /**\n   * Update grade configurations\n   */\n  async updateGradeConfigurations(\n    configurations: Omit<GradeConfiguration, 'id' | 'tenantId' | 'createdAt' | 'updatedAt'>[]\n  ): Promise<GradeConfiguration[]> {\n    const configRecords = configurations.map((config) => ({\n      tenant_id: this.tenantId,\n      subject_id: config.subjectId,\n      class_id: config.classId,\n      grade_type: config.gradeType,\n      weight: config.weight,\n      min_grade: config.minGrade,\n      max_grade: config.maxGrade,\n      passing_grade: config.passingGrade,\n      honor_roll_grade: config.honorRollGrade,\n      is_required: config.isRequired,\n      allows_makeup: config.allowsMakeup,\n      semester: config.semester,\n      academic_year: config.academicYear,\n    }));\n\n    const { data, error } = await this.supabase\n      .from('grade_configurations')\n      .upsert(configRecords, {\n        onConflict: 'tenant_id,subject_id,class_id,grade_type,semester,academic_year',\n      })\n      .select();\n\n    if (error) throw new Error(`Failed to update grade configurations: ${error.message}`);\n    return (data || []).map((config) => this.transformGradeConfiguration(config));\n  }\n\n  /**\n   * Verify user has permission to update configurations\n   */\n  async verifyConfigurationUpdatePermission(userId: string): Promise<boolean> {\n    // Check if user has admin or teacher role\n    const { data, error } = await this.supabase\n      .from('users')\n      .select('role')\n      .eq('id', userId)\n      .single();\n\n    if (error) return false;\n    return ['admin', 'teacher'].includes(data?.role);\n  }\n\n  // ============================================================================\n  // HELPER METHODS\n  // ============================================================================\n\n  /**\n   * Get subjects for a student\n   */\n  private async getStudentSubjects(\n    studentId: string,\n    semester?: number,\n    academicYear?: string\n  ): Promise<string[]> {\n    let query = this.supabase\n      .from('grades')\n      .select('subject_id')\n      .eq('tenant_id', this.tenantId)\n      .eq('student_id', studentId);\n\n    if (semester) query = query.eq('semester', semester);\n    if (academicYear) query = query.eq('academic_year', academicYear);\n\n    const { data, error } = await query;\n\n    if (error) throw new Error(`Failed to get student subjects: ${error.message}`);\n    return [...new Set((data || []).map((item) => item.subject_id))];\n  }\n\n  /**\n   * Calculate statistics from grades array\n   */\n  private calculateStatistics(grades: Grade[]): GradeStatistics {\n    if (grades.length === 0) {\n      return {\n        totalGrades: 0,\n        averageGrade: 0,\n        highestGrade: 0,\n        lowestGrade: 0,\n        medianGrade: 0,\n        standardDeviation: 0,\n        passingGrades: 0,\n        passingPercentage: 0,\n        gradeDistribution: {},\n        letterGradeDistribution: {},\n      };\n    }\n\n    const percentages = grades.map((grade) => grade.percentage);\n    const sortedPercentages = percentages.sort((a, b) => a - b);\n    const average = percentages.reduce((sum, p) => sum + p, 0) / percentages.length;\n    const median = sortedPercentages[Math.floor(sortedPercentages.length / 2)];\n    const variance =\n      percentages.reduce((sum, p) => sum + Math.pow(p - average, 2), 0) / percentages.length;\n    const standardDeviation = Math.sqrt(variance);\n\n    const passingGrades = grades.filter((grade) => grade.percentage >= 50).length;\n    const passingPercentage = (passingGrades / grades.length) * 100;\n\n    const letterGradeDistribution = grades.reduce(\n      (dist, grade) => {\n        dist[grade.letterGrade] = (dist[grade.letterGrade] || 0) + 1;\n        return dist;\n      },\n      {} as Record<string, number>\n    );\n\n    return {\n      totalGrades: grades.length,\n      averageGrade: average,\n      highestGrade: Math.max(...percentages),\n      lowestGrade: Math.min(...percentages),\n      medianGrade: median,\n      standardDeviation,\n      passingGrades,\n      passingPercentage,\n      gradeDistribution: {},\n      letterGradeDistribution,\n    };\n  }\n\n  /**\n   * Transform database grade record to Grade interface\n   */\n  private transformGrade(data: any): Grade {\n    return {\n      id: data.id,\n      tenantId: data.tenant_id,\n      studentId: data.student_id,\n      classId: data.class_id,\n      subjectId: data.subject_id,\n      teacherId: data.teacher_id,\n      assignmentId: data.assignment_id,\n      gradeType: data.grade_type,\n      gradeValue: data.grade_value,\n      maxGrade: data.max_grade,\n      weight: data.weight,\n      percentage: data.percentage,\n      letterGrade: data.letter_grade,\n      gpaPoints: data.gpa_points,\n      examName: data.exam_name,\n      description: data.description,\n      semester: data.semester,\n      academicYear: data.academic_year,\n      gradeDate: new Date(data.grade_date),\n      metadata: data.metadata,\n      createdAt: new Date(data.created_at),\n      updatedAt: new Date(data.updated_at),\n      // Joined fields\n      studentName: data.students?.name,\n      subjectName: data.subjects?.name,\n      className: data.classes?.name,\n      teacherName: data.users?.name,\n    };\n  }\n\n  /**\n   * Transform database grade calculation record\n   */\n  private transformGradeCalculation(data: any): GradeCalculation {\n    return {\n      id: data.id,\n      tenantId: data.tenant_id,\n      studentId: data.student_id,\n      subjectId: data.subject_id,\n      classId: data.class_id,\n      semester: data.semester,\n      academicYear: data.academic_year,\n      totalPoints: data.total_points,\n      totalWeight: data.total_weight,\n      weightedAverage: data.weighted_average,\n      unweightedAverage: data.unweighted_average,\n      finalPercentage: data.final_percentage,\n      finalLetterGrade: data.final_letter_grade,\n      gpaPoints: data.gpa_points,\n      isPassing: data.is_passing,\n      isHonorRoll: data.is_honor_roll,\n      gradeCount: data.grade_count,\n      lastCalculatedAt: new Date(data.last_calculated_at),\n      calculationMethod: data.calculation_method,\n      createdAt: new Date(data.created_at),\n      updatedAt: new Date(data.updated_at),\n    };\n  }\n\n  /**\n   * Transform database grade configuration record\n   */\n  private transformGradeConfiguration(data: any): GradeConfiguration {\n    return {\n      id: data.id,\n      tenantId: data.tenant_id,\n      subjectId: data.subject_id,\n      classId: data.class_id,\n      gradeType: data.grade_type,\n      weight: data.weight,\n      minGrade: data.min_grade,\n      maxGrade: data.max_grade,\n      passingGrade: data.passing_grade,\n      honorRollGrade: data.honor_roll_grade,\n      isRequired: data.is_required,\n      allowsMakeup: data.allows_makeup,\n      semester: data.semester,\n      academicYear: data.academic_year,\n      createdAt: new Date(data.created_at),\n      updatedAt: new Date(data.updated_at),\n    };\n  }\n\n  /**\n   * Transform database grade comment record\n   */\n  private transformGradeComment(data: any): GradeComment {\n    return {\n      id: data.id,\n      tenantId: data.tenant_id,\n      gradeId: data.grade_id,\n      teacherId: data.teacher_id,\n      commentText: data.comment_text,\n      commentType: data.comment_type,\n      isVisibleToStudent: data.is_visible_to_student,\n      isVisibleToParent: data.is_visible_to_parent,\n      createdAt: new Date(data.created_at),\n      updatedAt: new Date(data.updated_at),\n    };\n  }\n\n  // ============================================================================\n  // PLACEHOLDER METHODS FOR API COMPATIBILITY\n  // ============================================================================\n\n  // These methods are referenced by the API endpoints but need implementation\n  // based on specific business requirements\n\n  async verifyStudentAccess(studentId: string): Promise<boolean> {\n    // TODO: Implement student access verification\n    return true;\n  }\n\n  async verifyClassAccess(classId: string): Promise<boolean> {\n    // TODO: Implement class access verification\n    return true;\n  }\n\n  async getStudentInfo(studentId: string): Promise<any> {\n    // TODO: Implement student info retrieval\n    return { id: studentId, name: 'Student Name' };\n  }\n\n  async getClassInfo(classId: string): Promise<any> {\n    // TODO: Implement class info retrieval\n    return { id: classId, name: 'Class Name' };\n  }\n\n  async getSubjectInfo(subjectId: string): Promise<any> {\n    // TODO: Implement subject info retrieval\n    return { id: subjectId, name: 'Subject Name' };\n  }\n\n  // Additional placeholder methods for analytics API\n  async getStudentGradeDistribution(\n    studentId: string,\n    subjectId?: string,\n    semester?: number,\n    academicYear?: string\n  ): Promise<any> {\n    return {};\n  }\n\n  async getStudentClassRankings(\n    studentId: string,\n    semester?: number,\n    academicYear?: string\n  ): Promise<any> {\n    return {};\n  }\n\n  async getStudentSubjectComparisons(\n    studentId: string,\n    semester?: number,\n    academicYear?: string\n  ): Promise<any> {\n    return {};\n  }\n\n  async getClassGradeDistribution(\n    classId: string,\n    subjectId?: string,\n    semester?: number,\n    academicYear?: string\n  ): Promise<any> {\n    return {};\n  }\n\n  async getClassTopPerformers(\n    classId: string,\n    subjectId?: string,\n    semester?: number,\n    academicYear?: string,\n    limit?: number\n  ): Promise<any[]> {\n    return [];\n  }\n\n  async getClassStrugglingStudents(\n    classId: string,\n    subjectId?: string,\n    semester?: number,\n    academicYear?: string,\n    limit?: number\n  ): Promise<any[]> {\n    return [];\n  }\n\n  async getClassSubjectBreakdown(\n    classId: string,\n    semester?: number,\n    academicYear?: string\n  ): Promise<any> {\n    return {};\n  }\n\n  async getSubjectGradeDistribution(\n    subjectId: string,\n    classId?: string,\n    semester?: number,\n    academicYear?: string\n  ): Promise<any> {\n    return {};\n  }\n\n  async getSubjectGradeTypeBreakdown(\n    subjectId: string,\n    classId?: string,\n    semester?: number,\n    academicYear?: string\n  ): Promise<any> {\n    return {};\n  }\n\n  async getSubjectClassComparisons(\n    subjectId: string,\n    semester?: number,\n    academicYear?: string\n  ): Promise<any> {\n    return {};\n  }\n\n  async getTeacherGradeStatistics(\n    teacherId: string,\n    subjectId?: string,\n    semester?: number,\n    academicYear?: string\n  ): Promise<any> {\n    return {};\n  }\n\n  async getTeacherGradingPatterns(\n    teacherId: string,\n    subjectId?: string,\n    semester?: number,\n    academicYear?: string\n  ): Promise<any> {\n    return {};\n  }\n\n  async getTeacherClassBreakdown(\n    teacherId: string,\n    semester?: number,\n    academicYear?: string\n  ): Promise<any> {\n    return {};\n  }\n\n  async getTeacherSubjectBreakdown(\n    teacherId: string,\n    semester?: number,\n    academicYear?: string\n  ): Promise<any> {\n    return {};\n  }\n\n  async getGradeTrends(timePeriod: string, options: any): Promise<any> {\n    return {};\n  }\n\n  async getPerformanceTrends(timePeriod: string, options: any): Promise<any> {\n    return {};\n  }\n\n  async getGradeDistribution(\n    classId?: string,\n    subjectId?: string,\n    gradeType?: string,\n    semester?: number,\n    academicYear?: string\n  ): Promise<any> {\n    return {};\n  }\n\n  async getLetterGradeDistribution(\n    classId?: string,\n    subjectId?: string,\n    gradeType?: string,\n    semester?: number,\n    academicYear?: string\n  ): Promise<any> {\n    return {};\n  }\n\n  async getPercentileRanges(\n    classId?: string,\n    subjectId?: string,\n    gradeType?: string,\n    semester?: number,\n    academicYear?: string\n  ): Promise<any> {\n    return {};\n  }\n\n  async getClassComparisons(\n    semester?: number,\n    academicYear?: string,\n    subjectId?: string\n  ): Promise<any> {\n    return {};\n  }\n\n  async getSubjectComparisons(\n    classId?: string,\n    semester?: number,\n    academicYear?: string\n  ): Promise<any> {\n    return {};\n  }\n\n  async getHistoricalComparisons(\n    classId?: string,\n    subjectId?: string,\n    semester?: number,\n    academicYear?: string\n  ): Promise<any> {\n    return {};\n  }\n\n  // Report generation methods\n  async getGradeSummary(\n    classId?: string,\n    subjectId?: string,\n    semester?: number,\n    academicYear?: string\n  ): Promise<any> {\n    return {};\n  }\n\n  async getDetailedGradeReport(\n    classId?: string,\n    subjectId?: string,\n    studentId?: string,\n    semester?: number,\n    academicYear?: string,\n    gradeTypes?: string[],\n    includeComments?: boolean\n  ): Promise<any[]> {\n    return [];\n  }\n\n  async getGradeBreakdown(\n    classId?: string,\n    subjectId?: string,\n    studentId?: string,\n    semester?: number,\n    academicYear?: string,\n    gradeTypes?: string[]\n  ): Promise<any> {\n    return {};\n  }\n\n  async getClassStudentSummaries(\n    classId: string,\n    subjectId?: string,\n    semester?: number,\n    academicYear?: string\n  ): Promise<any[]> {\n    return [];\n  }\n\n  async getStudentProgress(\n    studentId: string,\n    subjectId?: string,\n    startDate?: Date,\n    endDate?: Date\n  ): Promise<any> {\n    return {};\n  }\n\n  async getStudentGradeTrends(\n    studentId: string,\n    subjectId?: string,\n    startDate?: Date,\n    endDate?: Date\n  ): Promise<any> {\n    return {};\n  }\n\n  async getStudentAnalytics(\n    studentId: string,\n    subjectId?: string,\n    startDate?: Date,\n    endDate?: Date\n  ): Promise<any> {\n    return {};\n  }\n\n  async getClassOverallStatistics(\n    classId: string,\n    semester?: number,\n    academicYear?: string\n  ): Promise<any> {\n    return {};\n  }\n\n  async getClassAnalytics(\n    classId: string,\n    subjectId?: string,\n    semester?: number,\n    academicYear?: string\n  ): Promise<any> {\n    return {};\n  }\n\n  async getSubjectAnalytics(\n    subjectId: string,\n    classId?: string,\n    semester?: number,\n    academicYear?: string\n  ): Promise<any> {\n    return {};\n  }\n\n  async getComparativeData(\n    classId?: string,\n    subjectId?: string,\n    semester?: number,\n    academicYear?: string\n  ): Promise<any[]> {\n    return [];\n  }\n\n  async getGradeBenchmarks(\n    classId?: string,\n    subjectId?: string,\n    semester?: number,\n    academicYear?: string\n  ): Promise<any> {\n    return {};\n  }\n\n  async getComparativeAnalytics(\n    classId?: string,\n    subjectId?: string,\n    semester?: number,\n    academicYear?: string\n  ): Promise<any> {\n    return {};\n  }\n\n  // Calculation methods\n  async recalculateStudentGrades(\n    studentId: string,\n    subjectId?: string,\n    semester?: number,\n    academicYear?: string\n  ): Promise<void> {\n    // TODO: Implement student grade recalculation\n  }\n\n  async recalculateClassGrades(\n    classId: string,\n    subjectId?: string,\n    semester?: number,\n    academicYear?: string\n  ): Promise<void> {\n    // TODO: Implement class grade recalculation\n  }\n\n  async recalculateSubjectGrades(\n    subjectId: string,\n    classId?: string,\n    semester?: number,\n    academicYear?: string\n  ): Promise<void> {\n    // TODO: Implement subject grade recalculation\n  }\n\n  async recalculateBulkGrades(\n    classId?: string,\n    subjectId?: string,\n    semester?: number,\n    academicYear?: string\n  ): Promise<void> {\n    // TODO: Implement bulk grade recalculation\n  }\n\n  async getStudentCalculationDetails(\n    studentId: string,\n    subjectId?: string,\n    semester?: number,\n    academicYear?: string\n  ): Promise<any> {\n    return {};\n  }\n\n  async getClassCalculationDetails(\n    classId: string,\n    subjectId?: string,\n    semester?: number,\n    academicYear?: string\n  ): Promise<any> {\n    return {};\n  }\n\n  async getSubjectCalculationDetails(\n    subjectId: string,\n    classId?: string,\n    semester?: number,\n    academicYear?: string\n  ): Promise<any> {\n    return {};\n  }\n\n  async getBulkCalculationDetails(\n    classId?: string,\n    subjectId?: string,\n    semester?: number,\n    academicYear?: string\n  ): Promise<any> {\n    return {};\n  }\n\n  async getClassGradeCalculations(\n    classId: string,\n    semester?: number,\n    academicYear?: string,\n    subjectId?: string\n  ): Promise<GradeCalculation[]> {\n    return [];\n  }\n\n  async getSubjectGradeCalculations(\n    subjectId: string,\n    classId?: string,\n    semester?: number,\n    academicYear?: string\n  ): Promise<GradeCalculation[]> {\n    return [];\n  }\n\n  async getBulkGradeCalculations(\n    classId?: string,\n    subjectId?: string,\n    semester?: number,\n    academicYear?: string\n  ): Promise<GradeCalculation[]> {\n    return [];\n  }\n\n  async getBulkGradeStatistics(\n    classId?: string,\n    subjectId?: string,\n    semester?: number,\n    academicYear?: string\n  ): Promise<any> {\n    return {};\n  }\n\n  async triggerClassCalculations(\n    classId: string,\n    subjectId?: string,\n    semester?: number,\n    academicYear?: string,\n    force?: boolean\n  ): Promise<any> {\n    return {};\n  }\n\n  async triggerSubjectCalculations(\n    subjectId: string,\n    classId?: string,\n    semester?: number,\n    academicYear?: string,\n    force?: boolean\n  ): Promise<any> {\n    return {};\n  }\n\n  async triggerBulkCalculations(\n    classId?: string,\n    subjectId?: string,\n    semester?: number,\n    academicYear?: string,\n    force?: boolean\n  ): Promise<any> {\n    return {};\n  }\n\n  async triggerRecalculationForConfiguration(\n    subjectId: string,\n    classId?: string,\n    semester?: number,\n    academicYear?: string\n  ): Promise<any> {\n    return {};\n  }\n}\n"],"names":["GradeRepository","BaseRepository","constructor","supabase","tenantId","createGrade","data","result","error","from","insert","tenant_id","student_id","studentId","class_id","classId","subject_id","subjectId","assignment_id","assignmentId","teacher_id","teacherId","grade_type","gradeType","grade_value","gradeValue","max_grade","maxGrade","weight","exam_name","examName","description","semester","academic_year","academicYear","grade_date","gradeDate","toISOString","split","select","single","Error","message","transformGrade","updateGrade","id","updateData","undefined","update","eq","deleteGrade","delete","getGradeById","options","query","includeStudent","code","grade","includeComments","comments","getGradeComments","getGrades","startDate","gte","endDate","lte","minGrade","limit","offset","range","order","ascending","grades","map","getGradesCount","count","head","createBulkGrades","gradeConfig","gradeRecords","getStudentGrades","getClassGrades","getSubjectGrades","getGradeByStudentAndExam","getStudentGradeCalculations","calc","transformGradeCalculation","calculateStudentGPA","rpc","p_student_id","p_semester","p_academic_year","p_tenant_id","triggerStudentCalculations","force","subjects","getStudentSubjects","calculationsTriggered","calculationsUpdated","subject","p_subject_id","console","getGradeAnalytics","p_class_id","totalGrades","total_count","averageGrade","average_grade","highestGrade","highest_grade","lowestGrade","lowest_grade","medianGrade","median_grade","standardDeviation","passingGrades","passing_count","passingPercentage","passing_percentage","gradeDistribution","letterGradeDistribution","getStudentGradeStatistics","calculateStatistics","getClassGradeStatistics","getSubjectGradeStatistics","addGradeComment","gradeId","comment","grade_id","comment_text","commentText","comment_type","commentType","is_visible_to_student","isVisibleToStudent","is_visible_to_parent","isVisibleToParent","transformGradeComment","verifyGradingPermission","userId","length","verifyGradeViewPermission","updateGradeConfigurations","configurations","configRecords","config","min_grade","passing_grade","passingGrade","honor_roll_grade","honorRollGrade","is_required","isRequired","allows_makeup","allowsMakeup","upsert","onConflict","transformGradeConfiguration","verifyConfigurationUpdatePermission","includes","role","Set","item","percentages","percentage","sortedPercentages","sort","a","b","average","reduce","sum","p","median","Math","floor","variance","pow","sqrt","filter","dist","letterGrade","max","min","letter_grade","gpaPoints","gpa_points","Date","metadata","createdAt","created_at","updatedAt","updated_at","studentName","students","name","subjectName","className","classes","teacherName","users","totalPoints","total_points","totalWeight","total_weight","weightedAverage","weighted_average","unweightedAverage","unweighted_average","finalPercentage","final_percentage","finalLetterGrade","final_letter_grade","isPassing","is_passing","isHonorRoll","is_honor_roll","gradeCount","grade_count","lastCalculatedAt","last_calculated_at","calculationMethod","calculation_method","verifyStudentAccess","verifyClassAccess","getStudentInfo","getClassInfo","getSubjectInfo","getStudentGradeDistribution","getStudentClassRankings","getStudentSubjectComparisons","getClassGradeDistribution","getClassTopPerformers","getClassStrugglingStudents","getClassSubjectBreakdown","getSubjectGradeDistribution","getSubjectGradeTypeBreakdown","getSubjectClassComparisons","getTeacherGradeStatistics","getTeacherGradingPatterns","getTeacherClassBreakdown","getTeacherSubjectBreakdown","getGradeTrends","timePeriod","getPerformanceTrends","getGradeDistribution","getLetterGradeDistribution","getPercentileRanges","getClassComparisons","getSubjectComparisons","getHistoricalComparisons","getGradeSummary","getDetailedGradeReport","gradeTypes","getGradeBreakdown","getClassStudentSummaries","getStudentProgress","getStudentGradeTrends","getStudentAnalytics","getClassOverallStatistics","getClassAnalytics","getSubjectAnalytics","getComparativeData","getGradeBenchmarks","getComparativeAnalytics","recalculateStudentGrades","recalculateClassGrades","recalculateSubjectGrades","recalculateBulkGrades","getStudentCalculationDetails","getClassCalculationDetails","getSubjectCalculationDetails","getBulkCalculationDetails","getClassGradeCalculations","getSubjectGradeCalculations","getBulkGradeCalculations","getBulkGradeStatistics","triggerClassCalculations","triggerSubjectCalculations","triggerBulkCalculations","triggerRecalculationForConfiguration"],"mappings":"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"}