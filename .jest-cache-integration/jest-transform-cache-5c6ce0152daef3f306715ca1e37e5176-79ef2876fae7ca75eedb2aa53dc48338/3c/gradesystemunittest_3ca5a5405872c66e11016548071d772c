d3ec498d8e92e93b1c48bcd2132568bd
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
const _globals = require("@jest/globals");
const _grades = require("../types/grades");
// Mock validation module
const mockGradeValidation = {
    safeParse: _globals.jest.fn(()=>({
            success: true
        }))
};
// Mock repository with proper unit test patterns
const mockGradeRepository = {
    create: _globals.jest.fn((data)=>{
        if (mockGradeValidation.safeParse(data).success) {
            return Promise.resolve({
                id: 'test-id',
                ...data
            });
        }
        return Promise.reject(new Error('Grade validation failed'));
    }),
    findById: _globals.jest.fn((id)=>{
        if (id === 'test-id') {
            return Promise.resolve({
                id: 'test-id',
                percentage: 85,
                letter_grade: _grades.GradeScale.BA
            });
        }
        return Promise.resolve(null);
    }),
    findAll: _globals.jest.fn(()=>Promise.resolve({
            data: [],
            totalCount: 0,
            totalPages: 0
        })),
    findByStudent: _globals.jest.fn(()=>Promise.resolve([])),
    findByClass: _globals.jest.fn(()=>Promise.resolve([])),
    update: _globals.jest.fn((id, data)=>{
        if (mockGradeValidation.safeParse(data).success) {
            return Promise.resolve({
                id,
                ...data
            });
        }
        return Promise.reject(new Error('Grade update validation failed'));
    }),
    delete: _globals.jest.fn((id)=>{
        if (id === 'test-id') {
            return Promise.resolve(true);
        }
        return Promise.resolve(false);
    }),
    calculateGPA: _globals.jest.fn(()=>Promise.resolve(3.5)),
    generateReport: _globals.jest.fn(()=>Promise.resolve({}))
};
// Mock calculation service
const mockCalculationService = {
    calculatePercentage: _globals.jest.fn((earned, possible)=>earned / possible * 100),
    calculateWeightedAverage: _globals.jest.fn(()=>89.6),
    calculateGPA: _globals.jest.fn(()=>3.25),
    convertToLetterGrade: _globals.jest.fn((percentage)=>{
        if (percentage >= 90) return _grades.GradeScale.AA;
        if (percentage >= 85) return _grades.GradeScale.BA;
        if (percentage >= 80) return _grades.GradeScale.BB;
        if (percentage >= 75) return _grades.GradeScale.CB;
        if (percentage >= 70) return _grades.GradeScale.CC;
        if (percentage >= 65) return _grades.GradeScale.DC;
        if (percentage >= 60) return _grades.GradeScale.DD;
        return _grades.GradeScale.FF;
    }),
    convertToGPAValue: _globals.jest.fn((grade)=>{
        const gpaMap = {
            [_grades.GradeScale.AA]: 4.0,
            [_grades.GradeScale.BA]: 3.5,
            [_grades.GradeScale.BB]: 3.0,
            [_grades.GradeScale.CB]: 2.5,
            [_grades.GradeScale.CC]: 2.0,
            [_grades.GradeScale.DC]: 1.5,
            [_grades.GradeScale.DD]: 1.0,
            [_grades.GradeScale.FF]: 0.0
        };
        return gpaMap[grade];
    })
};
// Mock analytics service
const mockAnalyticsService = {
    calculateClassAverage: _globals.jest.fn(()=>85),
    calculateGradeDistribution: _globals.jest.fn(()=>({})),
    identifyTrendingPatterns: _globals.jest.fn(()=>({
            trend: 'improving'
        })),
    generateInsights: _globals.jest.fn(()=>[])
};
// Mock comment service
const mockCommentService = {
    addComment: _globals.jest.fn(()=>Promise.resolve({
            id: 'comment-id'
        })),
    updateComment: _globals.jest.fn(()=>Promise.resolve({
            id: 'comment-id'
        })),
    deleteComment: _globals.jest.fn(()=>Promise.resolve(true)),
    getComments: _globals.jest.fn(()=>Promise.resolve([])),
    validateVisibility: _globals.jest.fn(()=>true)
};
(0, _globals.describe)('Grade System Unit Tests', ()=>{
    let gradeRepository;
    let gradeValidation;
    let calculationService;
    let analyticsService;
    let commentService;
    (0, _globals.beforeEach)(()=>{
        gradeRepository = mockGradeRepository;
        gradeValidation = mockGradeValidation;
        calculationService = mockCalculationService;
        analyticsService = mockAnalyticsService;
        commentService = mockCommentService;
        _globals.jest.clearAllMocks();
    });
    (0, _globals.describe)('Grade Repository', ()=>{
        (0, _globals.describe)('createGrade', ()=>{
            (0, _globals.it)('should create a new grade successfully', async ()=>{
                const mockGrade = {
                    student_id: 'test-student',
                    class_id: 'test-class',
                    assignment_id: 'test-assignment',
                    grade_type: _grades.GradeType.EXAM,
                    points_earned: 85,
                    points_possible: 100,
                    percentage: 85,
                    letter_grade: _grades.GradeScale.BA,
                    gpa_value: 3.5,
                    weight: 0.3,
                    comments: 'Good work!',
                    tenant_id: 'test-tenant',
                    graded_by: 'test-teacher'
                };
                const result = await gradeRepository.create(mockGrade);
                (0, _globals.expect)(result).toBeDefined();
                (0, _globals.expect)(result.id).toBe('test-id');
                (0, _globals.expect)(result.percentage).toBe(85);
                (0, _globals.expect)(gradeRepository.create).toHaveBeenCalledWith(mockGrade);
            });
            (0, _globals.it)('should validate grade data', async ()=>{
                const invalidGrade = {
                    student_id: '',
                    class_id: 'test-class',
                    points_earned: -10,
                    points_possible: 0,
                    tenant_id: 'test-tenant',
                    graded_by: 'test-teacher'
                };
                // Mock validation failure
                mockGradeValidation.safeParse.mockReturnValue({
                    success: false,
                    error: {
                        issues: [
                            'Student ID is required',
                            'Invalid points'
                        ]
                    }
                });
                await (0, _globals.expect)(gradeRepository.create(invalidGrade)).rejects.toThrow('Grade validation failed');
            });
            (0, _globals.it)('should enforce multi-tenant isolation', async ()=>{
                const grade = {
                    student_id: 'test-student',
                    class_id: 'test-class',
                    tenant_id: 'different-tenant',
                    graded_by: 'test-teacher'
                };
                // Mock tenant isolation - different tenant should not find grade
                mockGradeRepository.findById.mockReturnValue(Promise.resolve(null));
                const result = await gradeRepository.findById('test-id');
                (0, _globals.expect)(result).toBeNull();
            });
        });
        (0, _globals.describe)('findGrades', ()=>{
            (0, _globals.it)('should retrieve grades for current tenant only', async ()=>{
                const result = await gradeRepository.findAll();
                (0, _globals.expect)(result).toBeDefined();
                (0, _globals.expect)(result.data).toEqual([]);
                (0, _globals.expect)(gradeRepository.findAll).toHaveBeenCalled();
            });
            (0, _globals.it)('should filter grades by student', async ()=>{
                const result = await gradeRepository.findByStudent('test-student-id');
                (0, _globals.expect)(Array.isArray(result)).toBe(true);
                (0, _globals.expect)(gradeRepository.findByStudent).toHaveBeenCalledWith('test-student-id');
            });
            (0, _globals.it)('should filter grades by class', async ()=>{
                const result = await gradeRepository.findByClass('test-class-id');
                (0, _globals.expect)(Array.isArray(result)).toBe(true);
                (0, _globals.expect)(gradeRepository.findByClass).toHaveBeenCalledWith('test-class-id');
            });
        });
        (0, _globals.describe)('updateGrade', ()=>{
            (0, _globals.it)('should update grade successfully', async ()=>{
                const updates = {
                    points_earned: 90,
                    percentage: 90,
                    letter_grade: _grades.GradeScale.AA,
                    comments: 'Excellent work!'
                };
                // Mock successful validation for this test
                mockGradeValidation.safeParse.mockReturnValue({
                    success: true
                });
                const result = await gradeRepository.update('test-id', updates);
                (0, _globals.expect)(result).toBeDefined();
                (0, _globals.expect)(result.id).toBe('test-id');
                (0, _globals.expect)(gradeRepository.update).toHaveBeenCalledWith('test-id', updates);
            });
            (0, _globals.it)('should validate updates', async ()=>{
                const invalidUpdates = {
                    points_earned: -50
                };
                // Mock validation failure
                mockGradeValidation.safeParse.mockReturnValue({
                    success: false,
                    error: {
                        issues: [
                            'Invalid points'
                        ]
                    }
                });
                await (0, _globals.expect)(gradeRepository.update('test-id', invalidUpdates)).rejects.toThrow('Grade update validation failed');
            });
            (0, _globals.it)('should prevent unauthorized updates', async ()=>{
                // Mock unauthorized access
                mockGradeRepository.update.mockReturnValue(Promise.resolve(null));
                const result = await gradeRepository.update('different-tenant-grade', {
                    points_earned: 95
                });
                (0, _globals.expect)(result).toBeNull();
            });
        });
        (0, _globals.describe)('deleteGrade', ()=>{
            (0, _globals.it)('should delete grade successfully', async ()=>{
                const result = await gradeRepository.delete('test-id');
                (0, _globals.expect)(result).toBe(true);
                (0, _globals.expect)(gradeRepository.delete).toHaveBeenCalledWith('test-id');
            });
            (0, _globals.it)('should prevent unauthorized deletion', async ()=>{
                const result = await gradeRepository.delete('different-tenant-grade');
                (0, _globals.expect)(result).toBe(false);
            });
        });
    });
    (0, _globals.describe)('Grade Validation', ()=>{
        (0, _globals.describe)('gradeValidation', ()=>{
            (0, _globals.it)('should validate valid grade data', ()=>{
                const validData = {
                    student_id: 'test-student',
                    class_id: 'test-class',
                    assignment_id: 'test-assignment',
                    grade_type: _grades.GradeType.EXAM,
                    points_earned: 85,
                    points_possible: 100,
                    weight: 0.3
                };
                // Mock successful validation for this test
                mockGradeValidation.safeParse.mockReturnValue({
                    success: true
                });
                const result = gradeValidation.safeParse(validData);
                (0, _globals.expect)(result.success).toBe(true);
            });
            (0, _globals.it)('should reject invalid grade data', ()=>{
                const invalidData = {
                    student_id: '',
                    class_id: '',
                    points_earned: -10,
                    points_possible: 0,
                    weight: 1.5
                };
                gradeValidation.safeParse.mockReturnValue({
                    success: false,
                    error: {
                        issues: [
                            'Multiple errors'
                        ]
                    }
                });
                const result = gradeValidation.safeParse(invalidData);
                (0, _globals.expect)(result.success).toBe(false);
            });
            (0, _globals.it)('should validate required fields', ()=>{
                const incompleteData = {
                    student_id: 'test-student'
                };
                gradeValidation.safeParse.mockReturnValue({
                    success: false,
                    error: {
                        issues: [
                            'Missing fields'
                        ]
                    }
                });
                const result = gradeValidation.safeParse(incompleteData);
                (0, _globals.expect)(result.success).toBe(false);
            });
            (0, _globals.it)('should validate points constraints', ()=>{
                const invalidPoints = {
                    student_id: 'test-student',
                    class_id: 'test-class',
                    points_earned: 110,
                    points_possible: 100,
                    grade_type: _grades.GradeType.EXAM
                };
                gradeValidation.safeParse.mockReturnValue({
                    success: false,
                    error: {
                        issues: [
                            'Points earned exceeds possible'
                        ]
                    }
                });
                const result = gradeValidation.safeParse(invalidPoints);
                (0, _globals.expect)(result.success).toBe(false);
            });
            (0, _globals.it)('should validate weight constraints', ()=>{
                const invalidWeight = {
                    student_id: 'test-student',
                    class_id: 'test-class',
                    points_earned: 85,
                    points_possible: 100,
                    grade_type: _grades.GradeType.EXAM,
                    weight: 1.5
                };
                gradeValidation.safeParse.mockReturnValue({
                    success: false,
                    error: {
                        issues: [
                            'Weight exceeds 1.0'
                        ]
                    }
                });
                const result = gradeValidation.safeParse(invalidWeight);
                (0, _globals.expect)(result.success).toBe(false);
            });
        });
    });
    (0, _globals.describe)('Grade Calculation', ()=>{
        (0, _globals.it)('should calculate percentage correctly', ()=>{
            const pointsEarned = 85;
            const pointsPossible = 100;
            const percentage = calculationService.calculatePercentage(pointsEarned, pointsPossible);
            (0, _globals.expect)(percentage).toBe(85);
            (0, _globals.expect)(calculationService.calculatePercentage).toHaveBeenCalledWith(85, 100);
        });
        (0, _globals.it)('should calculate weighted average', ()=>{
            const grades = [
                {
                    percentage: 90,
                    weight: 0.3
                },
                {
                    percentage: 85,
                    weight: 0.2
                },
                {
                    percentage: 88,
                    weight: 0.1
                },
                {
                    percentage: 92,
                    weight: 0.4
                }
            ];
            const weightedAverage = calculationService.calculateWeightedAverage(grades);
            (0, _globals.expect)(weightedAverage).toBe(89.6);
        });
        (0, _globals.it)('should calculate GPA correctly', async ()=>{
            const grades = [
                {
                    letter_grade: _grades.GradeScale.AA,
                    gpa_value: 4.0
                },
                {
                    letter_grade: _grades.GradeScale.BA,
                    gpa_value: 3.5
                },
                {
                    letter_grade: _grades.GradeScale.BB,
                    gpa_value: 3.0
                },
                {
                    letter_grade: _grades.GradeScale.CB,
                    gpa_value: 2.5
                }
            ];
            const gpa = calculationService.calculateGPA(grades);
            (0, _globals.expect)(gpa).toBe(3.25);
        });
        (0, _globals.it)('should convert percentage to letter grade', ()=>{
            const testCases = [
                {
                    percentage: 95,
                    expected: _grades.GradeScale.AA
                },
                {
                    percentage: 87,
                    expected: _grades.GradeScale.BA
                },
                {
                    percentage: 82,
                    expected: _grades.GradeScale.BB
                },
                {
                    percentage: 77,
                    expected: _grades.GradeScale.CB
                },
                {
                    percentage: 72,
                    expected: _grades.GradeScale.CC
                },
                {
                    percentage: 67,
                    expected: _grades.GradeScale.DC
                },
                {
                    percentage: 62,
                    expected: _grades.GradeScale.DD
                },
                {
                    percentage: 50,
                    expected: _grades.GradeScale.FF
                }
            ];
            testCases.forEach(({ percentage, expected })=>{
                const result = calculationService.convertToLetterGrade(percentage);
                (0, _globals.expect)(result).toBe(expected);
            });
        });
        (0, _globals.it)('should convert letter grade to GPA value', ()=>{
            const testCases = [
                {
                    grade: _grades.GradeScale.AA,
                    expected: 4.0
                },
                {
                    grade: _grades.GradeScale.BA,
                    expected: 3.5
                },
                {
                    grade: _grades.GradeScale.BB,
                    expected: 3.0
                },
                {
                    grade: _grades.GradeScale.FF,
                    expected: 0.0
                }
            ];
            testCases.forEach(({ grade, expected })=>{
                const result = calculationService.convertToGPAValue(grade);
                (0, _globals.expect)(result).toBe(expected);
            });
        });
    });
    (0, _globals.describe)('Grade Analytics', ()=>{
        (0, _globals.it)('should calculate class average', ()=>{
            const classGrades = [
                85,
                90,
                78,
                88,
                92,
                76,
                84,
                89
            ];
            const average = analyticsService.calculateClassAverage(classGrades);
            (0, _globals.expect)(average).toBe(85);
            (0, _globals.expect)(analyticsService.calculateClassAverage).toHaveBeenCalledWith(classGrades);
        });
        (0, _globals.it)('should calculate grade distribution', ()=>{
            const grades = [
                {
                    letter_grade: _grades.GradeScale.AA
                },
                {
                    letter_grade: _grades.GradeScale.BA
                },
                {
                    letter_grade: _grades.GradeScale.AA
                },
                {
                    letter_grade: _grades.GradeScale.BB
                },
                {
                    letter_grade: _grades.GradeScale.BA
                },
                {
                    letter_grade: _grades.GradeScale.CC
                }
            ];
            const distribution = analyticsService.calculateGradeDistribution(grades);
            (0, _globals.expect)(distribution).toBeDefined();
            (0, _globals.expect)(analyticsService.calculateGradeDistribution).toHaveBeenCalledWith(grades);
        });
        (0, _globals.it)('should identify trending patterns', ()=>{
            const studentGrades = [
                {
                    date: '2025-01-01',
                    percentage: 75
                },
                {
                    date: '2025-01-15',
                    percentage: 78
                },
                {
                    date: '2025-02-01',
                    percentage: 82
                },
                {
                    date: '2025-02-15',
                    percentage: 85
                },
                {
                    date: '2025-03-01',
                    percentage: 88
                }
            ];
            const trends = analyticsService.identifyTrendingPatterns(studentGrades);
            (0, _globals.expect)(trends).toBeDefined();
            (0, _globals.expect)(trends.trend).toBe('improving');
        });
    });
    (0, _globals.describe)('Grade Reports', ()=>{
        (0, _globals.it)('should generate student report card', async ()=>{
            const studentId = 'test-student';
            const semester = 'Fall 2025';
            const report = await gradeRepository.generateReport(studentId, semester);
            (0, _globals.expect)(report).toBeDefined();
            (0, _globals.expect)(gradeRepository.generateReport).toHaveBeenCalledWith(studentId, semester);
        });
        (0, _globals.it)('should generate class performance report', async ()=>{
            const classId = 'test-class';
            const report = await gradeRepository.generateReport(classId);
            (0, _globals.expect)(report).toBeDefined();
            (0, _globals.expect)(gradeRepository.generateReport).toHaveBeenCalledWith(classId);
        });
        (0, _globals.it)('should generate transcript', async ()=>{
            const studentId = 'test-student';
            const academicYear = '2024-2025';
            const transcript = await gradeRepository.generateReport(studentId, academicYear);
            (0, _globals.expect)(transcript).toBeDefined();
        });
    });
    (0, _globals.describe)('Grade Permissions', ()=>{
        (0, _globals.it)('should allow teachers to create grades', ()=>{
            const userRole = 'teacher';
            const canCreate = [
                'teacher',
                'admin'
            ].includes(userRole);
            (0, _globals.expect)(canCreate).toBe(true);
        });
        (0, _globals.it)('should prevent students from creating grades', ()=>{
            const userRole = 'student';
            const canCreate = [
                'teacher',
                'admin'
            ].includes(userRole);
            (0, _globals.expect)(canCreate).toBe(false);
        });
        (0, _globals.it)('should allow students to view their own grades', ()=>{
            const userRole = 'student';
            const studentId = 'test-student';
            const gradeStudentId = 'test-student';
            const canView = userRole === 'student' && studentId === gradeStudentId;
            (0, _globals.expect)(canView).toBe(true);
        });
        (0, _globals.it)('should prevent students from viewing other students grades', ()=>{
            const userRole = 'student';
            const studentId = 'test-student';
            const gradeStudentId = 'other-student';
            const canView = userRole === 'student' && studentId === gradeStudentId;
            (0, _globals.expect)(canView).toBe(false);
        });
        (0, _globals.it)('should allow parents to view their child grades', ()=>{
            const userRole = 'parent';
            const childId = 'child-student-id';
            const gradeStudentId = 'child-student-id';
            const canView = userRole === 'parent' && childId === gradeStudentId;
            (0, _globals.expect)(canView).toBe(true);
        });
    });
    (0, _globals.describe)('Grade Comments', ()=>{
        (0, _globals.it)('should allow teachers to add comments', async ()=>{
            const comment = {
                grade_id: 'test-grade-id',
                comment: 'Student shows improvement',
                visible_to_student: true,
                visible_to_parent: true,
                created_by: 'test-teacher'
            };
            const result = await commentService.addComment(comment);
            (0, _globals.expect)(result).toBeDefined();
            (0, _globals.expect)(result.id).toBe('comment-id');
        });
        (0, _globals.it)('should validate comment visibility', ()=>{
            const comment = {
                text: 'Student shows improvement',
                visible_to_student: true,
                visible_to_parent: true,
                author: 'test-teacher'
            };
            const isValid = commentService.validateVisibility(comment);
            (0, _globals.expect)(isValid).toBe(true);
        });
        (0, _globals.it)('should support private teacher comments', ()=>{
            const privateComment = {
                text: 'Note: Student may need additional support',
                visible_to_student: false,
                visible_to_parent: false,
                author: 'test-teacher'
            };
            (0, _globals.expect)(privateComment.visible_to_student).toBe(false);
            (0, _globals.expect)(privateComment.visible_to_parent).toBe(false);
        });
    });
    (0, _globals.describe)('Grade History', ()=>{
        (0, _globals.it)('should track grade changes', ()=>{
            const gradeHistory = [
                {
                    grade: 85,
                    timestamp: '2025-01-01',
                    changed_by: 'test-teacher'
                },
                {
                    grade: 88,
                    timestamp: '2025-01-02',
                    changed_by: 'test-teacher'
                },
                {
                    grade: 90,
                    timestamp: '2025-01-03',
                    changed_by: 'test-teacher'
                }
            ];
            (0, _globals.expect)(gradeHistory.length).toBe(3);
            (0, _globals.expect)(gradeHistory[0].grade).toBe(85);
            (0, _globals.expect)(gradeHistory[2].grade).toBe(90);
        });
        (0, _globals.it)('should preserve original grade', ()=>{
            const originalGrade = 85;
            const currentGrade = 90;
            (0, _globals.expect)(originalGrade).toBe(85);
            (0, _globals.expect)(currentGrade).toBe(90);
            (0, _globals.expect)(currentGrade).toBeGreaterThan(originalGrade);
        });
    });
    (0, _globals.describe)('Turkish Grading System', ()=>{
        (0, _globals.it)('should support Turkish letter grades', ()=>{
            const turkishGrades = [
                _grades.GradeScale.AA,
                _grades.GradeScale.BA,
                _grades.GradeScale.BB,
                _grades.GradeScale.CB,
                _grades.GradeScale.CC,
                _grades.GradeScale.DC,
                _grades.GradeScale.DD,
                _grades.GradeScale.FF
            ];
            (0, _globals.expect)(turkishGrades).toHaveLength(8);
            (0, _globals.expect)(turkishGrades).toContain(_grades.GradeScale.AA);
            (0, _globals.expect)(turkishGrades).toContain(_grades.GradeScale.FF);
        });
        (0, _globals.it)('should calculate Turkish GPA correctly', ()=>{
            const turkishGrades = [
                {
                    letter_grade: _grades.GradeScale.AA,
                    credit_hours: 3
                },
                {
                    letter_grade: _grades.GradeScale.BA,
                    credit_hours: 4
                },
                {
                    letter_grade: _grades.GradeScale.BB,
                    credit_hours: 3
                },
                {
                    letter_grade: _grades.GradeScale.CB,
                    credit_hours: 2
                }
            ];
            // Mock Turkish GPA calculation
            const totalQualityPoints = 4.0 * 3 + 3.5 * 4 + 3.0 * 3 + 2.5 * 2;
            const totalCreditHours = 3 + 4 + 3 + 2;
            const gpa = totalQualityPoints / totalCreditHours;
            (0, _globals.expect)(Math.round(gpa * 100) / 100).toBe(3.33);
        });
        (0, _globals.it)('should support Turkish academic terms', ()=>{
            const academicTerms = [
                'Güz Dönemi',
                'Bahar Dönemi',
                'Yaz Dönemi'
            ];
            (0, _globals.expect)(academicTerms).toContain('Güz Dönemi');
            (0, _globals.expect)(academicTerms).toContain('Bahar Dönemi');
            (0, _globals.expect)(academicTerms).toContain('Yaz Dönemi');
        });
    });
    (0, _globals.describe)('Grade Analytics Advanced', ()=>{
        (0, _globals.it)('should identify struggling students', ()=>{
            const classGrades = [
                {
                    student_id: 'student1',
                    average: 95
                },
                {
                    student_id: 'student2',
                    average: 65
                },
                {
                    student_id: 'student3',
                    average: 88
                },
                {
                    student_id: 'student4',
                    average: 55
                }
            ];
            const strugglingThreshold = 70;
            const strugglingStudents = classGrades.filter((student)=>student.average < strugglingThreshold);
            (0, _globals.expect)(strugglingStudents).toHaveLength(2);
            (0, _globals.expect)(strugglingStudents[0].student_id).toBe('student2');
            (0, _globals.expect)(strugglingStudents[1].student_id).toBe('student4');
        });
        (0, _globals.it)('should calculate semester GPA', ()=>{
            const semesterGrades = [
                {
                    course: 'Math',
                    grade: _grades.GradeScale.AA,
                    credits: 4
                },
                {
                    course: 'Science',
                    grade: _grades.GradeScale.BA,
                    credits: 3
                },
                {
                    course: 'English',
                    grade: _grades.GradeScale.BB,
                    credits: 3
                },
                {
                    course: 'History',
                    grade: _grades.GradeScale.CB,
                    credits: 2
                }
            ];
            const totalQualityPoints = 4.0 * 4 + 3.5 * 3 + 3.0 * 3 + 2.5 * 2;
            const totalCredits = 4 + 3 + 3 + 2;
            const semesterGPA = totalQualityPoints / totalCredits;
            (0, _globals.expect)(Math.round(semesterGPA * 100) / 100).toBe(3.38);
        });
        (0, _globals.it)('should generate performance insights', ()=>{
            const classId = 'test-class';
            const insights = analyticsService.generateInsights(classId);
            (0, _globals.expect)(insights).toBeDefined();
            (0, _globals.expect)(Array.isArray(insights)).toBe(true);
            (0, _globals.expect)(analyticsService.generateInsights).toHaveBeenCalledWith(classId);
        });
    });
});

//# sourceMappingURL=data:application/json;base64,