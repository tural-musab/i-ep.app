d9ebd7b352e0114c0c156a4f56e598de
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
const _globals = require("@jest/globals");
const _attendance = require("../types/attendance");
// Mock validation module
const mockAttendanceValidation = {
    safeParse: _globals.jest.fn(()=>({
            success: true
        }))
};
// Mock repository with proper unit test patterns
const mockAttendanceRepository = {
    create: _globals.jest.fn((data)=>{
        if (mockAttendanceValidation.safeParse(data).success) {
            return Promise.resolve({
                id: 'test-id',
                ...data
            });
        }
        return Promise.reject(new Error('Attendance validation failed'));
    }),
    findById: _globals.jest.fn((id)=>{
        if (id === 'test-id') {
            return Promise.resolve({
                id: 'test-id',
                status: _attendance.AttendanceStatus.PRESENT
            });
        }
        return Promise.resolve(null);
    }),
    findAll: _globals.jest.fn(()=>Promise.resolve({
            data: [],
            totalCount: 0,
            totalPages: 0
        })),
    findByStudent: _globals.jest.fn(()=>Promise.resolve([])),
    findByClass: _globals.jest.fn(()=>Promise.resolve([])),
    findByDateRange: _globals.jest.fn(()=>Promise.resolve([])),
    update: _globals.jest.fn((id, data)=>{
        if (mockAttendanceValidation.safeParse(data).success) {
            return Promise.resolve({
                id,
                ...data
            });
        }
        return Promise.reject(new Error('Attendance update validation failed'));
    }),
    delete: _globals.jest.fn((id)=>{
        if (id === 'test-id') {
            return Promise.resolve(true);
        }
        return Promise.resolve(false);
    }),
    getStatistics: _globals.jest.fn(()=>Promise.resolve({
            total_days: 20,
            present_days: 18,
            absent_days: 2,
            attendance_percentage: 90
        })),
    generateReport: _globals.jest.fn(()=>Promise.resolve({}))
};
// Mock notification service
const mockNotificationService = {
    sendAbsenceNotification: _globals.jest.fn(()=>Promise.resolve(true)),
    sendLateArrivalNotification: _globals.jest.fn(()=>Promise.resolve(true)),
    sendConsecutiveAbsenceAlert: _globals.jest.fn(()=>Promise.resolve(true)),
    sendLowAttendanceAlert: _globals.jest.fn(()=>Promise.resolve(true))
};
// Mock analytics service
const mockAnalyticsService = {
    calculateAttendanceRate: _globals.jest.fn(()=>90),
    getAttendanceTrends: _globals.jest.fn(()=>({
            trend: 'stable'
        })),
    getClassAttendanceDistribution: _globals.jest.fn(()=>({})),
    generateInsights: _globals.jest.fn(()=>[])
};
(0, _globals.describe)('Attendance System Unit Tests', ()=>{
    let attendanceRepository;
    let attendanceValidation;
    let notificationService;
    let analyticsService;
    (0, _globals.beforeEach)(()=>{
        attendanceRepository = mockAttendanceRepository;
        attendanceValidation = mockAttendanceValidation;
        notificationService = mockNotificationService;
        analyticsService = mockAnalyticsService;
        _globals.jest.clearAllMocks();
    });
    (0, _globals.describe)('Attendance Repository', ()=>{
        (0, _globals.describe)('createAttendance', ()=>{
            (0, _globals.it)('should create a new attendance record successfully', async ()=>{
                const mockAttendance = {
                    student_id: 'test-student',
                    class_id: 'test-class',
                    date: new Date(),
                    status: _attendance.AttendanceStatus.PRESENT,
                    tenant_id: 'test-tenant',
                    recorded_by: 'test-teacher'
                };
                const result = await attendanceRepository.create(mockAttendance);
                (0, _globals.expect)(result).toBeDefined();
                (0, _globals.expect)(result.id).toBe('test-id');
                (0, _globals.expect)(result.status).toBe(_attendance.AttendanceStatus.PRESENT);
                (0, _globals.expect)(attendanceRepository.create).toHaveBeenCalledWith(mockAttendance);
            });
            (0, _globals.it)('should handle validation errors', async ()=>{
                const invalidAttendance = {
                    student_id: '',
                    class_id: 'test-class',
                    date: new Date(),
                    status: 'INVALID_STATUS',
                    tenant_id: 'test-tenant',
                    recorded_by: 'test-teacher'
                };
                // Mock validation failure
                mockAttendanceValidation.safeParse.mockReturnValue({
                    success: false,
                    error: {
                        issues: [
                            'Student ID is required',
                            'Invalid status'
                        ]
                    }
                });
                await (0, _globals.expect)(attendanceRepository.create(invalidAttendance)).rejects.toThrow('Attendance validation failed');
            });
            (0, _globals.it)('should enforce multi-tenant isolation', async ()=>{
                const attendance = {
                    student_id: 'test-student',
                    class_id: 'test-class',
                    date: new Date(),
                    status: _attendance.AttendanceStatus.PRESENT,
                    tenant_id: 'different-tenant',
                    recorded_by: 'test-teacher'
                };
                // Mock tenant isolation - different tenant should not find attendance
                mockAttendanceRepository.findById.mockReturnValue(Promise.resolve(null));
                const result = await attendanceRepository.findById('test-id');
                (0, _globals.expect)(result).toBeNull();
            });
        });
        (0, _globals.describe)('findAttendance', ()=>{
            (0, _globals.it)('should retrieve attendance for current tenant only', async ()=>{
                const result = await attendanceRepository.findAll();
                (0, _globals.expect)(result).toBeDefined();
                (0, _globals.expect)(result.data).toEqual([]);
                (0, _globals.expect)(attendanceRepository.findAll).toHaveBeenCalled();
            });
            (0, _globals.it)('should filter attendance by student', async ()=>{
                const result = await attendanceRepository.findByStudent('test-student-id');
                (0, _globals.expect)(Array.isArray(result)).toBe(true);
                (0, _globals.expect)(attendanceRepository.findByStudent).toHaveBeenCalledWith('test-student-id');
            });
            (0, _globals.it)('should filter attendance by class', async ()=>{
                const result = await attendanceRepository.findByClass('test-class-id');
                (0, _globals.expect)(Array.isArray(result)).toBe(true);
                (0, _globals.expect)(attendanceRepository.findByClass).toHaveBeenCalledWith('test-class-id');
            });
            (0, _globals.it)('should filter attendance by date range', async ()=>{
                const startDate = new Date('2025-01-01');
                const endDate = new Date('2025-01-31');
                const result = await attendanceRepository.findByDateRange(startDate, endDate);
                (0, _globals.expect)(Array.isArray(result)).toBe(true);
                (0, _globals.expect)(attendanceRepository.findByDateRange).toHaveBeenCalledWith(startDate, endDate);
            });
        });
        (0, _globals.describe)('updateAttendance', ()=>{
            (0, _globals.it)('should update attendance successfully', async ()=>{
                const updates = {
                    status: _attendance.AttendanceStatus.LATE,
                    notes: 'Arrived 10 minutes late'
                };
                // Mock successful validation for this test
                mockAttendanceValidation.safeParse.mockReturnValue({
                    success: true
                });
                const result = await attendanceRepository.update('test-id', updates);
                (0, _globals.expect)(result).toBeDefined();
                (0, _globals.expect)(result.id).toBe('test-id');
                (0, _globals.expect)(attendanceRepository.update).toHaveBeenCalledWith('test-id', updates);
            });
            (0, _globals.it)('should validate updates', async ()=>{
                const invalidUpdates = {
                    status: 'INVALID_STATUS',
                    notes: ''
                };
                // Mock validation failure
                mockAttendanceValidation.safeParse.mockReturnValue({
                    success: false,
                    error: {
                        issues: [
                            'Invalid status'
                        ]
                    }
                });
                await (0, _globals.expect)(attendanceRepository.update('test-id', invalidUpdates)).rejects.toThrow('Attendance update validation failed');
            });
            (0, _globals.it)('should prevent unauthorized updates', async ()=>{
                // Mock unauthorized access
                mockAttendanceRepository.update.mockReturnValue(Promise.resolve(null));
                const result = await attendanceRepository.update('different-tenant-attendance', {
                    status: _attendance.AttendanceStatus.PRESENT
                });
                (0, _globals.expect)(result).toBeNull();
            });
        });
        (0, _globals.describe)('deleteAttendance', ()=>{
            (0, _globals.it)('should delete attendance successfully', async ()=>{
                const result = await attendanceRepository.delete('test-id');
                (0, _globals.expect)(result).toBe(true);
                (0, _globals.expect)(attendanceRepository.delete).toHaveBeenCalledWith('test-id');
            });
            (0, _globals.it)('should prevent unauthorized deletion', async ()=>{
                const result = await attendanceRepository.delete('different-tenant-attendance');
                (0, _globals.expect)(result).toBe(false);
            });
        });
    });
    (0, _globals.describe)('Attendance Validation', ()=>{
        (0, _globals.describe)('attendanceValidation', ()=>{
            (0, _globals.it)('should validate valid attendance data', ()=>{
                const validData = {
                    student_id: 'test-student',
                    class_id: 'test-class',
                    date: new Date(),
                    status: _attendance.AttendanceStatus.PRESENT,
                    tenant_id: 'test-tenant',
                    recorded_by: 'test-teacher'
                };
                // Mock successful validation for this test
                mockAttendanceValidation.safeParse.mockReturnValue({
                    success: true
                });
                const result = attendanceValidation.safeParse(validData);
                (0, _globals.expect)(result.success).toBe(true);
            });
            (0, _globals.it)('should reject invalid attendance data', ()=>{
                const invalidData = {
                    student_id: '',
                    class_id: '',
                    date: 'invalid-date',
                    status: 'INVALID_STATUS',
                    tenant_id: '',
                    recorded_by: ''
                };
                attendanceValidation.safeParse.mockReturnValue({
                    success: false,
                    error: {
                        issues: [
                            'Multiple validation errors'
                        ]
                    }
                });
                const result = attendanceValidation.safeParse(invalidData);
                (0, _globals.expect)(result.success).toBe(false);
            });
            (0, _globals.it)('should validate required fields', ()=>{
                const incompleteData = {
                    student_id: 'test-student'
                };
                attendanceValidation.safeParse.mockReturnValue({
                    success: false,
                    error: {
                        issues: [
                            'Missing required fields'
                        ]
                    }
                });
                const result = attendanceValidation.safeParse(incompleteData);
                (0, _globals.expect)(result.success).toBe(false);
            });
            (0, _globals.it)('should validate date constraints', ()=>{
                const futureDate = {
                    student_id: 'test-student',
                    class_id: 'test-class',
                    date: new Date('2030-01-01'),
                    status: _attendance.AttendanceStatus.PRESENT,
                    tenant_id: 'test-tenant',
                    recorded_by: 'test-teacher'
                };
                attendanceValidation.safeParse.mockReturnValue({
                    success: false,
                    error: {
                        issues: [
                            'Date cannot be in the future'
                        ]
                    }
                });
                const result = attendanceValidation.safeParse(futureDate);
                (0, _globals.expect)(result.success).toBe(false);
            });
            (0, _globals.it)('should validate status values', ()=>{
                const invalidStatus = {
                    student_id: 'test-student',
                    class_id: 'test-class',
                    date: new Date(),
                    status: 'INVALID_STATUS',
                    tenant_id: 'test-tenant',
                    recorded_by: 'test-teacher'
                };
                attendanceValidation.safeParse.mockReturnValue({
                    success: false,
                    error: {
                        issues: [
                            'Invalid attendance status'
                        ]
                    }
                });
                const result = attendanceValidation.safeParse(invalidStatus);
                (0, _globals.expect)(result.success).toBe(false);
            });
        });
    });
    (0, _globals.describe)('Attendance Statistics', ()=>{
        (0, _globals.it)('should calculate attendance statistics correctly', async ()=>{
            const studentId = 'test-student';
            const classId = 'test-class';
            const stats = await attendanceRepository.getStatistics(studentId, classId);
            (0, _globals.expect)(stats).toBeDefined();
            (0, _globals.expect)(stats.total_days).toBe(20);
            (0, _globals.expect)(stats.present_days).toBe(18);
            (0, _globals.expect)(stats.absent_days).toBe(2);
            (0, _globals.expect)(stats.attendance_percentage).toBe(90);
        });
        (0, _globals.it)('should calculate attendance rate', ()=>{
            const presentDays = 18;
            const totalDays = 20;
            const rate = analyticsService.calculateAttendanceRate(presentDays, totalDays);
            (0, _globals.expect)(rate).toBe(90);
        });
        (0, _globals.it)('should identify attendance trends', ()=>{
            const attendanceData = [
                {
                    date: '2025-01-01',
                    present: true
                },
                {
                    date: '2025-01-02',
                    present: true
                },
                {
                    date: '2025-01-03',
                    present: false
                },
                {
                    date: '2025-01-04',
                    present: true
                },
                {
                    date: '2025-01-05',
                    present: true
                }
            ];
            const trends = analyticsService.getAttendanceTrends(attendanceData);
            (0, _globals.expect)(trends).toBeDefined();
            (0, _globals.expect)(trends.trend).toBe('stable');
        });
        (0, _globals.it)('should generate class attendance distribution', ()=>{
            const classId = 'test-class';
            const distribution = analyticsService.getClassAttendanceDistribution(classId);
            (0, _globals.expect)(distribution).toBeDefined();
            (0, _globals.expect)(analyticsService.getClassAttendanceDistribution).toHaveBeenCalledWith(classId);
        });
    });
    (0, _globals.describe)('Attendance Notifications', ()=>{
        (0, _globals.it)('should send absence notification', async ()=>{
            const studentId = 'test-student';
            const date = new Date();
            const result = await notificationService.sendAbsenceNotification(studentId, date);
            (0, _globals.expect)(result).toBe(true);
            (0, _globals.expect)(notificationService.sendAbsenceNotification).toHaveBeenCalledWith(studentId, date);
        });
        (0, _globals.it)('should send late arrival notification', async ()=>{
            const studentId = 'test-student';
            const arrivalTime = new Date();
            const result = await notificationService.sendLateArrivalNotification(studentId, arrivalTime);
            (0, _globals.expect)(result).toBe(true);
            (0, _globals.expect)(notificationService.sendLateArrivalNotification).toHaveBeenCalledWith(studentId, arrivalTime);
        });
        (0, _globals.it)('should send consecutive absence alert', async ()=>{
            const studentId = 'test-student';
            const consecutiveDays = 3;
            const result = await notificationService.sendConsecutiveAbsenceAlert(studentId, consecutiveDays);
            (0, _globals.expect)(result).toBe(true);
            (0, _globals.expect)(notificationService.sendConsecutiveAbsenceAlert).toHaveBeenCalledWith(studentId, consecutiveDays);
        });
        (0, _globals.it)('should send low attendance alert', async ()=>{
            const studentId = 'test-student';
            const attendanceRate = 70; // Below threshold
            const result = await notificationService.sendLowAttendanceAlert(studentId, attendanceRate);
            (0, _globals.expect)(result).toBe(true);
            (0, _globals.expect)(notificationService.sendLowAttendanceAlert).toHaveBeenCalledWith(studentId, attendanceRate);
        });
    });
    (0, _globals.describe)('Attendance Reports', ()=>{
        (0, _globals.it)('should generate daily attendance report', async ()=>{
            const classId = 'test-class';
            const date = new Date();
            const report = await attendanceRepository.generateReport('daily', classId, date);
            (0, _globals.expect)(report).toBeDefined();
            (0, _globals.expect)(attendanceRepository.generateReport).toHaveBeenCalledWith('daily', classId, date);
        });
        (0, _globals.it)('should generate weekly attendance report', async ()=>{
            const classId = 'test-class';
            const startDate = new Date('2025-01-01');
            const endDate = new Date('2025-01-07');
            const report = await attendanceRepository.generateReport('weekly', classId, startDate, endDate);
            (0, _globals.expect)(report).toBeDefined();
            (0, _globals.expect)(attendanceRepository.generateReport).toHaveBeenCalledWith('weekly', classId, startDate, endDate);
        });
        (0, _globals.it)('should generate monthly attendance report', async ()=>{
            const classId = 'test-class';
            const month = '2025-01';
            const report = await attendanceRepository.generateReport('monthly', classId, month);
            (0, _globals.expect)(report).toBeDefined();
            (0, _globals.expect)(attendanceRepository.generateReport).toHaveBeenCalledWith('monthly', classId, month);
        });
        (0, _globals.it)('should generate student attendance summary', async ()=>{
            const studentId = 'test-student';
            const semester = 'Fall 2025';
            const summary = await attendanceRepository.generateReport('student-summary', studentId, semester);
            (0, _globals.expect)(summary).toBeDefined();
            (0, _globals.expect)(attendanceRepository.generateReport).toHaveBeenCalledWith('student-summary', studentId, semester);
        });
        (0, _globals.it)('should generate class attendance summary', async ()=>{
            const classId = 'test-class';
            const semester = 'Fall 2025';
            const summary = await attendanceRepository.generateReport('class-summary', classId, semester);
            (0, _globals.expect)(summary).toBeDefined();
            (0, _globals.expect)(attendanceRepository.generateReport).toHaveBeenCalledWith('class-summary', classId, semester);
        });
    });
    (0, _globals.describe)('Attendance Analytics', ()=>{
        (0, _globals.it)('should calculate class average attendance', ()=>{
            const classAttendance = [
                {
                    student_id: 'student1',
                    attendance_rate: 95
                },
                {
                    student_id: 'student2',
                    attendance_rate: 88
                },
                {
                    student_id: 'student3',
                    attendance_rate: 92
                },
                {
                    student_id: 'student4',
                    attendance_rate: 85
                }
            ];
            const average = classAttendance.reduce((sum, student)=>sum + student.attendance_rate, 0) / classAttendance.length;
            (0, _globals.expect)(Math.round(average)).toBe(90);
        });
        (0, _globals.it)('should identify students with low attendance', ()=>{
            const attendanceThreshold = 80;
            const students = [
                {
                    student_id: 'student1',
                    attendance_rate: 95
                },
                {
                    student_id: 'student2',
                    attendance_rate: 75
                },
                {
                    student_id: 'student3',
                    attendance_rate: 92
                },
                {
                    student_id: 'student4',
                    attendance_rate: 70
                }
            ];
            const lowAttendanceStudents = students.filter((student)=>student.attendance_rate < attendanceThreshold);
            (0, _globals.expect)(lowAttendanceStudents).toHaveLength(2);
            (0, _globals.expect)(lowAttendanceStudents[0].student_id).toBe('student2');
            (0, _globals.expect)(lowAttendanceStudents[1].student_id).toBe('student4');
        });
        (0, _globals.it)('should calculate attendance patterns', ()=>{
            const weeklyAttendance = [
                {
                    week: 1,
                    attendance_rate: 90
                },
                {
                    week: 2,
                    attendance_rate: 88
                },
                {
                    week: 3,
                    attendance_rate: 92
                },
                {
                    week: 4,
                    attendance_rate: 87
                }
            ];
            const isImproving = weeklyAttendance.some((week, index)=>index > 0 && week.attendance_rate > weeklyAttendance[index - 1].attendance_rate);
            (0, _globals.expect)(isImproving).toBe(true);
        });
        (0, _globals.it)('should generate attendance insights', ()=>{
            const classId = 'test-class';
            const insights = analyticsService.generateInsights(classId);
            (0, _globals.expect)(insights).toBeDefined();
            (0, _globals.expect)(Array.isArray(insights)).toBe(true);
            (0, _globals.expect)(analyticsService.generateInsights).toHaveBeenCalledWith(classId);
        });
    });
    (0, _globals.describe)('Attendance Permissions', ()=>{
        (0, _globals.it)('should allow teachers to record attendance', ()=>{
            const userRole = 'teacher';
            const canRecord = [
                'teacher',
                'admin'
            ].includes(userRole);
            (0, _globals.expect)(canRecord).toBe(true);
        });
        (0, _globals.it)('should prevent students from recording attendance', ()=>{
            const userRole = 'student';
            const canRecord = [
                'teacher',
                'admin'
            ].includes(userRole);
            (0, _globals.expect)(canRecord).toBe(false);
        });
        (0, _globals.it)('should allow students to view their own attendance', ()=>{
            const userRole = 'student';
            const studentId = 'test-student';
            const attendanceStudentId = 'test-student';
            const canView = userRole === 'student' && studentId === attendanceStudentId;
            (0, _globals.expect)(canView).toBe(true);
        });
        (0, _globals.it)('should prevent students from viewing other students attendance', ()=>{
            const userRole = 'student';
            const studentId = 'test-student';
            const attendanceStudentId = 'other-student';
            const canView = userRole === 'student' && studentId === attendanceStudentId;
            (0, _globals.expect)(canView).toBe(false);
        });
        (0, _globals.it)('should allow parents to view their child attendance', ()=>{
            const userRole = 'parent';
            const childId = 'child-student-id';
            const attendanceStudentId = 'child-student-id';
            const canView = userRole === 'parent' && childId === attendanceStudentId;
            (0, _globals.expect)(canView).toBe(true);
        });
    });
    (0, _globals.describe)('Attendance Status Transitions', ()=>{
        (0, _globals.it)('should allow valid status changes', ()=>{
            const validTransitions = [
                {
                    from: _attendance.AttendanceStatus.PRESENT,
                    to: _attendance.AttendanceStatus.LATE
                },
                {
                    from: _attendance.AttendanceStatus.ABSENT,
                    to: _attendance.AttendanceStatus.EXCUSED
                },
                {
                    from: _attendance.AttendanceStatus.LATE,
                    to: _attendance.AttendanceStatus.PRESENT
                }
            ];
            validTransitions.forEach((transition)=>{
                const isValid = transition.from !== transition.to;
                (0, _globals.expect)(isValid).toBe(true);
            });
        });
        (0, _globals.it)('should track attendance changes', ()=>{
            const attendanceHistory = [
                {
                    status: _attendance.AttendanceStatus.ABSENT,
                    timestamp: '2025-01-01T08:00:00Z',
                    changed_by: 'system'
                },
                {
                    status: _attendance.AttendanceStatus.EXCUSED,
                    timestamp: '2025-01-01T10:00:00Z',
                    changed_by: 'teacher'
                }
            ];
            (0, _globals.expect)(attendanceHistory.length).toBe(2);
            (0, _globals.expect)(attendanceHistory[0].status).toBe(_attendance.AttendanceStatus.ABSENT);
            (0, _globals.expect)(attendanceHistory[1].status).toBe(_attendance.AttendanceStatus.EXCUSED);
        });
    });
});

//# sourceMappingURL=data:application/json;base64,