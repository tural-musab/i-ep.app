{"version":3,"sources":["/Users/turanmusabosman/Projects/i-ep.app/src/app/api/auth/[...nextauth]/route.ts"],"sourcesContent":["import NextAuth from 'next-auth';\nimport { AuthOptions } from 'next-auth';\nimport CredentialsProvider from 'next-auth/providers/credentials';\nimport GoogleProvider from 'next-auth/providers/google';\nimport { createServerSupabaseClient } from '@/lib/supabase/server';\nimport { User, UserRole } from '@/types/auth';\nimport { logAuditEvent } from '@/lib/audit';\n\nexport const authOptions: AuthOptions = {\n  providers: [\n    CredentialsProvider({\n      name: 'Credentials',\n      credentials: {\n        email: { label: 'Email', type: 'email' },\n        password: { label: 'Şifre', type: 'password' },\n        tenantId: { label: 'Tenant ID', type: 'text' },\n      },\n      async authorize(credentials) {\n        if (!credentials?.email || !credentials?.password || !credentials?.tenantId) {\n          return null;\n        }\n\n        try {\n          const supabase = createServerSupabaseClient();\n\n          const { data, error } = await supabase.auth.signInWithPassword({\n            email: credentials.email,\n            password: credentials.password,\n          });\n\n          if (error || !data.user) {\n            console.error('Giriş hatası:', error);\n            // Başarısız giriş denemesini logla\n            await logAuditEvent(\n              credentials.tenantId,\n              data?.user?.id || 'unknown',\n              'login_failed',\n              'auth',\n              data?.user?.id || 'unknown',\n              {},\n              {},\n              {\n                email: credentials.email,\n                error: error?.message || 'Unknown error',\n                ip: 'server-side', // Gerçek IP için middleware veya context kullanılabilir\n              }\n            ).catch((e) => console.error('Audit log hatası:', e));\n            return null;\n          }\n\n          // Kullanıcı bilgilerini veritabanından alma\n          const { data: userData, error: userError } = await supabase\n            .from('users')\n            .select('*')\n            .eq('auth_id', data.user.id)\n            .eq('tenant_id', credentials.tenantId)\n            .single();\n\n          if (userError || !userData) {\n            console.error('Kullanıcı bilgileri alınamadı:', userError);\n            await logAuditEvent(\n              credentials.tenantId,\n              data.user.id,\n              'login_failed',\n              'auth',\n              data.user.id,\n              {},\n              {},\n              {\n                email: credentials.email,\n                error: 'Tenant bilgisi bulunamadı veya eşleşmiyor',\n                ip: 'server-side',\n              }\n            ).catch((e) => console.error('Audit log hatası:', e));\n            return null;\n          }\n\n          // Kullanıcı aktif değilse giriş engellenir\n          if (!userData.is_active) {\n            console.log('Hesap pasif durumda');\n            await logAuditEvent(\n              credentials.tenantId,\n              userData.id,\n              'login_failed',\n              'auth',\n              userData.id,\n              {},\n              {},\n              {\n                email: credentials.email,\n                error: 'Hesap pasif durumda',\n                ip: 'server-side',\n              }\n            ).catch((e) => console.error('Audit log hatası:', e));\n            return null;\n          }\n\n          // Kullanıcı profil bilgisi\n          const profile = {\n            userId: userData.id,\n            fullName: `${userData.first_name} ${userData.last_name}`,\n            avatar: userData.avatar_url || undefined, // null değerini undefined ile değiştiriyoruz\n            bio: '',\n            phoneNumber: '',\n            department: undefined,\n            position: undefined,\n          };\n\n          // Next Auth için kullanıcı nesnesi oluştur\n          const user: User = {\n            id: userData.id,\n            email: userData.email,\n            role: userData.role as UserRole,\n            tenantId: userData.tenant_id,\n            isActive: userData.is_active,\n            allowedTenants: [], // Eksik alanı ekledik\n            emailVerified: data.user.email_confirmed_at\n              ? new Date(data.user.email_confirmed_at)\n              : undefined,\n            profile: profile,\n            createdAt: new Date(userData.created_at),\n            updatedAt: new Date(userData.updated_at),\n            lastLogin: userData.last_login_at ? new Date(userData.last_login_at) : undefined,\n          };\n\n          // Son giriş zamanını güncelle\n          await supabase\n            .from('users')\n            .update({ last_login_at: new Date().toISOString() })\n            .eq('id', userData.id);\n\n          // Başarılı girişi logla\n          await logAuditEvent(\n            userData.tenant_id,\n            userData.id,\n            'login_success',\n            'auth',\n            userData.id,\n            {},\n            {},\n            {\n              email: credentials.email,\n              role: userData.role,\n              ip: 'server-side',\n            }\n          ).catch((e) => console.error('Audit log hatası:', e));\n\n          return user;\n        } catch (error) {\n          console.error('Auth hatası:', error);\n          await logAuditEvent(\n            credentials.tenantId || 'unknown',\n            'unknown',\n            'login_error',\n            'auth',\n            'unknown',\n            {},\n            {},\n            {\n              email: credentials.email,\n              error: error instanceof Error ? error.message : 'Unknown error',\n              ip: 'server-side',\n            }\n          ).catch((e) => console.error('Audit log hatası:', e));\n          return null;\n        }\n      },\n    }),\n    GoogleProvider({\n      clientId: process.env.GOOGLE_CLIENT_ID || '',\n      clientSecret: process.env.GOOGLE_CLIENT_SECRET || '',\n      profile(profile) {\n        return {\n          id: profile.sub,\n          email: profile.email,\n          name: `${profile.given_name} ${profile.family_name}`,\n          image: profile.picture,\n          // Diğer Google profil alanları\n        };\n      },\n    }),\n  ],\n  callbacks: {\n    async jwt({ token, user }) {\n      // İlk giriş yapıldığında user bilgisini token'a ekle\n      if (user) {\n        token.user = user;\n      }\n      return token;\n    },\n    async session({ session, token }) {\n      // Token'daki user bilgisini session'a ekle\n      session.user = token.user as User;\n      return session;\n    },\n  },\n  session: {\n    strategy: 'jwt',\n    maxAge: 30 * 24 * 60 * 60, // 30 gün\n  },\n  pages: {\n    signIn: '/auth/giris',\n    signOut: '/auth/cikis',\n    error: '/auth/hata',\n  },\n  secret: process.env.NEXTAUTH_SECRET,\n  debug: process.env.NODE_ENV === 'development',\n};\n\nconst handler = NextAuth(authOptions);\n\nexport { handler as GET, handler as POST };\n"],"names":["GET","handler","POST","authOptions","providers","CredentialsProvider","name","credentials","email","label","type","password","tenantId","authorize","supabase","createServerSupabaseClient","data","error","auth","signInWithPassword","user","console","logAuditEvent","id","message","ip","catch","e","userData","userError","from","select","eq","single","is_active","log","profile","userId","fullName","first_name","last_name","avatar","avatar_url","undefined","bio","phoneNumber","department","position","role","tenant_id","isActive","allowedTenants","emailVerified","email_confirmed_at","Date","createdAt","created_at","updatedAt","updated_at","lastLogin","last_login_at","update","toISOString","Error","GoogleProvider","clientId","process","env","GOOGLE_CLIENT_ID","clientSecret","GOOGLE_CLIENT_SECRET","sub","given_name","family_name","image","picture","callbacks","jwt","token","session","strategy","maxAge","pages","signIn","signOut","secret","NEXTAUTH_SECRET","debug","NODE_ENV","NextAuth"],"mappings":"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"}