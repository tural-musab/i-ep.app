af231c7eb9f81c33830f3d7b35ba755c
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    GET: function() {
        return handler;
    },
    POST: function() {
        return handler;
    },
    authOptions: function() {
        return authOptions;
    }
});
const _nextauth = /*#__PURE__*/ _interop_require_default(require("next-auth"));
const _credentials = /*#__PURE__*/ _interop_require_default(require("next-auth/providers/credentials"));
const _google = /*#__PURE__*/ _interop_require_default(require("next-auth/providers/google"));
const _server = require("../../../../lib/supabase/server");
const _audit = require("../../../../lib/audit");
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
const authOptions = {
    providers: [
        (0, _credentials.default)({
            name: 'Credentials',
            credentials: {
                email: {
                    label: 'Email',
                    type: 'email'
                },
                password: {
                    label: 'Şifre',
                    type: 'password'
                },
                tenantId: {
                    label: 'Tenant ID',
                    type: 'text'
                }
            },
            async authorize (credentials) {
                if (!credentials?.email || !credentials?.password || !credentials?.tenantId) {
                    return null;
                }
                try {
                    const supabase = (0, _server.createServerSupabaseClient)();
                    const { data, error } = await supabase.auth.signInWithPassword({
                        email: credentials.email,
                        password: credentials.password
                    });
                    if (error || !data.user) {
                        console.error('Giriş hatası:', error);
                        // Başarısız giriş denemesini logla
                        await (0, _audit.logAuditEvent)(credentials.tenantId, data?.user?.id || 'unknown', 'login_failed', 'auth', data?.user?.id || 'unknown', {}, {}, {
                            email: credentials.email,
                            error: error?.message || 'Unknown error',
                            ip: 'server-side'
                        }).catch((e)=>console.error('Audit log hatası:', e));
                        return null;
                    }
                    // Kullanıcı bilgilerini veritabanından alma
                    const { data: userData, error: userError } = await supabase.from('users').select('*').eq('auth_id', data.user.id).eq('tenant_id', credentials.tenantId).single();
                    if (userError || !userData) {
                        console.error('Kullanıcı bilgileri alınamadı:', userError);
                        await (0, _audit.logAuditEvent)(credentials.tenantId, data.user.id, 'login_failed', 'auth', data.user.id, {}, {}, {
                            email: credentials.email,
                            error: 'Tenant bilgisi bulunamadı veya eşleşmiyor',
                            ip: 'server-side'
                        }).catch((e)=>console.error('Audit log hatası:', e));
                        return null;
                    }
                    // Kullanıcı aktif değilse giriş engellenir
                    if (!userData.is_active) {
                        console.log('Hesap pasif durumda');
                        await (0, _audit.logAuditEvent)(credentials.tenantId, userData.id, 'login_failed', 'auth', userData.id, {}, {}, {
                            email: credentials.email,
                            error: 'Hesap pasif durumda',
                            ip: 'server-side'
                        }).catch((e)=>console.error('Audit log hatası:', e));
                        return null;
                    }
                    // Kullanıcı profil bilgisi
                    const profile = {
                        userId: userData.id,
                        fullName: `${userData.first_name} ${userData.last_name}`,
                        avatar: userData.avatar_url || undefined,
                        bio: '',
                        phoneNumber: '',
                        department: undefined,
                        position: undefined
                    };
                    // Next Auth için kullanıcı nesnesi oluştur
                    const user = {
                        id: userData.id,
                        email: userData.email,
                        role: userData.role,
                        tenantId: userData.tenant_id,
                        isActive: userData.is_active,
                        allowedTenants: [],
                        emailVerified: data.user.email_confirmed_at ? new Date(data.user.email_confirmed_at) : undefined,
                        profile: profile,
                        createdAt: new Date(userData.created_at),
                        updatedAt: new Date(userData.updated_at),
                        lastLogin: userData.last_login_at ? new Date(userData.last_login_at) : undefined
                    };
                    // Son giriş zamanını güncelle
                    await supabase.from('users').update({
                        last_login_at: new Date().toISOString()
                    }).eq('id', userData.id);
                    // Başarılı girişi logla
                    await (0, _audit.logAuditEvent)(userData.tenant_id, userData.id, 'login_success', 'auth', userData.id, {}, {}, {
                        email: credentials.email,
                        role: userData.role,
                        ip: 'server-side'
                    }).catch((e)=>console.error('Audit log hatası:', e));
                    return user;
                } catch (error) {
                    console.error('Auth hatası:', error);
                    await (0, _audit.logAuditEvent)(credentials.tenantId || 'unknown', 'unknown', 'login_error', 'auth', 'unknown', {}, {}, {
                        email: credentials.email,
                        error: error instanceof Error ? error.message : 'Unknown error',
                        ip: 'server-side'
                    }).catch((e)=>console.error('Audit log hatası:', e));
                    return null;
                }
            }
        }),
        (0, _google.default)({
            clientId: process.env.GOOGLE_CLIENT_ID || '',
            clientSecret: process.env.GOOGLE_CLIENT_SECRET || '',
            profile (profile) {
                return {
                    id: profile.sub,
                    email: profile.email,
                    name: `${profile.given_name} ${profile.family_name}`,
                    image: profile.picture
                };
            }
        })
    ],
    callbacks: {
        async jwt ({ token, user }) {
            // İlk giriş yapıldığında user bilgisini token'a ekle
            if (user) {
                token.user = user;
            }
            return token;
        },
        async session ({ session, token }) {
            // Token'daki user bilgisini session'a ekle
            session.user = token.user;
            return session;
        }
    },
    session: {
        strategy: 'jwt',
        maxAge: 30 * 24 * 60 * 60
    },
    pages: {
        signIn: '/auth/giris',
        signOut: '/auth/cikis',
        error: '/auth/hata'
    },
    secret: process.env.NEXTAUTH_SECRET,
    debug: process.env.NODE_ENV === 'development'
};
const handler = (0, _nextauth.default)(authOptions);

//# sourceMappingURL=data:application/json;base64,