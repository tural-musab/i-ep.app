{"version":3,"sources":["/Users/turanmusabosman/Projects/i-ep.app/src/__tests__/integration/quarantine/security/service-role-permissions.test.ts"],"sourcesContent":["/**\n * Service Role Permissions Tests\n * Service role yetkilerinin kapsamlı testleri\n */\n\nimport { describe, it, expect, beforeEach, jest } from '@jest/globals';\nimport { supabaseAdmin } from '@/lib/supabase/admin';\n\n// Mock Supabase Admin client\njest.mock('@/lib/supabase/admin', () => ({\n  supabaseAdmin: {\n    auth: {\n      admin: {\n        inviteUserByEmail: jest.fn(),\n        deleteUser: jest.fn(),\n        listUsers: jest.fn(),\n      },\n    },\n    rpc: jest.fn(),\n    from: jest.fn(),\n  },\n}));\n\ndescribe('Service Role Permissions', () => {\n  beforeEach(() => {\n    jest.clearAllMocks();\n  });\n\n  describe('User Management Operations', () => {\n    it('should allow user creation with service role', async () => {\n      const mockInvite = jest.fn().mockResolvedValue({\n        data: { id: 'new-user-id' },\n        error: null,\n      });\n\n      supabaseAdmin.auth.admin.inviteUserByEmail = mockInvite;\n\n      const result = await supabaseAdmin.auth.admin.inviteUserByEmail('test@example.com', {\n        data: {\n          role: 'teacher',\n          tenant_id: 'test-tenant',\n        },\n      });\n\n      expect(result.error).toBeNull();\n      expect(result.data).toBeDefined();\n      expect(mockInvite).toHaveBeenCalledWith('test@example.com', expect.any(Object));\n    });\n\n    it('should allow user deletion with service role', async () => {\n      const mockDelete = jest.fn().mockResolvedValue({\n        data: { id: 'deleted-user-id' },\n        error: null,\n      });\n\n      supabaseAdmin.auth.admin.deleteUser = mockDelete;\n\n      const result = await supabaseAdmin.auth.admin.deleteUser('test-user-id');\n\n      expect(result.error).toBeNull();\n      expect(result.data).toBeDefined();\n      expect(mockDelete).toHaveBeenCalledWith('test-user-id');\n    });\n\n    it('should allow listing users with service role', async () => {\n      const mockList = jest.fn().mockResolvedValue({\n        data: [\n          { id: 'user-1', email: 'user1@example.com' },\n          { id: 'user-2', email: 'user2@example.com' },\n        ],\n        error: null,\n      });\n\n      supabaseAdmin.auth.admin.listUsers = mockList;\n\n      const result = await supabaseAdmin.auth.admin.listUsers();\n\n      expect(result.error).toBeNull();\n      expect(result.data).toHaveLength(2);\n      expect(mockList).toHaveBeenCalled();\n    });\n  });\n\n  describe('Database Operations', () => {\n    it('should allow bypassing RLS for data access', async () => {\n      const mockSelect = jest.fn().mockResolvedValue({\n        data: [{ id: 1, name: 'Test' }],\n        error: null,\n      });\n\n      supabaseAdmin.from = jest.fn().mockReturnValue({\n        select: mockSelect,\n      });\n\n      const result = await supabaseAdmin.from('users').select('*');\n\n      expect(result.error).toBeNull();\n      expect(result.data).toBeDefined();\n      expect(mockSelect).toHaveBeenCalled();\n    });\n\n    it('should allow executing RPC functions', async () => {\n      const mockRpc = jest.fn().mockResolvedValue({\n        data: { success: true },\n        error: null,\n      });\n\n      supabaseAdmin.rpc = mockRpc;\n\n      const result = await supabaseAdmin.rpc('test_function', {\n        arg1: 'value1',\n      });\n\n      expect(result.error).toBeNull();\n      expect(result.data).toBeDefined();\n      expect(mockRpc).toHaveBeenCalledWith('test_function', expect.any(Object));\n    });\n  });\n\n  describe('Error Handling', () => {\n    it('should handle user creation errors gracefully', async () => {\n      const mockError = new Error('User already exists');\n      const mockInvite = jest.fn().mockRejectedValue(mockError);\n\n      supabaseAdmin.auth.admin.inviteUserByEmail = mockInvite;\n\n      try {\n        await supabaseAdmin.auth.admin.inviteUserByEmail('existing@example.com', {\n          data: { role: 'teacher' },\n        });\n      } catch (error) {\n        expect(error).toBeDefined();\n        expect(error.message).toBe('User already exists');\n      }\n    });\n\n    it('should handle database operation errors gracefully', async () => {\n      const mockSelect = jest.fn().mockResolvedValue({\n        data: null,\n        error: { message: 'Database error' },\n      });\n\n      supabaseAdmin.from = jest.fn().mockReturnValue({\n        select: mockSelect,\n      });\n\n      const result = await supabaseAdmin.from('non_existent_table').select('*');\n\n      expect(result.error).toBeDefined();\n      expect(result.error.message).toBe('Database error');\n      expect(result.data).toBeNull();\n    });\n  });\n\n  describe('Security Boundaries', () => {\n    it('should respect tenant isolation even with service role', async () => {\n      const mockQueryBuilder = {\n        select: jest.fn().mockReturnThis(),\n        eq: jest.fn().mockResolvedValue({\n          data: [{ id: 1, tenant_id: 'test-tenant' }],\n          error: null,\n        }),\n      };\n\n      supabaseAdmin.from = jest.fn().mockReturnValue(mockQueryBuilder);\n\n      // Tenant ID ile sorgu\n      const validResult = await supabaseAdmin\n        .from('users')\n        .select('*')\n        .eq('tenant_id', 'test-tenant');\n\n      expect(validResult.error).toBeNull();\n      expect(validResult.data).toBeDefined();\n\n      // Tenant ID olmadan sorgu\n      mockQueryBuilder.eq.mockResolvedValueOnce({\n        data: null,\n        error: { message: 'Tenant ID required' },\n      });\n\n      const invalidResult = await supabaseAdmin.from('users').select('*').eq('tenant_id', null);\n\n      expect(invalidResult.error).toBeDefined();\n      expect(invalidResult.error.message).toBe('Tenant ID required');\n    });\n\n    it('should prevent unauthorized role escalation', async () => {\n      const mockQueryBuilder = {\n        update: jest.fn().mockReturnThis(),\n        eq: jest.fn().mockImplementation((field, value) => {\n          if (field === 'role' && value === 'super_admin') {\n            return Promise.resolve({\n              data: null,\n              error: { message: 'Unauthorized role escalation' },\n            });\n          }\n          return Promise.resolve({\n            data: { id: 1, role: value },\n            error: null,\n          });\n        }),\n      };\n\n      supabaseAdmin.from = jest.fn().mockReturnValue(mockQueryBuilder);\n\n      // Normal rol güncellemesi\n      const validResult = await supabaseAdmin.from('users').update({ role: 'teacher' }).eq('id', 1);\n\n      expect(validResult.error).toBeNull();\n      expect(validResult.data).toBeDefined();\n\n      // Yetkisiz rol yükseltme denemesi\n      mockQueryBuilder.eq.mockResolvedValueOnce({\n        data: null,\n        error: { message: 'Unauthorized role escalation' },\n      });\n\n      const invalidResult = await supabaseAdmin\n        .from('users')\n        .update({ role: 'super_admin' })\n        .eq('id', 1);\n\n      expect(invalidResult.error).toBeDefined();\n      expect(invalidResult.error.message).toBe('Unauthorized role escalation');\n    });\n  });\n});\n"],"names":["jest","mock","supabaseAdmin","auth","admin","inviteUserByEmail","fn","deleteUser","listUsers","rpc","from","describe","beforeEach","clearAllMocks","it","mockInvite","mockResolvedValue","data","id","error","result","role","tenant_id","expect","toBeNull","toBeDefined","toHaveBeenCalledWith","any","Object","mockDelete","mockList","email","toHaveLength","toHaveBeenCalled","mockSelect","name","mockReturnValue","select","mockRpc","success","arg1","mockError","Error","mockRejectedValue","message","toBe","mockQueryBuilder","mockReturnThis","eq","validResult","mockResolvedValueOnce","invalidResult","update","mockImplementation","field","value","Promise","resolve"],"mappings":"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"}