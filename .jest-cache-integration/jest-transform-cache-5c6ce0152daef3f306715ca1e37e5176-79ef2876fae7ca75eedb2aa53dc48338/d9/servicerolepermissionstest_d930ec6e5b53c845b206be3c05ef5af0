f347d6d599b76de9e545f45425595e31
/**
 * Service Role Permissions Tests
 * Service role yetkilerinin kapsamlı testleri
 */ "use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
const _globals = require("@jest/globals");
const _admin = require("../../../../lib/supabase/admin");
// Mock Supabase Admin client
_globals.jest.mock('@/lib/supabase/admin', ()=>({
        supabaseAdmin: {
            auth: {
                admin: {
                    inviteUserByEmail: _globals.jest.fn(),
                    deleteUser: _globals.jest.fn(),
                    listUsers: _globals.jest.fn()
                }
            },
            rpc: _globals.jest.fn(),
            from: _globals.jest.fn()
        }
    }));
(0, _globals.describe)('Service Role Permissions', ()=>{
    (0, _globals.beforeEach)(()=>{
        _globals.jest.clearAllMocks();
    });
    (0, _globals.describe)('User Management Operations', ()=>{
        (0, _globals.it)('should allow user creation with service role', async ()=>{
            const mockInvite = _globals.jest.fn().mockResolvedValue({
                data: {
                    id: 'new-user-id'
                },
                error: null
            });
            _admin.supabaseAdmin.auth.admin.inviteUserByEmail = mockInvite;
            const result = await _admin.supabaseAdmin.auth.admin.inviteUserByEmail('test@example.com', {
                data: {
                    role: 'teacher',
                    tenant_id: 'test-tenant'
                }
            });
            (0, _globals.expect)(result.error).toBeNull();
            (0, _globals.expect)(result.data).toBeDefined();
            (0, _globals.expect)(mockInvite).toHaveBeenCalledWith('test@example.com', _globals.expect.any(Object));
        });
        (0, _globals.it)('should allow user deletion with service role', async ()=>{
            const mockDelete = _globals.jest.fn().mockResolvedValue({
                data: {
                    id: 'deleted-user-id'
                },
                error: null
            });
            _admin.supabaseAdmin.auth.admin.deleteUser = mockDelete;
            const result = await _admin.supabaseAdmin.auth.admin.deleteUser('test-user-id');
            (0, _globals.expect)(result.error).toBeNull();
            (0, _globals.expect)(result.data).toBeDefined();
            (0, _globals.expect)(mockDelete).toHaveBeenCalledWith('test-user-id');
        });
        (0, _globals.it)('should allow listing users with service role', async ()=>{
            const mockList = _globals.jest.fn().mockResolvedValue({
                data: [
                    {
                        id: 'user-1',
                        email: 'user1@example.com'
                    },
                    {
                        id: 'user-2',
                        email: 'user2@example.com'
                    }
                ],
                error: null
            });
            _admin.supabaseAdmin.auth.admin.listUsers = mockList;
            const result = await _admin.supabaseAdmin.auth.admin.listUsers();
            (0, _globals.expect)(result.error).toBeNull();
            (0, _globals.expect)(result.data).toHaveLength(2);
            (0, _globals.expect)(mockList).toHaveBeenCalled();
        });
    });
    (0, _globals.describe)('Database Operations', ()=>{
        (0, _globals.it)('should allow bypassing RLS for data access', async ()=>{
            const mockSelect = _globals.jest.fn().mockResolvedValue({
                data: [
                    {
                        id: 1,
                        name: 'Test'
                    }
                ],
                error: null
            });
            _admin.supabaseAdmin.from = _globals.jest.fn().mockReturnValue({
                select: mockSelect
            });
            const result = await _admin.supabaseAdmin.from('users').select('*');
            (0, _globals.expect)(result.error).toBeNull();
            (0, _globals.expect)(result.data).toBeDefined();
            (0, _globals.expect)(mockSelect).toHaveBeenCalled();
        });
        (0, _globals.it)('should allow executing RPC functions', async ()=>{
            const mockRpc = _globals.jest.fn().mockResolvedValue({
                data: {
                    success: true
                },
                error: null
            });
            _admin.supabaseAdmin.rpc = mockRpc;
            const result = await _admin.supabaseAdmin.rpc('test_function', {
                arg1: 'value1'
            });
            (0, _globals.expect)(result.error).toBeNull();
            (0, _globals.expect)(result.data).toBeDefined();
            (0, _globals.expect)(mockRpc).toHaveBeenCalledWith('test_function', _globals.expect.any(Object));
        });
    });
    (0, _globals.describe)('Error Handling', ()=>{
        (0, _globals.it)('should handle user creation errors gracefully', async ()=>{
            const mockError = new Error('User already exists');
            const mockInvite = _globals.jest.fn().mockRejectedValue(mockError);
            _admin.supabaseAdmin.auth.admin.inviteUserByEmail = mockInvite;
            try {
                await _admin.supabaseAdmin.auth.admin.inviteUserByEmail('existing@example.com', {
                    data: {
                        role: 'teacher'
                    }
                });
            } catch (error) {
                (0, _globals.expect)(error).toBeDefined();
                (0, _globals.expect)(error.message).toBe('User already exists');
            }
        });
        (0, _globals.it)('should handle database operation errors gracefully', async ()=>{
            const mockSelect = _globals.jest.fn().mockResolvedValue({
                data: null,
                error: {
                    message: 'Database error'
                }
            });
            _admin.supabaseAdmin.from = _globals.jest.fn().mockReturnValue({
                select: mockSelect
            });
            const result = await _admin.supabaseAdmin.from('non_existent_table').select('*');
            (0, _globals.expect)(result.error).toBeDefined();
            (0, _globals.expect)(result.error.message).toBe('Database error');
            (0, _globals.expect)(result.data).toBeNull();
        });
    });
    (0, _globals.describe)('Security Boundaries', ()=>{
        (0, _globals.it)('should respect tenant isolation even with service role', async ()=>{
            const mockQueryBuilder = {
                select: _globals.jest.fn().mockReturnThis(),
                eq: _globals.jest.fn().mockResolvedValue({
                    data: [
                        {
                            id: 1,
                            tenant_id: 'test-tenant'
                        }
                    ],
                    error: null
                })
            };
            _admin.supabaseAdmin.from = _globals.jest.fn().mockReturnValue(mockQueryBuilder);
            // Tenant ID ile sorgu
            const validResult = await _admin.supabaseAdmin.from('users').select('*').eq('tenant_id', 'test-tenant');
            (0, _globals.expect)(validResult.error).toBeNull();
            (0, _globals.expect)(validResult.data).toBeDefined();
            // Tenant ID olmadan sorgu
            mockQueryBuilder.eq.mockResolvedValueOnce({
                data: null,
                error: {
                    message: 'Tenant ID required'
                }
            });
            const invalidResult = await _admin.supabaseAdmin.from('users').select('*').eq('tenant_id', null);
            (0, _globals.expect)(invalidResult.error).toBeDefined();
            (0, _globals.expect)(invalidResult.error.message).toBe('Tenant ID required');
        });
        (0, _globals.it)('should prevent unauthorized role escalation', async ()=>{
            const mockQueryBuilder = {
                update: _globals.jest.fn().mockReturnThis(),
                eq: _globals.jest.fn().mockImplementation((field, value)=>{
                    if (field === 'role' && value === 'super_admin') {
                        return Promise.resolve({
                            data: null,
                            error: {
                                message: 'Unauthorized role escalation'
                            }
                        });
                    }
                    return Promise.resolve({
                        data: {
                            id: 1,
                            role: value
                        },
                        error: null
                    });
                })
            };
            _admin.supabaseAdmin.from = _globals.jest.fn().mockReturnValue(mockQueryBuilder);
            // Normal rol güncellemesi
            const validResult = await _admin.supabaseAdmin.from('users').update({
                role: 'teacher'
            }).eq('id', 1);
            (0, _globals.expect)(validResult.error).toBeNull();
            (0, _globals.expect)(validResult.data).toBeDefined();
            // Yetkisiz rol yükseltme denemesi
            mockQueryBuilder.eq.mockResolvedValueOnce({
                data: null,
                error: {
                    message: 'Unauthorized role escalation'
                }
            });
            const invalidResult = await _admin.supabaseAdmin.from('users').update({
                role: 'super_admin'
            }).eq('id', 1);
            (0, _globals.expect)(invalidResult.error).toBeDefined();
            (0, _globals.expect)(invalidResult.error.message).toBe('Unauthorized role escalation');
        });
    });
});

//# sourceMappingURL=data:application/json;base64,