{"version":3,"sources":["/Users/turanmusabosman/Projects/i-ep.app/src/__tests__/integration/quarantine/supabase-auth-jest.test.ts"],"sourcesContent":["import { describe, it, expect, beforeEach, afterEach, beforeAll } from '@jest/globals';\nimport { createClientComponentClient } from '@supabase/auth-helpers-nextjs';\n\n// Supabase client'ı mock'la\njest.mock('@supabase/auth-helpers-nextjs', () => ({\n  createClientComponentClient: jest.fn(),\n}));\n\n// Test utilities\nconst generateRandomEmail = () => `test-${Math.random().toString(36).substr(2, 9)}@example.com`;\nconst generateRandomTenantId = () => `tenant-${Math.random().toString(36).substr(2, 9)}`;\n\ndescribe('Supabase Auth Integration Tests (Jest Mocked)', () => {\n  let mockSupabaseClient: {\n    auth: {\n      signInWithPassword: jest.Mock;\n      signUp: jest.Mock;\n      signOut: jest.Mock;\n      resetPasswordForEmail: jest.Mock;\n      getSession: jest.Mock;\n      onAuthStateChange: jest.Mock;\n    };\n    from: jest.Mock;\n  };\n\n  beforeAll(() => {\n    // Test ortamı değişkenlerini ayarla\n    process.env.NEXT_PUBLIC_SUPABASE_URL = 'https://test.supabase.co';\n    process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY = 'test-anon-key';\n    process.env.SUPABASE_SERVICE_ROLE_KEY = 'test-service-role-key';\n  });\n\n  beforeEach(() => {\n    // Mock Supabase client oluştur\n    mockSupabaseClient = {\n      auth: {\n        signInWithPassword: jest.fn(),\n        signUp: jest.fn(),\n        signOut: jest.fn(),\n        resetPasswordForEmail: jest.fn(),\n        getSession: jest.fn(),\n        onAuthStateChange: jest.fn(() => ({\n          data: { subscription: { unsubscribe: jest.fn() } },\n        })),\n      },\n      from: jest.fn(() => ({\n        select: jest.fn(() => ({\n          eq: jest.fn(() => ({\n            single: jest.fn(),\n          })),\n        })),\n      })),\n    };\n\n    (createClientComponentClient as jest.Mock).mockReturnValue(mockSupabaseClient);\n  });\n\n  afterEach(() => {\n    jest.clearAllMocks();\n  });\n\n  describe('User Sign In Tests', () => {\n    it('should successfully sign in a user with valid credentials', async () => {\n      // Arrange\n      const email = 'test@example.com';\n      const password = 'validPassword123';\n      const tenantId = 'tenant-123';\n\n      const expectedResponse = {\n        data: {\n          user: {\n            id: '550e8400-e29b-41d4-a716-446655440000',\n            email: email,\n            email_confirmed_at: '2024-01-15T10:30:00.000Z',\n            user_metadata: {\n              tenant_id: tenantId,\n              role: 'admin',\n            },\n          },\n          session: {\n            access_token: 'test-access-token',\n            refresh_token: 'test-refresh-token',\n            expires_at: 1705314600,\n            expires_in: 3600,\n          },\n        },\n        error: null,\n      };\n\n      mockSupabaseClient.auth.signInWithPassword.mockResolvedValue(expectedResponse);\n\n      // Act\n      const result = await mockSupabaseClient.auth.signInWithPassword({\n        email,\n        password,\n      });\n\n      // Assert\n      expect(result.data.user).toBeDefined();\n      expect(result.data.user.email).toBe(email);\n      expect(result.data.user.user_metadata.tenant_id).toBe(tenantId);\n      expect(result.data.session).toBeDefined();\n      expect(result.data.session.access_token).toBe('test-access-token');\n      expect(result.error).toBeNull();\n\n      expect(mockSupabaseClient.auth.signInWithPassword).toHaveBeenCalledWith({\n        email,\n        password,\n      });\n      expect(mockSupabaseClient.auth.signInWithPassword).toHaveBeenCalledTimes(1);\n    });\n\n    it('should fail to sign in with invalid credentials', async () => {\n      // Arrange\n      const email = 'test@example.com';\n      const wrongPassword = 'wrongPassword';\n\n      const expectedResponse = {\n        data: { user: null, session: null },\n        error: {\n          name: 'AuthApiError',\n          message: 'Invalid login credentials',\n          status: 400,\n        },\n      };\n\n      mockSupabaseClient.auth.signInWithPassword.mockResolvedValue(expectedResponse);\n\n      // Act\n      const result = await mockSupabaseClient.auth.signInWithPassword({\n        email,\n        password: wrongPassword,\n      });\n\n      // Assert\n      expect(result.data.user).toBeNull();\n      expect(result.data.session).toBeNull();\n      expect(result.error).toBeDefined();\n      expect(result.error.message).toBe('Invalid login credentials');\n      expect(result.error.status).toBe(400);\n    });\n\n    it('should handle tenant-specific user sign in with profile lookup', async () => {\n      // Arrange\n      const email = 'tenant-user@example.com';\n      const password = 'tenantPassword123';\n      const tenantId = 'tenant-456';\n      const userId = '660e8400-e29b-41d4-a716-446655440001';\n\n      // Auth response mock\n      const authResponse = {\n        data: {\n          user: {\n            id: userId,\n            email: email,\n            user_metadata: {\n              tenant_id: tenantId,\n              role: 'teacher',\n            },\n          },\n          session: {\n            access_token: 'tenant-access-token',\n            refresh_token: 'tenant-refresh-token',\n          },\n        },\n        error: null,\n      };\n\n      // User profile response mock\n      const profileResponse = {\n        data: {\n          id: userId,\n          email: email,\n          role: 'teacher',\n          tenant_id: tenantId,\n          is_active: true,\n          first_name: 'Test',\n          last_name: 'Teacher',\n          created_at: '2024-01-15T10:30:00.000Z',\n          updated_at: '2024-01-15T10:30:00.000Z',\n        },\n        error: null,\n      };\n\n      mockSupabaseClient.auth.signInWithPassword.mockResolvedValue(authResponse);\n\n      // Chain mock for user profile query\n      mockSupabaseClient.from.mockReturnValue({\n        select: jest.fn().mockReturnValue({\n          eq: jest.fn().mockReturnValue({\n            single: jest.fn().mockResolvedValue(profileResponse),\n          }),\n        }),\n      });\n\n      // Act\n      const authResult = await mockSupabaseClient.auth.signInWithPassword({\n        email,\n        password,\n      });\n\n      // Kullanıcı profil bilgilerini al\n      const profileResult = await mockSupabaseClient\n        .from('users')\n        .select('*')\n        .eq('auth_id', authResult.data.user.id)\n        .single();\n\n      // Assert\n      expect(authResult.data.user.user_metadata.tenant_id).toBe(tenantId);\n      expect(authResult.data.user.user_metadata.role).toBe('teacher');\n\n      expect(profileResult.data.tenant_id).toBe(tenantId);\n      expect(profileResult.data.role).toBe('teacher');\n      expect(profileResult.data.is_active).toBe(true);\n      expect(profileResult.data.email).toBe(email);\n\n      // Mock calls verification\n      expect(mockSupabaseClient.from).toHaveBeenCalledWith('users');\n    });\n  });\n\n  describe('User Sign Up Tests', () => {\n    it('should successfully sign up a new user', async () => {\n      // Arrange\n      const email = generateRandomEmail();\n      const password = 'newUserPassword123';\n      const tenantId = generateRandomTenantId();\n      const userMetadata = {\n        tenant_id: tenantId,\n        role: 'student',\n        name: 'Yeni Kullanıcı',\n      };\n\n      const expectedResponse = {\n        data: {\n          user: {\n            id: '770e8400-e29b-41d4-a716-446655440002',\n            email: email,\n            email_confirmed_at: null, // E-posta onayı beklendiği için\n            user_metadata: userMetadata,\n          },\n          session: null, // E-posta onayı beklendiği için\n        },\n        error: null,\n      };\n\n      mockSupabaseClient.auth.signUp.mockResolvedValue(expectedResponse);\n\n      // Act\n      const result = await mockSupabaseClient.auth.signUp({\n        email,\n        password,\n        options: {\n          data: userMetadata,\n        },\n      });\n\n      // Assert\n      expect(result.data.user).toBeDefined();\n      expect(result.data.user.email).toBe(email);\n      expect(result.data.user.user_metadata.tenant_id).toBe(tenantId);\n      expect(result.data.user.user_metadata.role).toBe('student');\n      expect(result.data.user.email_confirmed_at).toBeNull();\n      expect(result.data.session).toBeNull(); // E-posta onayı bekleniyor\n      expect(result.error).toBeNull();\n\n      expect(mockSupabaseClient.auth.signUp).toHaveBeenCalledWith({\n        email,\n        password,\n        options: {\n          data: userMetadata,\n        },\n      });\n    });\n\n    it('should fail to sign up with an existing email', async () => {\n      // Arrange\n      const existingEmail = 'existing@example.com';\n      const password = 'somePassword123';\n\n      const expectedResponse = {\n        data: { user: null, session: null },\n        error: {\n          name: 'AuthApiError',\n          message: 'User already registered',\n          status: 422,\n        },\n      };\n\n      mockSupabaseClient.auth.signUp.mockResolvedValue(expectedResponse);\n\n      // Act\n      const result = await mockSupabaseClient.auth.signUp({\n        email: existingEmail,\n        password,\n      });\n\n      // Assert\n      expect(result.data.user).toBeNull();\n      expect(result.data.session).toBeNull();\n      expect(result.error).toBeDefined();\n      expect(result.error.message).toBe('User already registered');\n      expect(result.error.status).toBe(422);\n    });\n\n    it('should handle weak password during sign up', async () => {\n      // Arrange\n      const email = 'newuser@example.com';\n      const weakPassword = '123'; // Çok zayıf şifre\n\n      const expectedResponse = {\n        data: { user: null, session: null },\n        error: {\n          name: 'AuthApiError',\n          message: 'Password should be at least 6 characters',\n          status: 422,\n        },\n      };\n\n      mockSupabaseClient.auth.signUp.mockResolvedValue(expectedResponse);\n\n      // Act\n      const result = await mockSupabaseClient.auth.signUp({\n        email,\n        password: weakPassword,\n      });\n\n      // Assert\n      expect(result.data.user).toBeNull();\n      expect(result.error).toBeDefined();\n      expect(result.error.message).toContain('Password should be at least');\n      expect(result.error.status).toBe(422);\n    });\n  });\n\n  describe('Session Management Tests', () => {\n    it('should retrieve existing user session', async () => {\n      // Arrange\n      const mockSession = {\n        access_token: 'existing-access-token',\n        refresh_token: 'existing-refresh-token',\n        expires_at: 1705314600,\n        user: {\n          id: '550e8400-e29b-41d4-a716-446655440000',\n          email: 'session-user@example.com',\n          user_metadata: {\n            tenant_id: 'tenant-789',\n            role: 'admin',\n          },\n        },\n      };\n\n      const expectedResponse = {\n        data: { session: mockSession },\n        error: null,\n      };\n\n      mockSupabaseClient.auth.getSession.mockResolvedValue(expectedResponse);\n\n      // Act\n      const result = await mockSupabaseClient.auth.getSession();\n\n      // Assert\n      expect(result.data.session).toBeDefined();\n      expect(result.data.session.user.email).toBe('session-user@example.com');\n      expect(result.data.session.user.user_metadata.tenant_id).toBe('tenant-789');\n      expect(result.data.session.access_token).toBe('existing-access-token');\n      expect(result.error).toBeNull();\n    });\n\n    it('should handle no existing session', async () => {\n      // Arrange\n      const expectedResponse = {\n        data: { session: null },\n        error: null,\n      };\n\n      mockSupabaseClient.auth.getSession.mockResolvedValue(expectedResponse);\n\n      // Act\n      const result = await mockSupabaseClient.auth.getSession();\n\n      // Assert\n      expect(result.data.session).toBeNull();\n      expect(result.error).toBeNull();\n    });\n\n    it('should successfully sign out user', async () => {\n      // Arrange\n      const expectedResponse = {\n        error: null,\n      };\n\n      mockSupabaseClient.auth.signOut.mockResolvedValue(expectedResponse);\n\n      // Act\n      const result = await mockSupabaseClient.auth.signOut();\n\n      // Assert\n      expect(result.error).toBeNull();\n      expect(mockSupabaseClient.auth.signOut).toHaveBeenCalledTimes(1);\n    });\n  });\n\n  describe('Password Reset Tests', () => {\n    it('should successfully send password reset email', async () => {\n      // Arrange\n      const email = 'user@example.com';\n\n      const expectedResponse = {\n        data: {},\n        error: null,\n      };\n\n      mockSupabaseClient.auth.resetPasswordForEmail.mockResolvedValue(expectedResponse);\n\n      // Act\n      const result = await mockSupabaseClient.auth.resetPasswordForEmail(email);\n\n      // Assert\n      expect(result.error).toBeNull();\n      expect(mockSupabaseClient.auth.resetPasswordForEmail).toHaveBeenCalledWith(email);\n      expect(mockSupabaseClient.auth.resetPasswordForEmail).toHaveBeenCalledTimes(1);\n    });\n\n    it('should handle password reset for non-existent email', async () => {\n      // Arrange\n      const nonExistentEmail = 'nonexistent@example.com';\n\n      const expectedResponse = {\n        data: {},\n        error: {\n          name: 'AuthApiError',\n          message: 'User not found',\n          status: 400,\n        },\n      };\n\n      mockSupabaseClient.auth.resetPasswordForEmail.mockResolvedValue(expectedResponse);\n\n      // Act\n      const result = await mockSupabaseClient.auth.resetPasswordForEmail(nonExistentEmail);\n\n      // Assert\n      expect(result.error).toBeDefined();\n      expect(result.error.message).toBe('User not found');\n      expect(result.error.status).toBe(400);\n    });\n  });\n\n  describe('Multi-Tenant Auth Integration', () => {\n    it('should validate user belongs to correct tenant during auth', async () => {\n      // Arrange\n      const email = 'multitenant-user@example.com';\n      const password = 'password123';\n      const actualTenantId = 'tenant-456';\n      const expectedTenantId = 'tenant-123';\n\n      const authResponse = {\n        data: {\n          user: {\n            id: '880e8400-e29b-41d4-a716-446655440003',\n            email: email,\n            user_metadata: {\n              tenant_id: actualTenantId, // Farklı tenant\n              role: 'user',\n            },\n          },\n          session: { access_token: 'token' },\n        },\n        error: null,\n      };\n\n      mockSupabaseClient.auth.signInWithPassword.mockResolvedValue(authResponse);\n\n      // Act\n      const result = await mockSupabaseClient.auth.signInWithPassword({\n        email,\n        password,\n      });\n\n      // Assert - Kullanıcı farklı tenant'ta\n      expect(result.data.user.user_metadata.tenant_id).not.toBe(expectedTenantId);\n      expect(result.data.user.user_metadata.tenant_id).toBe(actualTenantId);\n\n      // Bu durumda uygulama mantığında tenant kontrolü yapılması gerekir\n      // Test, gerçek senaryoda tenant mismatch durumunu simüle ediyor\n    });\n\n    it('should handle auth state changes for tenant-specific users', async () => {\n      // Arrange\n      const mockCallback = jest.fn();\n      const mockUnsubscribe = jest.fn();\n\n      mockSupabaseClient.auth.onAuthStateChange.mockReturnValue({\n        data: {\n          subscription: {\n            unsubscribe: mockUnsubscribe,\n          },\n        },\n      });\n\n      // Act\n      const { data } = mockSupabaseClient.auth.onAuthStateChange(mockCallback);\n\n      // Assert\n      expect(mockSupabaseClient.auth.onAuthStateChange).toHaveBeenCalledWith(mockCallback);\n      expect(data.subscription.unsubscribe).toBe(mockUnsubscribe);\n    });\n  });\n\n  describe('Error Handling and Resilience', () => {\n    it('should handle network timeouts gracefully', async () => {\n      // Arrange\n      mockSupabaseClient.auth.signInWithPassword.mockRejectedValue(new Error('Network timeout'));\n\n      // Act & Assert\n      await expect(\n        mockSupabaseClient.auth.signInWithPassword({\n          email: 'test@example.com',\n          password: 'password',\n        })\n      ).rejects.toThrow('Network timeout');\n    });\n\n    it('should handle auth service unavailable', async () => {\n      // Arrange\n      const expectedResponse = {\n        data: { user: null, session: null },\n        error: {\n          name: 'AuthApiError',\n          message: 'Service temporarily unavailable',\n          status: 503,\n        },\n      };\n\n      mockSupabaseClient.auth.signInWithPassword.mockResolvedValue(expectedResponse);\n\n      // Act\n      const result = await mockSupabaseClient.auth.signInWithPassword({\n        email: 'test@example.com',\n        password: 'password',\n      });\n\n      // Assert\n      expect(result.error).toBeDefined();\n      expect(result.error.message).toBe('Service temporarily unavailable');\n      expect(result.error.status).toBe(503);\n    });\n\n    it('should handle malformed auth responses', async () => {\n      // Arrange - Malformed response\n      const malformedResponse = {\n        data: { user: undefined, session: undefined },\n        error: null,\n      };\n\n      mockSupabaseClient.auth.signInWithPassword.mockResolvedValue(malformedResponse);\n\n      // Act\n      const result = await mockSupabaseClient.auth.signInWithPassword({\n        email: 'test@example.com',\n        password: 'password',\n      });\n\n      // Assert\n      expect(result.data.user).toBeUndefined();\n      expect(result.data.session).toBeUndefined();\n      // Gerçek uygulamada bu durumu handle etmek önemli\n    });\n  });\n\n  describe('Mock Integration Verification', () => {\n    it('should verify all auth methods are properly mocked', () => {\n      // Assert - Tüm auth metodları mock'lanmış olmalı\n      expect(mockSupabaseClient.auth.signInWithPassword).toBeDefined();\n      expect(mockSupabaseClient.auth.signUp).toBeDefined();\n      expect(mockSupabaseClient.auth.signOut).toBeDefined();\n      expect(mockSupabaseClient.auth.resetPasswordForEmail).toBeDefined();\n      expect(mockSupabaseClient.auth.getSession).toBeDefined();\n      expect(mockSupabaseClient.auth.onAuthStateChange).toBeDefined();\n\n      expect(jest.isMockFunction(mockSupabaseClient.auth.signInWithPassword)).toBe(true);\n      expect(jest.isMockFunction(mockSupabaseClient.auth.signUp)).toBe(true);\n      expect(jest.isMockFunction(mockSupabaseClient.auth.signOut)).toBe(true);\n    });\n\n    it('should verify database query methods are mocked', () => {\n      // Assert - Database query metodları mock'lanmış olmalı\n      expect(mockSupabaseClient.from).toBeDefined();\n      expect(jest.isMockFunction(mockSupabaseClient.from)).toBe(true);\n    });\n  });\n});\n"],"names":["jest","mock","createClientComponentClient","fn","generateRandomEmail","Math","random","toString","substr","generateRandomTenantId","describe","mockSupabaseClient","beforeAll","process","env","NEXT_PUBLIC_SUPABASE_URL","NEXT_PUBLIC_SUPABASE_ANON_KEY","SUPABASE_SERVICE_ROLE_KEY","beforeEach","auth","signInWithPassword","signUp","signOut","resetPasswordForEmail","getSession","onAuthStateChange","data","subscription","unsubscribe","from","select","eq","single","mockReturnValue","afterEach","clearAllMocks","it","email","password","tenantId","expectedResponse","user","id","email_confirmed_at","user_metadata","tenant_id","role","session","access_token","refresh_token","expires_at","expires_in","error","mockResolvedValue","result","expect","toBeDefined","toBe","toBeNull","toHaveBeenCalledWith","toHaveBeenCalledTimes","wrongPassword","name","message","status","userId","authResponse","profileResponse","is_active","first_name","last_name","created_at","updated_at","authResult","profileResult","userMetadata","options","existingEmail","weakPassword","toContain","mockSession","nonExistentEmail","actualTenantId","expectedTenantId","not","mockCallback","mockUnsubscribe","mockRejectedValue","Error","rejects","toThrow","malformedResponse","undefined","toBeUndefined","isMockFunction"],"mappings":"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"}