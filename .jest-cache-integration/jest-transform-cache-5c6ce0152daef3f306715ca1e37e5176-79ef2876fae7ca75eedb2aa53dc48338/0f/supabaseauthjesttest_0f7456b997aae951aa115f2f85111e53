fb11fef9e625d585ad13b3889e534402
"use strict";
// Supabase client'ı mock'la
jest.mock('@supabase/auth-helpers-nextjs', ()=>({
        createClientComponentClient: jest.fn()
    }));
Object.defineProperty(exports, "__esModule", {
    value: true
});
const _globals = require("@jest/globals");
const _authhelpersnextjs = require("@supabase/auth-helpers-nextjs");
// Test utilities
const generateRandomEmail = ()=>`test-${Math.random().toString(36).substr(2, 9)}@example.com`;
const generateRandomTenantId = ()=>`tenant-${Math.random().toString(36).substr(2, 9)}`;
(0, _globals.describe)('Supabase Auth Integration Tests (Jest Mocked)', ()=>{
    let mockSupabaseClient;
    (0, _globals.beforeAll)(()=>{
        // Test ortamı değişkenlerini ayarla
        process.env.NEXT_PUBLIC_SUPABASE_URL = 'https://test.supabase.co';
        process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY = 'test-anon-key';
        process.env.SUPABASE_SERVICE_ROLE_KEY = 'test-service-role-key';
    });
    (0, _globals.beforeEach)(()=>{
        // Mock Supabase client oluştur
        mockSupabaseClient = {
            auth: {
                signInWithPassword: jest.fn(),
                signUp: jest.fn(),
                signOut: jest.fn(),
                resetPasswordForEmail: jest.fn(),
                getSession: jest.fn(),
                onAuthStateChange: jest.fn(()=>({
                        data: {
                            subscription: {
                                unsubscribe: jest.fn()
                            }
                        }
                    }))
            },
            from: jest.fn(()=>({
                    select: jest.fn(()=>({
                            eq: jest.fn(()=>({
                                    single: jest.fn()
                                }))
                        }))
                }))
        };
        _authhelpersnextjs.createClientComponentClient.mockReturnValue(mockSupabaseClient);
    });
    (0, _globals.afterEach)(()=>{
        jest.clearAllMocks();
    });
    (0, _globals.describe)('User Sign In Tests', ()=>{
        (0, _globals.it)('should successfully sign in a user with valid credentials', async ()=>{
            // Arrange
            const email = 'test@example.com';
            const password = 'validPassword123';
            const tenantId = 'tenant-123';
            const expectedResponse = {
                data: {
                    user: {
                        id: '550e8400-e29b-41d4-a716-446655440000',
                        email: email,
                        email_confirmed_at: '2024-01-15T10:30:00.000Z',
                        user_metadata: {
                            tenant_id: tenantId,
                            role: 'admin'
                        }
                    },
                    session: {
                        access_token: 'test-access-token',
                        refresh_token: 'test-refresh-token',
                        expires_at: 1705314600,
                        expires_in: 3600
                    }
                },
                error: null
            };
            mockSupabaseClient.auth.signInWithPassword.mockResolvedValue(expectedResponse);
            // Act
            const result = await mockSupabaseClient.auth.signInWithPassword({
                email,
                password
            });
            // Assert
            (0, _globals.expect)(result.data.user).toBeDefined();
            (0, _globals.expect)(result.data.user.email).toBe(email);
            (0, _globals.expect)(result.data.user.user_metadata.tenant_id).toBe(tenantId);
            (0, _globals.expect)(result.data.session).toBeDefined();
            (0, _globals.expect)(result.data.session.access_token).toBe('test-access-token');
            (0, _globals.expect)(result.error).toBeNull();
            (0, _globals.expect)(mockSupabaseClient.auth.signInWithPassword).toHaveBeenCalledWith({
                email,
                password
            });
            (0, _globals.expect)(mockSupabaseClient.auth.signInWithPassword).toHaveBeenCalledTimes(1);
        });
        (0, _globals.it)('should fail to sign in with invalid credentials', async ()=>{
            // Arrange
            const email = 'test@example.com';
            const wrongPassword = 'wrongPassword';
            const expectedResponse = {
                data: {
                    user: null,
                    session: null
                },
                error: {
                    name: 'AuthApiError',
                    message: 'Invalid login credentials',
                    status: 400
                }
            };
            mockSupabaseClient.auth.signInWithPassword.mockResolvedValue(expectedResponse);
            // Act
            const result = await mockSupabaseClient.auth.signInWithPassword({
                email,
                password: wrongPassword
            });
            // Assert
            (0, _globals.expect)(result.data.user).toBeNull();
            (0, _globals.expect)(result.data.session).toBeNull();
            (0, _globals.expect)(result.error).toBeDefined();
            (0, _globals.expect)(result.error.message).toBe('Invalid login credentials');
            (0, _globals.expect)(result.error.status).toBe(400);
        });
        (0, _globals.it)('should handle tenant-specific user sign in with profile lookup', async ()=>{
            // Arrange
            const email = 'tenant-user@example.com';
            const password = 'tenantPassword123';
            const tenantId = 'tenant-456';
            const userId = '660e8400-e29b-41d4-a716-446655440001';
            // Auth response mock
            const authResponse = {
                data: {
                    user: {
                        id: userId,
                        email: email,
                        user_metadata: {
                            tenant_id: tenantId,
                            role: 'teacher'
                        }
                    },
                    session: {
                        access_token: 'tenant-access-token',
                        refresh_token: 'tenant-refresh-token'
                    }
                },
                error: null
            };
            // User profile response mock
            const profileResponse = {
                data: {
                    id: userId,
                    email: email,
                    role: 'teacher',
                    tenant_id: tenantId,
                    is_active: true,
                    first_name: 'Test',
                    last_name: 'Teacher',
                    created_at: '2024-01-15T10:30:00.000Z',
                    updated_at: '2024-01-15T10:30:00.000Z'
                },
                error: null
            };
            mockSupabaseClient.auth.signInWithPassword.mockResolvedValue(authResponse);
            // Chain mock for user profile query
            mockSupabaseClient.from.mockReturnValue({
                select: jest.fn().mockReturnValue({
                    eq: jest.fn().mockReturnValue({
                        single: jest.fn().mockResolvedValue(profileResponse)
                    })
                })
            });
            // Act
            const authResult = await mockSupabaseClient.auth.signInWithPassword({
                email,
                password
            });
            // Kullanıcı profil bilgilerini al
            const profileResult = await mockSupabaseClient.from('users').select('*').eq('auth_id', authResult.data.user.id).single();
            // Assert
            (0, _globals.expect)(authResult.data.user.user_metadata.tenant_id).toBe(tenantId);
            (0, _globals.expect)(authResult.data.user.user_metadata.role).toBe('teacher');
            (0, _globals.expect)(profileResult.data.tenant_id).toBe(tenantId);
            (0, _globals.expect)(profileResult.data.role).toBe('teacher');
            (0, _globals.expect)(profileResult.data.is_active).toBe(true);
            (0, _globals.expect)(profileResult.data.email).toBe(email);
            // Mock calls verification
            (0, _globals.expect)(mockSupabaseClient.from).toHaveBeenCalledWith('users');
        });
    });
    (0, _globals.describe)('User Sign Up Tests', ()=>{
        (0, _globals.it)('should successfully sign up a new user', async ()=>{
            // Arrange
            const email = generateRandomEmail();
            const password = 'newUserPassword123';
            const tenantId = generateRandomTenantId();
            const userMetadata = {
                tenant_id: tenantId,
                role: 'student',
                name: 'Yeni Kullanıcı'
            };
            const expectedResponse = {
                data: {
                    user: {
                        id: '770e8400-e29b-41d4-a716-446655440002',
                        email: email,
                        email_confirmed_at: null,
                        user_metadata: userMetadata
                    },
                    session: null
                },
                error: null
            };
            mockSupabaseClient.auth.signUp.mockResolvedValue(expectedResponse);
            // Act
            const result = await mockSupabaseClient.auth.signUp({
                email,
                password,
                options: {
                    data: userMetadata
                }
            });
            // Assert
            (0, _globals.expect)(result.data.user).toBeDefined();
            (0, _globals.expect)(result.data.user.email).toBe(email);
            (0, _globals.expect)(result.data.user.user_metadata.tenant_id).toBe(tenantId);
            (0, _globals.expect)(result.data.user.user_metadata.role).toBe('student');
            (0, _globals.expect)(result.data.user.email_confirmed_at).toBeNull();
            (0, _globals.expect)(result.data.session).toBeNull(); // E-posta onayı bekleniyor
            (0, _globals.expect)(result.error).toBeNull();
            (0, _globals.expect)(mockSupabaseClient.auth.signUp).toHaveBeenCalledWith({
                email,
                password,
                options: {
                    data: userMetadata
                }
            });
        });
        (0, _globals.it)('should fail to sign up with an existing email', async ()=>{
            // Arrange
            const existingEmail = 'existing@example.com';
            const password = 'somePassword123';
            const expectedResponse = {
                data: {
                    user: null,
                    session: null
                },
                error: {
                    name: 'AuthApiError',
                    message: 'User already registered',
                    status: 422
                }
            };
            mockSupabaseClient.auth.signUp.mockResolvedValue(expectedResponse);
            // Act
            const result = await mockSupabaseClient.auth.signUp({
                email: existingEmail,
                password
            });
            // Assert
            (0, _globals.expect)(result.data.user).toBeNull();
            (0, _globals.expect)(result.data.session).toBeNull();
            (0, _globals.expect)(result.error).toBeDefined();
            (0, _globals.expect)(result.error.message).toBe('User already registered');
            (0, _globals.expect)(result.error.status).toBe(422);
        });
        (0, _globals.it)('should handle weak password during sign up', async ()=>{
            // Arrange
            const email = 'newuser@example.com';
            const weakPassword = '123'; // Çok zayıf şifre
            const expectedResponse = {
                data: {
                    user: null,
                    session: null
                },
                error: {
                    name: 'AuthApiError',
                    message: 'Password should be at least 6 characters',
                    status: 422
                }
            };
            mockSupabaseClient.auth.signUp.mockResolvedValue(expectedResponse);
            // Act
            const result = await mockSupabaseClient.auth.signUp({
                email,
                password: weakPassword
            });
            // Assert
            (0, _globals.expect)(result.data.user).toBeNull();
            (0, _globals.expect)(result.error).toBeDefined();
            (0, _globals.expect)(result.error.message).toContain('Password should be at least');
            (0, _globals.expect)(result.error.status).toBe(422);
        });
    });
    (0, _globals.describe)('Session Management Tests', ()=>{
        (0, _globals.it)('should retrieve existing user session', async ()=>{
            // Arrange
            const mockSession = {
                access_token: 'existing-access-token',
                refresh_token: 'existing-refresh-token',
                expires_at: 1705314600,
                user: {
                    id: '550e8400-e29b-41d4-a716-446655440000',
                    email: 'session-user@example.com',
                    user_metadata: {
                        tenant_id: 'tenant-789',
                        role: 'admin'
                    }
                }
            };
            const expectedResponse = {
                data: {
                    session: mockSession
                },
                error: null
            };
            mockSupabaseClient.auth.getSession.mockResolvedValue(expectedResponse);
            // Act
            const result = await mockSupabaseClient.auth.getSession();
            // Assert
            (0, _globals.expect)(result.data.session).toBeDefined();
            (0, _globals.expect)(result.data.session.user.email).toBe('session-user@example.com');
            (0, _globals.expect)(result.data.session.user.user_metadata.tenant_id).toBe('tenant-789');
            (0, _globals.expect)(result.data.session.access_token).toBe('existing-access-token');
            (0, _globals.expect)(result.error).toBeNull();
        });
        (0, _globals.it)('should handle no existing session', async ()=>{
            // Arrange
            const expectedResponse = {
                data: {
                    session: null
                },
                error: null
            };
            mockSupabaseClient.auth.getSession.mockResolvedValue(expectedResponse);
            // Act
            const result = await mockSupabaseClient.auth.getSession();
            // Assert
            (0, _globals.expect)(result.data.session).toBeNull();
            (0, _globals.expect)(result.error).toBeNull();
        });
        (0, _globals.it)('should successfully sign out user', async ()=>{
            // Arrange
            const expectedResponse = {
                error: null
            };
            mockSupabaseClient.auth.signOut.mockResolvedValue(expectedResponse);
            // Act
            const result = await mockSupabaseClient.auth.signOut();
            // Assert
            (0, _globals.expect)(result.error).toBeNull();
            (0, _globals.expect)(mockSupabaseClient.auth.signOut).toHaveBeenCalledTimes(1);
        });
    });
    (0, _globals.describe)('Password Reset Tests', ()=>{
        (0, _globals.it)('should successfully send password reset email', async ()=>{
            // Arrange
            const email = 'user@example.com';
            const expectedResponse = {
                data: {},
                error: null
            };
            mockSupabaseClient.auth.resetPasswordForEmail.mockResolvedValue(expectedResponse);
            // Act
            const result = await mockSupabaseClient.auth.resetPasswordForEmail(email);
            // Assert
            (0, _globals.expect)(result.error).toBeNull();
            (0, _globals.expect)(mockSupabaseClient.auth.resetPasswordForEmail).toHaveBeenCalledWith(email);
            (0, _globals.expect)(mockSupabaseClient.auth.resetPasswordForEmail).toHaveBeenCalledTimes(1);
        });
        (0, _globals.it)('should handle password reset for non-existent email', async ()=>{
            // Arrange
            const nonExistentEmail = 'nonexistent@example.com';
            const expectedResponse = {
                data: {},
                error: {
                    name: 'AuthApiError',
                    message: 'User not found',
                    status: 400
                }
            };
            mockSupabaseClient.auth.resetPasswordForEmail.mockResolvedValue(expectedResponse);
            // Act
            const result = await mockSupabaseClient.auth.resetPasswordForEmail(nonExistentEmail);
            // Assert
            (0, _globals.expect)(result.error).toBeDefined();
            (0, _globals.expect)(result.error.message).toBe('User not found');
            (0, _globals.expect)(result.error.status).toBe(400);
        });
    });
    (0, _globals.describe)('Multi-Tenant Auth Integration', ()=>{
        (0, _globals.it)('should validate user belongs to correct tenant during auth', async ()=>{
            // Arrange
            const email = 'multitenant-user@example.com';
            const password = 'password123';
            const actualTenantId = 'tenant-456';
            const expectedTenantId = 'tenant-123';
            const authResponse = {
                data: {
                    user: {
                        id: '880e8400-e29b-41d4-a716-446655440003',
                        email: email,
                        user_metadata: {
                            tenant_id: actualTenantId,
                            role: 'user'
                        }
                    },
                    session: {
                        access_token: 'token'
                    }
                },
                error: null
            };
            mockSupabaseClient.auth.signInWithPassword.mockResolvedValue(authResponse);
            // Act
            const result = await mockSupabaseClient.auth.signInWithPassword({
                email,
                password
            });
            // Assert - Kullanıcı farklı tenant'ta
            (0, _globals.expect)(result.data.user.user_metadata.tenant_id).not.toBe(expectedTenantId);
            (0, _globals.expect)(result.data.user.user_metadata.tenant_id).toBe(actualTenantId);
        // Bu durumda uygulama mantığında tenant kontrolü yapılması gerekir
        // Test, gerçek senaryoda tenant mismatch durumunu simüle ediyor
        });
        (0, _globals.it)('should handle auth state changes for tenant-specific users', async ()=>{
            // Arrange
            const mockCallback = jest.fn();
            const mockUnsubscribe = jest.fn();
            mockSupabaseClient.auth.onAuthStateChange.mockReturnValue({
                data: {
                    subscription: {
                        unsubscribe: mockUnsubscribe
                    }
                }
            });
            // Act
            const { data } = mockSupabaseClient.auth.onAuthStateChange(mockCallback);
            // Assert
            (0, _globals.expect)(mockSupabaseClient.auth.onAuthStateChange).toHaveBeenCalledWith(mockCallback);
            (0, _globals.expect)(data.subscription.unsubscribe).toBe(mockUnsubscribe);
        });
    });
    (0, _globals.describe)('Error Handling and Resilience', ()=>{
        (0, _globals.it)('should handle network timeouts gracefully', async ()=>{
            // Arrange
            mockSupabaseClient.auth.signInWithPassword.mockRejectedValue(new Error('Network timeout'));
            // Act & Assert
            await (0, _globals.expect)(mockSupabaseClient.auth.signInWithPassword({
                email: 'test@example.com',
                password: 'password'
            })).rejects.toThrow('Network timeout');
        });
        (0, _globals.it)('should handle auth service unavailable', async ()=>{
            // Arrange
            const expectedResponse = {
                data: {
                    user: null,
                    session: null
                },
                error: {
                    name: 'AuthApiError',
                    message: 'Service temporarily unavailable',
                    status: 503
                }
            };
            mockSupabaseClient.auth.signInWithPassword.mockResolvedValue(expectedResponse);
            // Act
            const result = await mockSupabaseClient.auth.signInWithPassword({
                email: 'test@example.com',
                password: 'password'
            });
            // Assert
            (0, _globals.expect)(result.error).toBeDefined();
            (0, _globals.expect)(result.error.message).toBe('Service temporarily unavailable');
            (0, _globals.expect)(result.error.status).toBe(503);
        });
        (0, _globals.it)('should handle malformed auth responses', async ()=>{
            // Arrange - Malformed response
            const malformedResponse = {
                data: {
                    user: undefined,
                    session: undefined
                },
                error: null
            };
            mockSupabaseClient.auth.signInWithPassword.mockResolvedValue(malformedResponse);
            // Act
            const result = await mockSupabaseClient.auth.signInWithPassword({
                email: 'test@example.com',
                password: 'password'
            });
            // Assert
            (0, _globals.expect)(result.data.user).toBeUndefined();
            (0, _globals.expect)(result.data.session).toBeUndefined();
        // Gerçek uygulamada bu durumu handle etmek önemli
        });
    });
    (0, _globals.describe)('Mock Integration Verification', ()=>{
        (0, _globals.it)('should verify all auth methods are properly mocked', ()=>{
            // Assert - Tüm auth metodları mock'lanmış olmalı
            (0, _globals.expect)(mockSupabaseClient.auth.signInWithPassword).toBeDefined();
            (0, _globals.expect)(mockSupabaseClient.auth.signUp).toBeDefined();
            (0, _globals.expect)(mockSupabaseClient.auth.signOut).toBeDefined();
            (0, _globals.expect)(mockSupabaseClient.auth.resetPasswordForEmail).toBeDefined();
            (0, _globals.expect)(mockSupabaseClient.auth.getSession).toBeDefined();
            (0, _globals.expect)(mockSupabaseClient.auth.onAuthStateChange).toBeDefined();
            (0, _globals.expect)(jest.isMockFunction(mockSupabaseClient.auth.signInWithPassword)).toBe(true);
            (0, _globals.expect)(jest.isMockFunction(mockSupabaseClient.auth.signUp)).toBe(true);
            (0, _globals.expect)(jest.isMockFunction(mockSupabaseClient.auth.signOut)).toBe(true);
        });
        (0, _globals.it)('should verify database query methods are mocked', ()=>{
            // Assert - Database query metodları mock'lanmış olmalı
            (0, _globals.expect)(mockSupabaseClient.from).toBeDefined();
            (0, _globals.expect)(jest.isMockFunction(mockSupabaseClient.from)).toBe(true);
        });
    });
});

//# sourceMappingURL=data:application/json;base64,