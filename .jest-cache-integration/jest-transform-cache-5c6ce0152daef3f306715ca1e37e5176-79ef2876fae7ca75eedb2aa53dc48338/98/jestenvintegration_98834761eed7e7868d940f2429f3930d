b772844c07eb4016719b9ae90b585bb2
/* eslint-disable @typescript-eslint/no-require-imports */ /**
 * ƒ∞-EP.APP - Integration Test Environment Variables Loader
 * Bu dosya integration testleri √∂ncesinde gerekli env deƒüi≈ükenlerini y√ºkler
 */ "use strict";
const { config } = require('dotenv');
const path = require('path');
// FORCE load .env.test file directly
const envPath = path.resolve(process.cwd(), '.env.test');
console.log('üîß Loading .env.test from:', envPath);
const result = config({
    path: envPath,
    override: true
});
// MANUAL environment variable setting for critical ones
if (!process.env.NEXT_PUBLIC_SUPABASE_URL) {
    process.env.NEXT_PUBLIC_SUPABASE_URL = 'http://localhost:54321';
}
if (!process.env.SUPABASE_SERVICE_ROLE_KEY) {
    process.env.SUPABASE_SERVICE_ROLE_KEY = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZS1kZW1vIiwicm9sZSI6InNlcnZpY2Vfcm9sZSIsImV4cCI6MTk4MzgxMjk5Nn0.EGIM96RAZx35lJzdJsyH-qQwv8Hdp7fsn3W0YpN81IU';
}
if (!process.env.REDIS_URL) {
    process.env.REDIS_URL = 'redis://localhost:6379';
}
if (!process.env.TEST_TENANT_ID) {
    process.env.TEST_TENANT_ID = 'aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa';
}
if (result.error) {
    console.warn('‚ö†Ô∏è  Integration Test Environment Warning:', result.error.message);
    console.warn('üìù Make sure .env.test file exists with required variables');
}
// Validate critical environment variables for integration tests
const requiredVars = [
    'DATABASE_URL',
    'NEXT_PUBLIC_SUPABASE_URL',
    'NEXT_PUBLIC_SUPABASE_ANON_KEY',
    'SUPABASE_SERVICE_ROLE_KEY',
    'REDIS_URL',
    'NEXTAUTH_SECRET',
    'TEST_TENANT_ID'
];
const missingVars = requiredVars.filter((varName)=>!process.env[varName]);
if (missingVars.length > 0) {
    console.error('‚ùå Integration Test Environment Error:');
    console.error('Missing required environment variables:', missingVars.join(', '));
    console.error('');
    console.error('üîß Required variables in .env.test:');
    missingVars.forEach((varName)=>{
        console.error(`   ${varName}=your-value-here`);
    });
    console.error('');
    console.error('üìñ See .env.example for reference values');
    process.exit(1);
}
// Set NODE_ENV to test if not already set
if (!process.env.NODE_ENV) {
    process.env.NODE_ENV = 'test';
}
// Ensure test environment isolation
process.env.NODE_ENV = 'test';
// Integration test specific environment setup
process.env.TEST_ENVIRONMENT = 'integration';
process.env.JEST_WORKER_ID = process.env.JEST_WORKER_ID || '1';
console.log('‚úÖ Integration test environment loaded successfully');
console.log(`üìä Database: ${process.env.DATABASE_URL?.includes('localhost') ? 'Local Supabase' : 'Remote'}`);
console.log(`üîÑ Redis: ${process.env.REDIS_URL?.includes('localhost') ? 'Local Redis' : 'Remote'}`);
console.log(`üè¢ Test Tenant: ${process.env.TEST_TENANT_ID}`);

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy90dXJhbm11c2Fib3NtYW4vUHJvamVjdHMvaS1lcC5hcHAvamVzdC5lbnYuaW50ZWdyYXRpb24uanMiXSwic291cmNlc0NvbnRlbnQiOlsiLyogZXNsaW50LWRpc2FibGUgQHR5cGVzY3JpcHQtZXNsaW50L25vLXJlcXVpcmUtaW1wb3J0cyAqL1xuLyoqXG4gKiDEsC1FUC5BUFAgLSBJbnRlZ3JhdGlvbiBUZXN0IEVudmlyb25tZW50IFZhcmlhYmxlcyBMb2FkZXJcbiAqIEJ1IGRvc3lhIGludGVncmF0aW9uIHRlc3RsZXJpIMO2bmNlc2luZGUgZ2VyZWtsaSBlbnYgZGXEn2nFn2tlbmxlcmluaSB5w7xrbGVyXG4gKi9cblxuY29uc3QgeyBjb25maWcgfSA9IHJlcXVpcmUoJ2RvdGVudicpO1xuY29uc3QgcGF0aCA9IHJlcXVpcmUoJ3BhdGgnKTtcblxuLy8gRk9SQ0UgbG9hZCAuZW52LnRlc3QgZmlsZSBkaXJlY3RseVxuY29uc3QgZW52UGF0aCA9IHBhdGgucmVzb2x2ZShwcm9jZXNzLmN3ZCgpLCAnLmVudi50ZXN0Jyk7XG5jb25zb2xlLmxvZygn8J+UpyBMb2FkaW5nIC5lbnYudGVzdCBmcm9tOicsIGVudlBhdGgpO1xuXG5jb25zdCByZXN1bHQgPSBjb25maWcoeyBwYXRoOiBlbnZQYXRoLCBvdmVycmlkZTogdHJ1ZSB9KTtcblxuLy8gTUFOVUFMIGVudmlyb25tZW50IHZhcmlhYmxlIHNldHRpbmcgZm9yIGNyaXRpY2FsIG9uZXNcbmlmICghcHJvY2Vzcy5lbnYuTkVYVF9QVUJMSUNfU1VQQUJBU0VfVVJMKSB7XG4gIHByb2Nlc3MuZW52Lk5FWFRfUFVCTElDX1NVUEFCQVNFX1VSTCA9ICdodHRwOi8vbG9jYWxob3N0OjU0MzIxJztcbn1cbmlmICghcHJvY2Vzcy5lbnYuU1VQQUJBU0VfU0VSVklDRV9ST0xFX0tFWSkge1xuICBwcm9jZXNzLmVudi5TVVBBQkFTRV9TRVJWSUNFX1JPTEVfS0VZID0gJ2V5SmhiR2NpT2lKSVV6STFOaUlzSW5SNWNDSTZJa3BYVkNKOS5leUpwYzNNaU9pSnpkWEJoWW1GelpTMWtaVzF2SWl3aWNtOXNaU0k2SW5ObGNuWnBZMlZmY205c1pTSXNJbVY0Y0NJNk1UazRNemd4TWprNU5uMC5FR0lNOTZSQVp4MzVsSnpkSnN5SC1xUXd2OEhkcDdmc24zVzBZcE44MUlVJztcbn1cbmlmICghcHJvY2Vzcy5lbnYuUkVESVNfVVJMKSB7XG4gIHByb2Nlc3MuZW52LlJFRElTX1VSTCA9ICdyZWRpczovL2xvY2FsaG9zdDo2Mzc5Jztcbn1cbmlmICghcHJvY2Vzcy5lbnYuVEVTVF9URU5BTlRfSUQpIHtcbiAgcHJvY2Vzcy5lbnYuVEVTVF9URU5BTlRfSUQgPSAnYWFhYWFhYWEtYWFhYS1hYWFhLWFhYWEtYWFhYWFhYWFhYWFhJztcbn1cblxuaWYgKHJlc3VsdC5lcnJvcikge1xuICBjb25zb2xlLndhcm4oJ+KaoO+4jyAgSW50ZWdyYXRpb24gVGVzdCBFbnZpcm9ubWVudCBXYXJuaW5nOicsIHJlc3VsdC5lcnJvci5tZXNzYWdlKTtcbiAgY29uc29sZS53YXJuKCfwn5OdIE1ha2Ugc3VyZSAuZW52LnRlc3QgZmlsZSBleGlzdHMgd2l0aCByZXF1aXJlZCB2YXJpYWJsZXMnKTtcbn1cblxuLy8gVmFsaWRhdGUgY3JpdGljYWwgZW52aXJvbm1lbnQgdmFyaWFibGVzIGZvciBpbnRlZ3JhdGlvbiB0ZXN0c1xuY29uc3QgcmVxdWlyZWRWYXJzID0gW1xuICAnREFUQUJBU0VfVVJMJyxcbiAgJ05FWFRfUFVCTElDX1NVUEFCQVNFX1VSTCcsXG4gICdORVhUX1BVQkxJQ19TVVBBQkFTRV9BTk9OX0tFWScsXG4gICdTVVBBQkFTRV9TRVJWSUNFX1JPTEVfS0VZJyxcbiAgJ1JFRElTX1VSTCcsXG4gICdORVhUQVVUSF9TRUNSRVQnLFxuICAnVEVTVF9URU5BTlRfSUQnXG5dO1xuXG5jb25zdCBtaXNzaW5nVmFycyA9IHJlcXVpcmVkVmFycy5maWx0ZXIodmFyTmFtZSA9PiAhcHJvY2Vzcy5lbnZbdmFyTmFtZV0pO1xuXG5pZiAobWlzc2luZ1ZhcnMubGVuZ3RoID4gMCkge1xuICBjb25zb2xlLmVycm9yKCfinYwgSW50ZWdyYXRpb24gVGVzdCBFbnZpcm9ubWVudCBFcnJvcjonKTtcbiAgY29uc29sZS5lcnJvcignTWlzc2luZyByZXF1aXJlZCBlbnZpcm9ubWVudCB2YXJpYWJsZXM6JywgbWlzc2luZ1ZhcnMuam9pbignLCAnKSk7XG4gIGNvbnNvbGUuZXJyb3IoJycpO1xuICBjb25zb2xlLmVycm9yKCfwn5SnIFJlcXVpcmVkIHZhcmlhYmxlcyBpbiAuZW52LnRlc3Q6Jyk7XG4gIG1pc3NpbmdWYXJzLmZvckVhY2godmFyTmFtZSA9PiB7XG4gICAgY29uc29sZS5lcnJvcihgICAgJHt2YXJOYW1lfT15b3VyLXZhbHVlLWhlcmVgKTtcbiAgfSk7XG4gIGNvbnNvbGUuZXJyb3IoJycpO1xuICBjb25zb2xlLmVycm9yKCfwn5OWIFNlZSAuZW52LmV4YW1wbGUgZm9yIHJlZmVyZW5jZSB2YWx1ZXMnKTtcbiAgcHJvY2Vzcy5leGl0KDEpO1xufVxuXG4vLyBTZXQgTk9ERV9FTlYgdG8gdGVzdCBpZiBub3QgYWxyZWFkeSBzZXRcbmlmICghcHJvY2Vzcy5lbnYuTk9ERV9FTlYpIHtcbiAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgPSAndGVzdCc7XG59XG5cbi8vIEVuc3VyZSB0ZXN0IGVudmlyb25tZW50IGlzb2xhdGlvblxucHJvY2Vzcy5lbnYuTk9ERV9FTlYgPSAndGVzdCc7XG5cbi8vIEludGVncmF0aW9uIHRlc3Qgc3BlY2lmaWMgZW52aXJvbm1lbnQgc2V0dXBcbnByb2Nlc3MuZW52LlRFU1RfRU5WSVJPTk1FTlQgPSAnaW50ZWdyYXRpb24nO1xucHJvY2Vzcy5lbnYuSkVTVF9XT1JLRVJfSUQgPSBwcm9jZXNzLmVudi5KRVNUX1dPUktFUl9JRCB8fCAnMSc7XG5cbmNvbnNvbGUubG9nKCfinIUgSW50ZWdyYXRpb24gdGVzdCBlbnZpcm9ubWVudCBsb2FkZWQgc3VjY2Vzc2Z1bGx5Jyk7XG5jb25zb2xlLmxvZyhg8J+TiiBEYXRhYmFzZTogJHtwcm9jZXNzLmVudi5EQVRBQkFTRV9VUkw/LmluY2x1ZGVzKCdsb2NhbGhvc3QnKSA/ICdMb2NhbCBTdXBhYmFzZScgOiAnUmVtb3RlJ31gKTtcbmNvbnNvbGUubG9nKGDwn5SEIFJlZGlzOiAke3Byb2Nlc3MuZW52LlJFRElTX1VSTD8uaW5jbHVkZXMoJ2xvY2FsaG9zdCcpID8gJ0xvY2FsIFJlZGlzJyA6ICdSZW1vdGUnfWApO1xuY29uc29sZS5sb2coYPCfj6IgVGVzdCBUZW5hbnQ6ICR7cHJvY2Vzcy5lbnYuVEVTVF9URU5BTlRfSUR9YCk7Il0sIm5hbWVzIjpbImNvbmZpZyIsInJlcXVpcmUiLCJwYXRoIiwiZW52UGF0aCIsInJlc29sdmUiLCJwcm9jZXNzIiwiY3dkIiwiY29uc29sZSIsImxvZyIsInJlc3VsdCIsIm92ZXJyaWRlIiwiZW52IiwiTkVYVF9QVUJMSUNfU1VQQUJBU0VfVVJMIiwiU1VQQUJBU0VfU0VSVklDRV9ST0xFX0tFWSIsIlJFRElTX1VSTCIsIlRFU1RfVEVOQU5UX0lEIiwiZXJyb3IiLCJ3YXJuIiwibWVzc2FnZSIsInJlcXVpcmVkVmFycyIsIm1pc3NpbmdWYXJzIiwiZmlsdGVyIiwidmFyTmFtZSIsImxlbmd0aCIsImpvaW4iLCJmb3JFYWNoIiwiZXhpdCIsIk5PREVfRU5WIiwiVEVTVF9FTlZJUk9OTUVOVCIsIkpFU1RfV09SS0VSX0lEIiwiREFUQUJBU0VfVVJMIiwiaW5jbHVkZXMiXSwibWFwcGluZ3MiOiJBQUFBLHdEQUF3RCxHQUN4RDs7O0NBR0M7QUFFRCxNQUFNLEVBQUVBLE1BQU0sRUFBRSxHQUFHQyxRQUFRO0FBQzNCLE1BQU1DLE9BQU9ELFFBQVE7QUFFckIscUNBQXFDO0FBQ3JDLE1BQU1FLFVBQVVELEtBQUtFLE9BQU8sQ0FBQ0MsUUFBUUMsR0FBRyxJQUFJO0FBQzVDQyxRQUFRQyxHQUFHLENBQUMsOEJBQThCTDtBQUUxQyxNQUFNTSxTQUFTVCxPQUFPO0lBQUVFLE1BQU1DO0lBQVNPLFVBQVU7QUFBSztBQUV0RCx3REFBd0Q7QUFDeEQsSUFBSSxDQUFDTCxRQUFRTSxHQUFHLENBQUNDLHdCQUF3QixFQUFFO0lBQ3pDUCxRQUFRTSxHQUFHLENBQUNDLHdCQUF3QixHQUFHO0FBQ3pDO0FBQ0EsSUFBSSxDQUFDUCxRQUFRTSxHQUFHLENBQUNFLHlCQUF5QixFQUFFO0lBQzFDUixRQUFRTSxHQUFHLENBQUNFLHlCQUF5QixHQUFHO0FBQzFDO0FBQ0EsSUFBSSxDQUFDUixRQUFRTSxHQUFHLENBQUNHLFNBQVMsRUFBRTtJQUMxQlQsUUFBUU0sR0FBRyxDQUFDRyxTQUFTLEdBQUc7QUFDMUI7QUFDQSxJQUFJLENBQUNULFFBQVFNLEdBQUcsQ0FBQ0ksY0FBYyxFQUFFO0lBQy9CVixRQUFRTSxHQUFHLENBQUNJLGNBQWMsR0FBRztBQUMvQjtBQUVBLElBQUlOLE9BQU9PLEtBQUssRUFBRTtJQUNoQlQsUUFBUVUsSUFBSSxDQUFDLDZDQUE2Q1IsT0FBT08sS0FBSyxDQUFDRSxPQUFPO0lBQzlFWCxRQUFRVSxJQUFJLENBQUM7QUFDZjtBQUVBLGdFQUFnRTtBQUNoRSxNQUFNRSxlQUFlO0lBQ25CO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0NBQ0Q7QUFFRCxNQUFNQyxjQUFjRCxhQUFhRSxNQUFNLENBQUNDLENBQUFBLFVBQVcsQ0FBQ2pCLFFBQVFNLEdBQUcsQ0FBQ1csUUFBUTtBQUV4RSxJQUFJRixZQUFZRyxNQUFNLEdBQUcsR0FBRztJQUMxQmhCLFFBQVFTLEtBQUssQ0FBQztJQUNkVCxRQUFRUyxLQUFLLENBQUMsMkNBQTJDSSxZQUFZSSxJQUFJLENBQUM7SUFDMUVqQixRQUFRUyxLQUFLLENBQUM7SUFDZFQsUUFBUVMsS0FBSyxDQUFDO0lBQ2RJLFlBQVlLLE9BQU8sQ0FBQ0gsQ0FBQUE7UUFDbEJmLFFBQVFTLEtBQUssQ0FBQyxDQUFDLEdBQUcsRUFBRU0sUUFBUSxnQkFBZ0IsQ0FBQztJQUMvQztJQUNBZixRQUFRUyxLQUFLLENBQUM7SUFDZFQsUUFBUVMsS0FBSyxDQUFDO0lBQ2RYLFFBQVFxQixJQUFJLENBQUM7QUFDZjtBQUVBLDBDQUEwQztBQUMxQyxJQUFJLENBQUNyQixRQUFRTSxHQUFHLENBQUNnQixRQUFRLEVBQUU7SUFDekJ0QixRQUFRTSxHQUFHLENBQUNnQixRQUFRLEdBQUc7QUFDekI7QUFFQSxvQ0FBb0M7QUFDcEN0QixRQUFRTSxHQUFHLENBQUNnQixRQUFRLEdBQUc7QUFFdkIsOENBQThDO0FBQzlDdEIsUUFBUU0sR0FBRyxDQUFDaUIsZ0JBQWdCLEdBQUc7QUFDL0J2QixRQUFRTSxHQUFHLENBQUNrQixjQUFjLEdBQUd4QixRQUFRTSxHQUFHLENBQUNrQixjQUFjLElBQUk7QUFFM0R0QixRQUFRQyxHQUFHLENBQUM7QUFDWkQsUUFBUUMsR0FBRyxDQUFDLENBQUMsYUFBYSxFQUFFSCxRQUFRTSxHQUFHLENBQUNtQixZQUFZLEVBQUVDLFNBQVMsZUFBZSxtQkFBbUIsVUFBVTtBQUMzR3hCLFFBQVFDLEdBQUcsQ0FBQyxDQUFDLFVBQVUsRUFBRUgsUUFBUU0sR0FBRyxDQUFDRyxTQUFTLEVBQUVpQixTQUFTLGVBQWUsZ0JBQWdCLFVBQVU7QUFDbEd4QixRQUFRQyxHQUFHLENBQUMsQ0FBQyxnQkFBZ0IsRUFBRUgsUUFBUU0sR0FBRyxDQUFDSSxjQUFjLEVBQUUifQ==