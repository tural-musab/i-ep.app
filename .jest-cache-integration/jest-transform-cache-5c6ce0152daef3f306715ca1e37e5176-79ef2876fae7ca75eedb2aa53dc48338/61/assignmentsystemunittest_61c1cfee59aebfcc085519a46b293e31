16317f58a9b24330324cee5feae97d77
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
const _globals = require("@jest/globals");
const _assignment = require("../types/assignment");
// Mock validation module
const mockAssignmentValidation = {
    safeParse: _globals.jest.fn(()=>({
            success: true
        }))
};
// Mock repository with proper unit test patterns
const mockAssignmentRepository = {
    create: _globals.jest.fn((data)=>{
        if (mockAssignmentValidation.safeParse(data).success) {
            return Promise.resolve({
                id: 'test-id',
                ...data
            });
        }
        return Promise.reject(new Error('Assignment validation failed'));
    }),
    findById: _globals.jest.fn((id)=>{
        if (id === 'test-id') {
            return Promise.resolve({
                id: 'test-id',
                title: 'Test Assignment'
            });
        }
        return Promise.resolve(null);
    }),
    findAll: _globals.jest.fn(()=>Promise.resolve({
            data: [],
            totalCount: 0,
            totalPages: 0
        })),
    findByClass: _globals.jest.fn(()=>Promise.resolve([])),
    findByStatus: _globals.jest.fn(()=>Promise.resolve([])),
    findByDueDateRange: _globals.jest.fn(()=>Promise.resolve([])),
    update: _globals.jest.fn((id, data)=>{
        if (mockAssignmentValidation.safeParse(data).success) {
            return Promise.resolve({
                id,
                ...data
            });
        }
        return Promise.reject(new Error('Assignment update validation failed'));
    }),
    delete: _globals.jest.fn((id)=>{
        if (id === 'test-id') {
            return Promise.resolve(true);
        }
        return Promise.resolve(false);
    })
};
// Mock file attachment service
const mockFileAttachmentService = {
    uploadFile: _globals.jest.fn(()=>Promise.resolve({
            url: 'https://example.com/file.pdf'
        })),
    deleteFile: _globals.jest.fn(()=>Promise.resolve(true)),
    validateFileType: _globals.jest.fn(()=>true),
    validateFileSize: _globals.jest.fn(()=>true)
};
(0, _globals.describe)('Assignment System Unit Tests', ()=>{
    let assignmentRepository;
    let assignmentValidation;
    let fileAttachmentService;
    (0, _globals.beforeEach)(()=>{
        assignmentRepository = mockAssignmentRepository;
        assignmentValidation = mockAssignmentValidation;
        fileAttachmentService = mockFileAttachmentService;
        _globals.jest.clearAllMocks();
    });
    (0, _globals.describe)('Assignment Repository', ()=>{
        (0, _globals.describe)('createAssignment', ()=>{
            (0, _globals.it)('should create a new assignment successfully', async ()=>{
                const mockAssignment = {
                    title: 'Test Assignment',
                    description: 'Test Description',
                    type: _assignment.AssignmentType.HOMEWORK,
                    status: _assignment.AssignmentStatus.DRAFT,
                    due_date: new Date(),
                    points: 100,
                    tenant_id: 'test-tenant',
                    teacher_id: 'test-teacher',
                    class_id: 'test-class'
                };
                const result = await assignmentRepository.create(mockAssignment);
                (0, _globals.expect)(result).toBeDefined();
                (0, _globals.expect)(result.id).toBe('test-id');
                (0, _globals.expect)(result.title).toBe('Test Assignment');
                (0, _globals.expect)(assignmentRepository.create).toHaveBeenCalledWith(mockAssignment);
            });
            (0, _globals.it)('should handle validation errors', async ()=>{
                const invalidAssignment = {
                    title: '',
                    description: 'Test Description',
                    type: _assignment.AssignmentType.HOMEWORK,
                    status: _assignment.AssignmentStatus.DRAFT,
                    due_date: new Date(),
                    points: -10,
                    tenant_id: 'test-tenant',
                    teacher_id: 'test-teacher',
                    class_id: 'test-class'
                };
                // Mock validation failure
                mockAssignmentValidation.safeParse.mockReturnValue({
                    success: false,
                    error: {
                        issues: [
                            'Title is required',
                            'Points must be positive'
                        ]
                    }
                });
                await (0, _globals.expect)(assignmentRepository.create(invalidAssignment)).rejects.toThrow('Assignment validation failed');
            });
            (0, _globals.it)('should enforce multi-tenant isolation', async ()=>{
                const assignment = {
                    title: 'Test Assignment',
                    description: 'Test Description',
                    type: _assignment.AssignmentType.HOMEWORK,
                    status: _assignment.AssignmentStatus.DRAFT,
                    due_date: new Date(),
                    points: 100,
                    tenant_id: 'different-tenant',
                    teacher_id: 'test-teacher',
                    class_id: 'test-class'
                };
                // Mock tenant isolation - different tenant should not find assignment
                mockAssignmentRepository.findById.mockReturnValue(Promise.resolve(null));
                const result = await assignmentRepository.findById('test-id');
                (0, _globals.expect)(result).toBeNull();
            });
        });
        (0, _globals.describe)('findAssignments', ()=>{
            (0, _globals.it)('should retrieve assignments for current tenant only', async ()=>{
                const result = await assignmentRepository.findAll();
                (0, _globals.expect)(result).toBeDefined();
                (0, _globals.expect)(result.data).toEqual([]);
                (0, _globals.expect)(assignmentRepository.findAll).toHaveBeenCalled();
            });
            (0, _globals.it)('should filter assignments by class', async ()=>{
                const result = await assignmentRepository.findByClass('test-class-id');
                (0, _globals.expect)(Array.isArray(result)).toBe(true);
                (0, _globals.expect)(assignmentRepository.findByClass).toHaveBeenCalledWith('test-class-id');
            });
            (0, _globals.it)('should filter assignments by status', async ()=>{
                const result = await assignmentRepository.findByStatus(_assignment.AssignmentStatus.PUBLISHED);
                (0, _globals.expect)(Array.isArray(result)).toBe(true);
                (0, _globals.expect)(assignmentRepository.findByStatus).toHaveBeenCalledWith(_assignment.AssignmentStatus.PUBLISHED);
            });
            (0, _globals.it)('should filter assignments by due date range', async ()=>{
                const startDate = new Date('2025-01-01');
                const endDate = new Date('2025-12-31');
                const result = await assignmentRepository.findByDueDateRange(startDate, endDate);
                (0, _globals.expect)(Array.isArray(result)).toBe(true);
                (0, _globals.expect)(assignmentRepository.findByDueDateRange).toHaveBeenCalledWith(startDate, endDate);
            });
        });
        (0, _globals.describe)('updateAssignment', ()=>{
            (0, _globals.it)('should update assignment successfully', async ()=>{
                const updates = {
                    title: 'Updated Assignment',
                    description: 'Updated Description',
                    points: 150
                };
                // Mock successful validation for this test
                mockAssignmentValidation.safeParse.mockReturnValue({
                    success: true
                });
                const result = await assignmentRepository.update('test-id', updates);
                (0, _globals.expect)(result).toBeDefined();
                (0, _globals.expect)(result.id).toBe('test-id');
                (0, _globals.expect)(assignmentRepository.update).toHaveBeenCalledWith('test-id', updates);
            });
            (0, _globals.it)('should validate updates', async ()=>{
                const invalidUpdates = {
                    title: '',
                    points: -50
                };
                // Mock validation failure
                mockAssignmentValidation.safeParse.mockReturnValue({
                    success: false,
                    error: {
                        issues: [
                            'Title is required',
                            'Points must be positive'
                        ]
                    }
                });
                await (0, _globals.expect)(assignmentRepository.update('test-id', invalidUpdates)).rejects.toThrow('Assignment update validation failed');
            });
            (0, _globals.it)('should prevent unauthorized updates', async ()=>{
                // Mock unauthorized access
                mockAssignmentRepository.update.mockReturnValue(Promise.resolve(null));
                const result = await assignmentRepository.update('different-tenant-assignment', {
                    title: 'Unauthorized Update'
                });
                (0, _globals.expect)(result).toBeNull();
            });
        });
        (0, _globals.describe)('deleteAssignment', ()=>{
            (0, _globals.it)('should delete assignment successfully', async ()=>{
                const result = await assignmentRepository.delete('test-id');
                (0, _globals.expect)(result).toBe(true);
                (0, _globals.expect)(assignmentRepository.delete).toHaveBeenCalledWith('test-id');
            });
            (0, _globals.it)('should prevent unauthorized deletion', async ()=>{
                const result = await assignmentRepository.delete('different-tenant-assignment');
                (0, _globals.expect)(result).toBe(false);
            });
        });
    });
    (0, _globals.describe)('Assignment Validation', ()=>{
        (0, _globals.describe)('assignmentValidation', ()=>{
            (0, _globals.it)('should validate valid assignment data', ()=>{
                const validData = {
                    title: 'Valid Assignment',
                    description: 'Valid Description',
                    type: _assignment.AssignmentType.HOMEWORK,
                    status: _assignment.AssignmentStatus.DRAFT,
                    due_date: new Date(),
                    points: 100,
                    tenant_id: 'test-tenant',
                    teacher_id: 'test-teacher',
                    class_id: 'test-class'
                };
                // Mock successful validation for this test
                mockAssignmentValidation.safeParse.mockReturnValue({
                    success: true
                });
                const result = assignmentValidation.safeParse(validData);
                (0, _globals.expect)(result.success).toBe(true);
            });
            (0, _globals.it)('should reject invalid assignment data', ()=>{
                const invalidData = {
                    title: '',
                    description: '',
                    type: 'INVALID_TYPE',
                    status: 'INVALID_STATUS',
                    due_date: 'invalid-date',
                    points: -10,
                    tenant_id: '',
                    teacher_id: '',
                    class_id: ''
                };
                assignmentValidation.safeParse.mockReturnValue({
                    success: false,
                    error: {
                        issues: [
                            'Multiple validation errors'
                        ]
                    }
                });
                const result = assignmentValidation.safeParse(invalidData);
                (0, _globals.expect)(result.success).toBe(false);
            });
            (0, _globals.it)('should validate required fields', ()=>{
                const incompleteData = {
                    title: 'Test Assignment'
                };
                assignmentValidation.safeParse.mockReturnValue({
                    success: false,
                    error: {
                        issues: [
                            'Missing required fields'
                        ]
                    }
                });
                const result = assignmentValidation.safeParse(incompleteData);
                (0, _globals.expect)(result.success).toBe(false);
            });
            (0, _globals.it)('should validate due date constraints', ()=>{
                const pastDueDate = {
                    title: 'Test Assignment',
                    description: 'Test Description',
                    type: _assignment.AssignmentType.HOMEWORK,
                    status: _assignment.AssignmentStatus.DRAFT,
                    due_date: new Date('2020-01-01'),
                    points: 100,
                    tenant_id: 'test-tenant',
                    teacher_id: 'test-teacher',
                    class_id: 'test-class'
                };
                assignmentValidation.safeParse.mockReturnValue({
                    success: false,
                    error: {
                        issues: [
                            'Due date cannot be in the past'
                        ]
                    }
                });
                const result = assignmentValidation.safeParse(pastDueDate);
                (0, _globals.expect)(result.success).toBe(false);
            });
            (0, _globals.it)('should validate points constraints', ()=>{
                const invalidPoints = {
                    title: 'Test Assignment',
                    description: 'Test Description',
                    type: _assignment.AssignmentType.HOMEWORK,
                    status: _assignment.AssignmentStatus.DRAFT,
                    due_date: new Date(),
                    points: 0,
                    tenant_id: 'test-tenant',
                    teacher_id: 'test-teacher',
                    class_id: 'test-class'
                };
                assignmentValidation.safeParse.mockReturnValue({
                    success: false,
                    error: {
                        issues: [
                            'Points must be greater than 0'
                        ]
                    }
                });
                const result = assignmentValidation.safeParse(invalidPoints);
                (0, _globals.expect)(result.success).toBe(false);
            });
        });
    });
    (0, _globals.describe)('Assignment Status Transitions', ()=>{
        (0, _globals.it)('should allow valid status transitions', ()=>{
            const validTransitions = [
                {
                    from: _assignment.AssignmentStatus.DRAFT,
                    to: _assignment.AssignmentStatus.PUBLISHED
                },
                {
                    from: _assignment.AssignmentStatus.PUBLISHED,
                    to: _assignment.AssignmentStatus.CLOSED
                },
                {
                    from: _assignment.AssignmentStatus.CLOSED,
                    to: _assignment.AssignmentStatus.ARCHIVED
                }
            ];
            validTransitions.forEach((transition)=>{
                const isValid = transition.from !== transition.to;
                (0, _globals.expect)(isValid).toBe(true);
            });
        });
        (0, _globals.it)('should prevent invalid status transitions', ()=>{
            const invalidTransitions = [
                {
                    from: _assignment.AssignmentStatus.ARCHIVED,
                    to: _assignment.AssignmentStatus.DRAFT
                },
                {
                    from: _assignment.AssignmentStatus.CLOSED,
                    to: _assignment.AssignmentStatus.DRAFT
                }
            ];
            invalidTransitions.forEach((transition)=>{
                const isValid = false; // Mock invalid transition logic
                (0, _globals.expect)(isValid).toBe(false);
            });
        });
    });
    (0, _globals.describe)('Assignment File Attachments', ()=>{
        (0, _globals.it)('should handle file attachments', async ()=>{
            const mockFile = {
                filename: 'test.pdf',
                size: 1024 * 1024,
                type: 'application/pdf'
            };
            const result = await fileAttachmentService.uploadFile(mockFile);
            (0, _globals.expect)(result).toBeDefined();
            (0, _globals.expect)(result.url).toBe('https://example.com/file.pdf');
        });
        (0, _globals.it)('should validate file types', ()=>{
            const allowedTypes = [
                'application/pdf',
                'image/jpeg',
                'image/png',
                'text/plain'
            ];
            allowedTypes.forEach((type)=>{
                const isValid = fileAttachmentService.validateFileType(type);
                (0, _globals.expect)(isValid).toBe(true);
            });
            const invalidType = 'application/exe';
            fileAttachmentService.validateFileType.mockReturnValue(false);
            const isInvalid = fileAttachmentService.validateFileType(invalidType);
            (0, _globals.expect)(isInvalid).toBe(false);
        });
        (0, _globals.it)('should enforce file size limits', ()=>{
            const maxSize = 10 * 1024 * 1024; // 10MB
            const validSize = 5 * 1024 * 1024; // 5MB
            const isValidSize = fileAttachmentService.validateFileSize(validSize);
            (0, _globals.expect)(isValidSize).toBe(true);
            const invalidSize = 15 * 1024 * 1024; // 15MB
            fileAttachmentService.validateFileSize.mockReturnValue(false);
            const isInvalidSize = fileAttachmentService.validateFileSize(invalidSize);
            (0, _globals.expect)(isInvalidSize).toBe(false);
        });
    });
    (0, _globals.describe)('Assignment Permissions', ()=>{
        (0, _globals.it)('should allow teachers to create assignments', ()=>{
            const userRole = 'teacher';
            const canCreate = [
                'teacher',
                'admin'
            ].includes(userRole);
            (0, _globals.expect)(canCreate).toBe(true);
        });
        (0, _globals.it)('should prevent students from creating assignments', ()=>{
            const userRole = 'student';
            const canCreate = [
                'teacher',
                'admin'
            ].includes(userRole);
            (0, _globals.expect)(canCreate).toBe(false);
        });
        (0, _globals.it)('should allow students to view published assignments', ()=>{
            const userRole = 'student';
            const assignmentStatus = _assignment.AssignmentStatus.PUBLISHED;
            const canView = userRole === 'student' && assignmentStatus === _assignment.AssignmentStatus.PUBLISHED;
            (0, _globals.expect)(canView).toBe(true);
        });
        (0, _globals.it)('should prevent students from viewing draft assignments', ()=>{
            const userRole = 'student';
            const assignmentStatus = _assignment.AssignmentStatus.DRAFT;
            const canView = userRole === 'student' && assignmentStatus === _assignment.AssignmentStatus.PUBLISHED;
            (0, _globals.expect)(canView).toBe(false);
        });
    });
});

//# sourceMappingURL=data:application/json;base64,