{"version":3,"sources":["/Users/turanmusabosman/Projects/i-ep.app/src/__tests__/integration/quarantine/cookie-consent.test.ts"],"sourcesContent":["/**\n * Cookie Consent Integration Tests\n *\n * GDPR uyumlu çerez onayı sistemi için temel entegrasyon testleri\n */\n\nimport { describe, it, expect, beforeEach } from '@jest/globals';\n\ndescribe('Cookie Consent System', () => {\n  const CONSENT_STORAGE_KEY = 'cookie-consent';\n  const CONSENT_VERSION = '1.0';\n\n  // Mock localStorage for testing\n  const mockLocalStorage = {\n    storage: new Map<string, string>(),\n    getItem: function (key: string): string | null {\n      return this.storage.get(key) || null;\n    },\n    setItem: function (key: string, value: string): void {\n      this.storage.set(key, value);\n    },\n    removeItem: function (key: string): void {\n      this.storage.delete(key);\n    },\n    clear: function (): void {\n      this.storage.clear();\n    },\n  };\n\n  beforeEach(() => {\n    mockLocalStorage.clear();\n  });\n\n  describe('Cookie Consent Storage', () => {\n    it('should store cookie preferences correctly', () => {\n      const preferences = {\n        necessary: true,\n        analytics: true,\n        marketing: false,\n        preferences: true,\n        timestamp: new Date().toISOString(),\n        version: CONSENT_VERSION,\n      };\n\n      const preferencesJson = JSON.stringify(preferences);\n      mockLocalStorage.setItem(CONSENT_STORAGE_KEY, preferencesJson);\n\n      const stored = mockLocalStorage.getItem(CONSENT_STORAGE_KEY);\n      expect(stored).not.toBeNull();\n\n      if (stored) {\n        const parsed = JSON.parse(stored);\n        expect(parsed.necessary).toBe(true);\n        expect(parsed.analytics).toBe(true);\n        expect(parsed.marketing).toBe(false);\n        expect(parsed.preferences).toBe(true);\n        expect(parsed.version).toBe(CONSENT_VERSION);\n      }\n    });\n\n    it('should handle version changes properly', () => {\n      const oldPreferences = {\n        necessary: true,\n        analytics: true,\n        marketing: false,\n        preferences: true,\n        timestamp: new Date().toISOString(),\n        version: '0.9', // Old version\n      };\n\n      mockLocalStorage.setItem(CONSENT_STORAGE_KEY, JSON.stringify(oldPreferences));\n      const stored = mockLocalStorage.getItem(CONSENT_STORAGE_KEY);\n\n      if (stored) {\n        const parsed = JSON.parse(stored);\n        expect(parsed.version).not.toBe(CONSENT_VERSION);\n      }\n    });\n\n    it('should handle invalid JSON gracefully', () => {\n      mockLocalStorage.setItem(CONSENT_STORAGE_KEY, 'invalid-json');\n      const stored = mockLocalStorage.getItem(CONSENT_STORAGE_KEY);\n\n      expect(() => {\n        if (stored) {\n          JSON.parse(stored);\n        }\n      }).toThrow();\n    });\n  });\n\n  describe('Cookie Categories', () => {\n    it('should define all required cookie categories', () => {\n      const expectedCategories = ['necessary', 'analytics', 'marketing', 'preferences'];\n      const cookieCategories = [\n        { id: 'necessary', required: true },\n        { id: 'analytics', required: false },\n        { id: 'marketing', required: false },\n        { id: 'preferences', required: false },\n      ];\n\n      const categoryIds = cookieCategories.map((cat) => cat.id);\n\n      expectedCategories.forEach((category) => {\n        expect(categoryIds).toContain(category);\n      });\n    });\n\n    it('should enforce necessary cookies are required', () => {\n      const necessaryCategory = { id: 'necessary', required: true };\n      expect(necessaryCategory.required).toBe(true);\n    });\n\n    it('should allow optional categories to be disabled', () => {\n      const optionalCategories = [\n        { id: 'analytics', required: false },\n        { id: 'marketing', required: false },\n        { id: 'preferences', required: false },\n      ];\n\n      optionalCategories.forEach((category) => {\n        expect(category.required).toBe(false);\n      });\n    });\n  });\n\n  describe('Consent Preferences', () => {\n    it('should accept all cookies correctly', () => {\n      const acceptAllPreferences = {\n        necessary: true,\n        analytics: true,\n        marketing: true,\n        preferences: true,\n        timestamp: new Date().toISOString(),\n        version: CONSENT_VERSION,\n      };\n\n      mockLocalStorage.setItem(CONSENT_STORAGE_KEY, JSON.stringify(acceptAllPreferences));\n      const stored = mockLocalStorage.getItem(CONSENT_STORAGE_KEY);\n\n      if (stored) {\n        const parsed = JSON.parse(stored);\n        expect(parsed.necessary).toBe(true);\n        expect(parsed.analytics).toBe(true);\n        expect(parsed.marketing).toBe(true);\n        expect(parsed.preferences).toBe(true);\n      }\n    });\n\n    it('should reject optional cookies when only necessary is selected', () => {\n      const rejectAllPreferences = {\n        necessary: true,\n        analytics: false,\n        marketing: false,\n        preferences: false,\n        timestamp: new Date().toISOString(),\n        version: CONSENT_VERSION,\n      };\n\n      mockLocalStorage.setItem(CONSENT_STORAGE_KEY, JSON.stringify(rejectAllPreferences));\n      const stored = mockLocalStorage.getItem(CONSENT_STORAGE_KEY);\n\n      if (stored) {\n        const parsed = JSON.parse(stored);\n        expect(parsed.necessary).toBe(true);\n        expect(parsed.analytics).toBe(false);\n        expect(parsed.marketing).toBe(false);\n        expect(parsed.preferences).toBe(false);\n      }\n    });\n  });\n\n  describe('GDPR Compliance', () => {\n    it('should include required GDPR fields in cookie definitions', () => {\n      const cookieDefinition = {\n        name: 'test-cookie',\n        category: 'analytics',\n        purpose: 'Website analytics',\n        duration: '2 years',\n        provider: 'Test Provider',\n        gdprLawfulBasis: 'Consent',\n      };\n\n      expect(cookieDefinition.purpose).toBeDefined();\n      expect(cookieDefinition.duration).toBeDefined();\n      expect(cookieDefinition.provider).toBeDefined();\n      expect(cookieDefinition.gdprLawfulBasis).toBeDefined();\n    });\n\n    it('should structure deletion requests correctly', () => {\n      const deletionRequest = {\n        type: 'soft' as const,\n        reason: 'User request',\n        exportDataBeforeDeletion: true,\n        notifyUser: true,\n        notifyAdmin: true,\n      };\n\n      expect(['hard', 'soft', 'anonymize']).toContain(deletionRequest.type);\n      expect(typeof deletionRequest.exportDataBeforeDeletion).toBe('boolean');\n      expect(typeof deletionRequest.notifyUser).toBe('boolean');\n      expect(typeof deletionRequest.notifyAdmin).toBe('boolean');\n    });\n  });\n\n  describe('Banner Visibility Logic', () => {\n    it('should show banner when no consent exists', () => {\n      const storedConsent = mockLocalStorage.getItem(CONSENT_STORAGE_KEY);\n      expect(storedConsent).toBeNull();\n    });\n\n    it('should hide banner when valid consent exists', () => {\n      const validConsent = {\n        necessary: true,\n        analytics: false,\n        marketing: false,\n        preferences: false,\n        timestamp: new Date().toISOString(),\n        version: CONSENT_VERSION,\n      };\n\n      mockLocalStorage.setItem(CONSENT_STORAGE_KEY, JSON.stringify(validConsent));\n      const stored = mockLocalStorage.getItem(CONSENT_STORAGE_KEY);\n\n      expect(stored).not.toBeNull();\n    });\n\n    it('should show banner again when version changes', () => {\n      const oldVersionConsent = {\n        necessary: true,\n        analytics: true,\n        marketing: false,\n        preferences: true,\n        timestamp: new Date().toISOString(),\n        version: '0.9', // Old version\n      };\n\n      mockLocalStorage.setItem(CONSENT_STORAGE_KEY, JSON.stringify(oldVersionConsent));\n      const stored = mockLocalStorage.getItem(CONSENT_STORAGE_KEY);\n\n      if (stored) {\n        const parsed = JSON.parse(stored);\n        // Should require new consent due to version mismatch\n        expect(parsed.version).not.toBe(CONSENT_VERSION);\n      }\n    });\n  });\n});\n"],"names":["describe","CONSENT_STORAGE_KEY","CONSENT_VERSION","mockLocalStorage","storage","Map","getItem","key","get","setItem","value","set","removeItem","delete","clear","beforeEach","it","preferences","necessary","analytics","marketing","timestamp","Date","toISOString","version","preferencesJson","JSON","stringify","stored","expect","not","toBeNull","parsed","parse","toBe","oldPreferences","toThrow","expectedCategories","cookieCategories","id","required","categoryIds","map","cat","forEach","category","toContain","necessaryCategory","optionalCategories","acceptAllPreferences","rejectAllPreferences","cookieDefinition","name","purpose","duration","provider","gdprLawfulBasis","toBeDefined","deletionRequest","type","reason","exportDataBeforeDeletion","notifyUser","notifyAdmin","storedConsent","validConsent","oldVersionConsent"],"mappings":"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"}