c823f54f33480b80edfae796e0b3d8fe
/**
 * Cookie Consent Integration Tests
 *
 * GDPR uyumlu çerez onayı sistemi için temel entegrasyon testleri
 */ "use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
const _globals = require("@jest/globals");
(0, _globals.describe)('Cookie Consent System', ()=>{
    const CONSENT_STORAGE_KEY = 'cookie-consent';
    const CONSENT_VERSION = '1.0';
    // Mock localStorage for testing
    const mockLocalStorage = {
        storage: new Map(),
        getItem: function(key) {
            return this.storage.get(key) || null;
        },
        setItem: function(key, value) {
            this.storage.set(key, value);
        },
        removeItem: function(key) {
            this.storage.delete(key);
        },
        clear: function() {
            this.storage.clear();
        }
    };
    (0, _globals.beforeEach)(()=>{
        mockLocalStorage.clear();
    });
    (0, _globals.describe)('Cookie Consent Storage', ()=>{
        (0, _globals.it)('should store cookie preferences correctly', ()=>{
            const preferences = {
                necessary: true,
                analytics: true,
                marketing: false,
                preferences: true,
                timestamp: new Date().toISOString(),
                version: CONSENT_VERSION
            };
            const preferencesJson = JSON.stringify(preferences);
            mockLocalStorage.setItem(CONSENT_STORAGE_KEY, preferencesJson);
            const stored = mockLocalStorage.getItem(CONSENT_STORAGE_KEY);
            (0, _globals.expect)(stored).not.toBeNull();
            if (stored) {
                const parsed = JSON.parse(stored);
                (0, _globals.expect)(parsed.necessary).toBe(true);
                (0, _globals.expect)(parsed.analytics).toBe(true);
                (0, _globals.expect)(parsed.marketing).toBe(false);
                (0, _globals.expect)(parsed.preferences).toBe(true);
                (0, _globals.expect)(parsed.version).toBe(CONSENT_VERSION);
            }
        });
        (0, _globals.it)('should handle version changes properly', ()=>{
            const oldPreferences = {
                necessary: true,
                analytics: true,
                marketing: false,
                preferences: true,
                timestamp: new Date().toISOString(),
                version: '0.9'
            };
            mockLocalStorage.setItem(CONSENT_STORAGE_KEY, JSON.stringify(oldPreferences));
            const stored = mockLocalStorage.getItem(CONSENT_STORAGE_KEY);
            if (stored) {
                const parsed = JSON.parse(stored);
                (0, _globals.expect)(parsed.version).not.toBe(CONSENT_VERSION);
            }
        });
        (0, _globals.it)('should handle invalid JSON gracefully', ()=>{
            mockLocalStorage.setItem(CONSENT_STORAGE_KEY, 'invalid-json');
            const stored = mockLocalStorage.getItem(CONSENT_STORAGE_KEY);
            (0, _globals.expect)(()=>{
                if (stored) {
                    JSON.parse(stored);
                }
            }).toThrow();
        });
    });
    (0, _globals.describe)('Cookie Categories', ()=>{
        (0, _globals.it)('should define all required cookie categories', ()=>{
            const expectedCategories = [
                'necessary',
                'analytics',
                'marketing',
                'preferences'
            ];
            const cookieCategories = [
                {
                    id: 'necessary',
                    required: true
                },
                {
                    id: 'analytics',
                    required: false
                },
                {
                    id: 'marketing',
                    required: false
                },
                {
                    id: 'preferences',
                    required: false
                }
            ];
            const categoryIds = cookieCategories.map((cat)=>cat.id);
            expectedCategories.forEach((category)=>{
                (0, _globals.expect)(categoryIds).toContain(category);
            });
        });
        (0, _globals.it)('should enforce necessary cookies are required', ()=>{
            const necessaryCategory = {
                id: 'necessary',
                required: true
            };
            (0, _globals.expect)(necessaryCategory.required).toBe(true);
        });
        (0, _globals.it)('should allow optional categories to be disabled', ()=>{
            const optionalCategories = [
                {
                    id: 'analytics',
                    required: false
                },
                {
                    id: 'marketing',
                    required: false
                },
                {
                    id: 'preferences',
                    required: false
                }
            ];
            optionalCategories.forEach((category)=>{
                (0, _globals.expect)(category.required).toBe(false);
            });
        });
    });
    (0, _globals.describe)('Consent Preferences', ()=>{
        (0, _globals.it)('should accept all cookies correctly', ()=>{
            const acceptAllPreferences = {
                necessary: true,
                analytics: true,
                marketing: true,
                preferences: true,
                timestamp: new Date().toISOString(),
                version: CONSENT_VERSION
            };
            mockLocalStorage.setItem(CONSENT_STORAGE_KEY, JSON.stringify(acceptAllPreferences));
            const stored = mockLocalStorage.getItem(CONSENT_STORAGE_KEY);
            if (stored) {
                const parsed = JSON.parse(stored);
                (0, _globals.expect)(parsed.necessary).toBe(true);
                (0, _globals.expect)(parsed.analytics).toBe(true);
                (0, _globals.expect)(parsed.marketing).toBe(true);
                (0, _globals.expect)(parsed.preferences).toBe(true);
            }
        });
        (0, _globals.it)('should reject optional cookies when only necessary is selected', ()=>{
            const rejectAllPreferences = {
                necessary: true,
                analytics: false,
                marketing: false,
                preferences: false,
                timestamp: new Date().toISOString(),
                version: CONSENT_VERSION
            };
            mockLocalStorage.setItem(CONSENT_STORAGE_KEY, JSON.stringify(rejectAllPreferences));
            const stored = mockLocalStorage.getItem(CONSENT_STORAGE_KEY);
            if (stored) {
                const parsed = JSON.parse(stored);
                (0, _globals.expect)(parsed.necessary).toBe(true);
                (0, _globals.expect)(parsed.analytics).toBe(false);
                (0, _globals.expect)(parsed.marketing).toBe(false);
                (0, _globals.expect)(parsed.preferences).toBe(false);
            }
        });
    });
    (0, _globals.describe)('GDPR Compliance', ()=>{
        (0, _globals.it)('should include required GDPR fields in cookie definitions', ()=>{
            const cookieDefinition = {
                name: 'test-cookie',
                category: 'analytics',
                purpose: 'Website analytics',
                duration: '2 years',
                provider: 'Test Provider',
                gdprLawfulBasis: 'Consent'
            };
            (0, _globals.expect)(cookieDefinition.purpose).toBeDefined();
            (0, _globals.expect)(cookieDefinition.duration).toBeDefined();
            (0, _globals.expect)(cookieDefinition.provider).toBeDefined();
            (0, _globals.expect)(cookieDefinition.gdprLawfulBasis).toBeDefined();
        });
        (0, _globals.it)('should structure deletion requests correctly', ()=>{
            const deletionRequest = {
                type: 'soft',
                reason: 'User request',
                exportDataBeforeDeletion: true,
                notifyUser: true,
                notifyAdmin: true
            };
            (0, _globals.expect)([
                'hard',
                'soft',
                'anonymize'
            ]).toContain(deletionRequest.type);
            (0, _globals.expect)(typeof deletionRequest.exportDataBeforeDeletion).toBe('boolean');
            (0, _globals.expect)(typeof deletionRequest.notifyUser).toBe('boolean');
            (0, _globals.expect)(typeof deletionRequest.notifyAdmin).toBe('boolean');
        });
    });
    (0, _globals.describe)('Banner Visibility Logic', ()=>{
        (0, _globals.it)('should show banner when no consent exists', ()=>{
            const storedConsent = mockLocalStorage.getItem(CONSENT_STORAGE_KEY);
            (0, _globals.expect)(storedConsent).toBeNull();
        });
        (0, _globals.it)('should hide banner when valid consent exists', ()=>{
            const validConsent = {
                necessary: true,
                analytics: false,
                marketing: false,
                preferences: false,
                timestamp: new Date().toISOString(),
                version: CONSENT_VERSION
            };
            mockLocalStorage.setItem(CONSENT_STORAGE_KEY, JSON.stringify(validConsent));
            const stored = mockLocalStorage.getItem(CONSENT_STORAGE_KEY);
            (0, _globals.expect)(stored).not.toBeNull();
        });
        (0, _globals.it)('should show banner again when version changes', ()=>{
            const oldVersionConsent = {
                necessary: true,
                analytics: true,
                marketing: false,
                preferences: true,
                timestamp: new Date().toISOString(),
                version: '0.9'
            };
            mockLocalStorage.setItem(CONSENT_STORAGE_KEY, JSON.stringify(oldVersionConsent));
            const stored = mockLocalStorage.getItem(CONSENT_STORAGE_KEY);
            if (stored) {
                const parsed = JSON.parse(stored);
                // Should require new consent due to version mismatch
                (0, _globals.expect)(parsed.version).not.toBe(CONSENT_VERSION);
            }
        });
    });
});

//# sourceMappingURL=data:application/json;base64,