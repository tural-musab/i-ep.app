{"version":3,"sources":["/Users/turanmusabosman/Projects/i-ep.app/jest.setup.integration.js"],"sourcesContent":["/* eslint-disable @typescript-eslint/no-require-imports */\n/**\n * ƒ∞-EP.APP - Integration Test Setup Configuration\n * Bu dosya integration testleri i√ßin Jest setup'ƒ±nƒ± yapar\n */\n\n// Set up test timeout for integration tests\njest.setTimeout(30000); // 30 seconds for database operations\n\n// Global test utilities and mocks for integration tests\nglobal.console = {\n  ...console,\n  // Less verbose logging in integration tests\n  log: process.env.JEST_VERBOSE === 'true' ? console.log : jest.fn(),\n  debug: jest.fn(), // Always mock debug\n  info: process.env.JEST_VERBOSE === 'true' ? console.info : jest.fn(),\n  warn: console.warn, // Always show warnings\n  error: console.error, // Always show errors\n};\n\n// Mock external services for integration tests (but keep DB/Redis real)\njest.mock('@sentry/nextjs', () => ({\n  init: jest.fn(),\n  captureException: jest.fn(),\n  captureMessage: jest.fn(),\n  withScope: jest.fn((callback) => callback({ setTag: jest.fn(), setLevel: jest.fn() })),\n}));\n\n// Mock email services in integration tests\njest.mock('nodemailer', () => ({\n  createTransport: jest.fn(() => ({\n    sendMail: jest.fn().mockResolvedValue({ messageId: 'test-message-id' }),\n  })),\n}));\n\n// Mock payment services in integration tests\njest.mock('iyzipay', () => ({\n  init: jest.fn(() => ({\n    payment: {\n      create: jest.fn().mockResolvedValue({ status: 'success' }),\n    },\n  })),\n}));\n\n// Setup global error handling for integration tests\nprocess.on('unhandledRejection', (reason, promise) => {\n  console.error('Integration Test - Unhandled Rejection at:', promise, 'reason:', reason);\n});\n\n// Global test helpers for integration tests\nglobal.testHelpers = {\n  // Database connection check utility\n  async checkDatabaseConnection() {\n    const { createClient } = require('@supabase/supabase-js');\n    const supabase = createClient(\n      process.env.NEXT_PUBLIC_SUPABASE_URL,\n      process.env.SUPABASE_SERVICE_ROLE_KEY\n    );\n    \n    try {\n      const { data, error } = await supabase.from('users').select('id').limit(1);\n      return { connected: !error, error };\n    } catch (err) {\n      return { connected: false, error: err };\n    }\n  },\n\n  // Redis connection check utility\n  async checkRedisConnection() {\n    try {\n      const { Redis } = require('@upstash/redis');\n      const redis = new Redis({\n        url: process.env.REDIS_URL || process.env.UPSTASH_REDIS_URL,\n        token: process.env.UPSTASH_REDIS_TOKEN || 'test-token',\n      });\n      \n      await redis.set('test-key', 'test-value', { ex: 1 });\n      const result = await redis.get('test-key');\n      await redis.del('test-key');\n      \n      return { connected: result === 'test-value', error: null };\n    } catch (err) {\n      return { connected: false, error: err };\n    }\n  },\n\n  // Test tenant ID generator\n  getTestTenantId() {\n    return process.env.TEST_TENANT_ID || 'aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa';\n  },\n\n  // Test user data generator\n  generateTestUser(role = 'student') {\n    const baseUser = {\n      id: `test-${role}-${Date.now()}`,\n      email: `test-${role}@i-ep.app`,\n      tenant_id: this.getTestTenantId(),\n      role,\n      created_at: new Date().toISOString(),\n      updated_at: new Date().toISOString(),\n    };\n\n    switch (role) {\n      case 'admin':\n        return { ...baseUser, name: 'Test Admin', permissions: ['all'] };\n      case 'teacher':\n        return { ...baseUser, name: 'Test Teacher', permissions: ['grade', 'assignment'] };\n      case 'student':\n        return { ...baseUser, name: 'Test Student', permissions: ['view'] };\n      case 'parent':\n        return { ...baseUser, name: 'Test Parent', permissions: ['view_child'] };\n      default:\n        return baseUser;\n    }\n  }\n};\n\nconsole.log('üîß Integration test setup completed');\nconsole.log('üéØ Test environment: integration');\nconsole.log('‚è±Ô∏è  Test timeout: 30 seconds');\nconsole.log('üõ†Ô∏è  Global test helpers available');"],"names":["jest","mock","init","fn","captureException","captureMessage","withScope","callback","setTag","setLevel","createTransport","sendMail","mockResolvedValue","messageId","payment","create","status","setTimeout","global","console","log","process","env","JEST_VERBOSE","debug","info","warn","error","on","reason","promise","testHelpers","checkDatabaseConnection","createClient","require","supabase","NEXT_PUBLIC_SUPABASE_URL","SUPABASE_SERVICE_ROLE_KEY","data","from","select","limit","connected","err","checkRedisConnection","Redis","redis","url","REDIS_URL","UPSTASH_REDIS_URL","token","UPSTASH_REDIS_TOKEN","set","ex","result","get","del","getTestTenantId","TEST_TENANT_ID","generateTestUser","role","baseUser","id","Date","now","email","tenant_id","created_at","toISOString","updated_at","name","permissions"],"mappings":"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"}