13913ebf974e6f9c23f0cd6b91031409
/**
 * Assignment API Endpoints
 * Ä°-EP.APP - Assignment Management System
 * Multi-tenant architecture with proper authentication and authorization
 */ "use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    DELETE: function() {
        return DELETE;
    },
    GET: function() {
        return GET;
    },
    POST: function() {
        return POST;
    },
    PUT: function() {
        return PUT;
    }
});
const _server = require("next/server");
const _zod = require("zod");
const _assignmentrepository = require("../../../lib/repository/assignment-repository");
// Modern authentication pattern
// Validation schema for assignment creation
const CreateAssignmentSchema = _zod.z.object({
    title: _zod.z.string().min(1, 'Title is required').max(255, 'Title too long'),
    description: _zod.z.string().optional(),
    type: _zod.z.enum([
        'homework',
        'exam',
        'project',
        'quiz',
        'presentation'
    ]),
    subject: _zod.z.string().min(1, 'Subject is required').max(100, 'Subject too long'),
    class_id: _zod.z.string().uuid('Invalid class ID'),
    teacher_id: _zod.z.string().uuid('Invalid teacher ID'),
    due_date: _zod.z.string().datetime('Invalid due date'),
    max_score: _zod.z.number().min(1, 'Max score must be positive').max(1000, 'Max score too high'),
    instructions: _zod.z.string().optional(),
    attachments: _zod.z.array(_zod.z.string()).optional(),
    rubric: _zod.z.array(_zod.z.object({
        criteria: _zod.z.string(),
        points: _zod.z.number(),
        description: _zod.z.string()
    })).optional(),
    metadata: _zod.z.record(_zod.z.any()).optional()
});
// Validation schema for assignment updates
const UpdateAssignmentSchema = CreateAssignmentSchema.partial().extend({
    status: _zod.z.enum([
        'draft',
        'published',
        'completed',
        'archived'
    ]).optional(),
    is_graded: _zod.z.boolean().optional()
});
// Query parameters schema
const QueryParamsSchema = _zod.z.object({
    page: _zod.z.string().optional().transform((val)=>val ? parseInt(val) : 1),
    limit: _zod.z.string().optional().transform((val)=>val ? parseInt(val) : 10),
    class_id: _zod.z.string().uuid().optional(),
    teacher_id: _zod.z.string().uuid().optional(),
    type: _zod.z.enum([
        'homework',
        'exam',
        'project',
        'quiz',
        'presentation'
    ]).optional(),
    status: _zod.z.enum([
        'draft',
        'published',
        'completed',
        'archived'
    ]).optional(),
    subject: _zod.z.string().optional(),
    due_date_from: _zod.z.string().datetime().optional(),
    due_date_to: _zod.z.string().datetime().optional(),
    search: _zod.z.string().optional()
});
async function GET(request) {
    try {
        // Extract authentication headers
        const userEmail = request.headers.get('X-User-Email') || 'teacher1@demo.local';
        const userId = request.headers.get('X-User-ID') || 'demo-teacher-001';
        const tenantId = request.headers.get('x-tenant-id') || 'localhost-tenant';
        console.log('ðŸ”§ Assignments API - Auth headers:', {
            userEmail,
            userId,
            tenantId
        });
        // For demo, return mock assignment data
        const mockAssignments = [
            {
                id: 'assignment-001',
                title: 'TÃ¼rkÃ§e Kompozisyon - Okulum',
                description: 'Okulunuz hakkÄ±nda 200 kelimelik bir kompozisyon yazÄ±nÄ±z.',
                type: 'homework',
                subject: 'TÃ¼rkÃ§e',
                class_id: 'class-5a',
                teacher_id: userId,
                due_date: new Date(Date.now() + 7 * 24 * 60 * 60 * 1000).toISOString(),
                max_score: 100,
                instructions: 'Kompozisyonunuzda giriÅŸ, geliÅŸme ve sonuÃ§ bÃ¶lÃ¼mleri olsun.',
                status: 'published',
                is_graded: false,
                tenant_id: tenantId,
                created_at: new Date().toISOString(),
                updated_at: new Date().toISOString()
            },
            {
                id: 'assignment-002',
                title: 'Matematik - Kesirler Konusu',
                description: 'Kesirlerle toplama ve Ã§Ä±karma iÅŸlemleri Ã§alÄ±ÅŸma kaÄŸÄ±dÄ±.',
                type: 'homework',
                subject: 'Matematik',
                class_id: 'class-5a',
                teacher_id: userId,
                due_date: new Date(Date.now() + 3 * 24 * 60 * 60 * 1000).toISOString(),
                max_score: 50,
                instructions: 'TÃ¼m iÅŸlemleri gÃ¶steriniz.',
                status: 'published',
                is_graded: false,
                tenant_id: tenantId,
                created_at: new Date().toISOString(),
                updated_at: new Date().toISOString()
            }
        ];
        const result = {
            data: mockAssignments,
            pagination: {
                total: mockAssignments.length,
                page: 1,
                limit: 10,
                totalPages: 1,
                hasNextPage: false,
                hasPreviousPage: false
            }
        };
        console.log('âœ… Assignments API - Returning mock data:', result);
        return _server.NextResponse.json(result);
    } catch (error) {
        console.error('Error fetching assignments:', error);
        if (error instanceof _zod.z.ZodError) {
            return _server.NextResponse.json({
                error: 'Invalid query parameters',
                details: error.errors
            }, {
                status: 400
            });
        }
        return _server.NextResponse.json({
            error: 'Internal server error'
        }, {
            status: 500
        });
    }
}
async function POST(request) {
    try {
        // Verify authentication and require teacher/admin role
        const user = await requireRole(request, [
            'teacher',
            'admin',
            'super_admin'
        ]);
        if (!user) {
            return _server.NextResponse.json({
                error: 'Authentication required or insufficient permissions'
            }, {
                status: 401
            });
        }
        const tenantId = user.tenantId;
        // Parse and validate request body
        const body = await request.json();
        const validatedData = CreateAssignmentSchema.parse(body);
        // Initialize repository
        const assignmentRepo = new _assignmentrepository.AssignmentRepository(tenantId);
        // Create assignment with tenant context
        const assignmentData = {
            ...validatedData,
            tenant_id: tenantId,
            created_by: user.id,
            status: 'draft',
            is_graded: false
        };
        const newAssignment = await assignmentRepo.create(assignmentData);
        return _server.NextResponse.json(newAssignment, {
            status: 201
        });
    } catch (error) {
        console.error('Error creating assignment:', error);
        if (error instanceof _zod.z.ZodError) {
            return _server.NextResponse.json({
                error: 'Invalid request data',
                details: error.errors
            }, {
                status: 400
            });
        }
        return _server.NextResponse.json({
            error: 'Internal server error'
        }, {
            status: 500
        });
    }
}
async function PUT(request) {
    try {
        // Verify authentication and require teacher/admin role
        const user = await requireRole(request, [
            'teacher',
            'admin',
            'super_admin'
        ]);
        if (!user) {
            return _server.NextResponse.json({
                error: 'Authentication required or insufficient permissions'
            }, {
                status: 401
            });
        }
        const tenantId = user.tenantId;
        // Parse request body
        const body = await request.json();
        const { ids, updates } = _zod.z.object({
            ids: _zod.z.array(_zod.z.string().uuid()),
            updates: UpdateAssignmentSchema
        }).parse(body);
        // Initialize repository
        const assignmentRepo = new _assignmentrepository.AssignmentRepository(tenantId);
        // TODO: Implement bulk update functionality
        // For now, return not implemented error
        return _server.NextResponse.json({
            error: 'Bulk update not implemented yet'
        }, {
            status: 501
        });
    } catch (error) {
        console.error('Error bulk updating assignments:', error);
        if (error instanceof _zod.z.ZodError) {
            return _server.NextResponse.json({
                error: 'Invalid request data',
                details: error.errors
            }, {
                status: 400
            });
        }
        return _server.NextResponse.json({
            error: 'Internal server error'
        }, {
            status: 500
        });
    }
}
async function DELETE(request) {
    try {
        // Verify authentication and require teacher/admin role
        const user = await requireRole(request, [
            'teacher',
            'admin',
            'super_admin'
        ]);
        if (!user) {
            return _server.NextResponse.json({
                error: 'Authentication required or insufficient permissions'
            }, {
                status: 401
            });
        }
        const tenantId = user.tenantId;
        // Parse request body
        const body = await request.json();
        const { ids } = _zod.z.object({
            ids: _zod.z.array(_zod.z.string().uuid())
        }).parse(body);
        // Initialize repository
        const assignmentRepo = new _assignmentrepository.AssignmentRepository(tenantId);
        // TODO: Implement bulk delete functionality
        // For now, return not implemented error
        return _server.NextResponse.json({
            error: 'Bulk delete not implemented yet'
        }, {
            status: 501
        });
    } catch (error) {
        console.error('Error bulk deleting assignments:', error);
        if (error instanceof _zod.z.ZodError) {
            return _server.NextResponse.json({
                error: 'Invalid request data',
                details: error.errors
            }, {
                status: 400
            });
        }
        return _server.NextResponse.json({
            error: 'Internal server error'
        }, {
            status: 500
        });
    }
}

//# sourceMappingURL=data:application/json;base64,