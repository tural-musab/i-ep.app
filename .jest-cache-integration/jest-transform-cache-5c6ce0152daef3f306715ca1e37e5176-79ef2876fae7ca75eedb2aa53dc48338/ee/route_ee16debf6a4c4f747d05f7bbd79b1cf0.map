{"version":3,"sources":["/Users/turanmusabosman/Projects/i-ep.app/src/app/api/assignments/route.ts"],"sourcesContent":["/**\n * Assignment API Endpoints\n * Ä°-EP.APP - Assignment Management System\n * Multi-tenant architecture with proper authentication and authorization\n */\n\nimport { NextRequest, NextResponse } from 'next/server';\nimport { z } from 'zod';\nimport { AssignmentRepository } from '@/lib/repository/assignment-repository';\nimport { requireRole } from '@/lib/auth/server-session';\n// Modern authentication pattern\n\n// Validation schema for assignment creation\nconst CreateAssignmentSchema = z.object({\n  title: z.string().min(1, 'Title is required').max(255, 'Title too long'),\n  description: z.string().optional(),\n  type: z.enum(['homework', 'exam', 'project', 'quiz', 'presentation']),\n  subject: z.string().min(1, 'Subject is required').max(100, 'Subject too long'),\n  class_id: z.string().uuid('Invalid class ID'),\n  teacher_id: z.string().uuid('Invalid teacher ID'),\n  due_date: z.string().datetime('Invalid due date'),\n  max_score: z.number().min(1, 'Max score must be positive').max(1000, 'Max score too high'),\n  instructions: z.string().optional(),\n  attachments: z.array(z.string()).optional(),\n  rubric: z\n    .array(\n      z.object({\n        criteria: z.string(),\n        points: z.number(),\n        description: z.string(),\n      })\n    )\n    .optional(),\n  metadata: z.record(z.any()).optional(),\n});\n\n// Validation schema for assignment updates\nconst UpdateAssignmentSchema = CreateAssignmentSchema.partial().extend({\n  status: z.enum(['draft', 'published', 'completed', 'archived']).optional(),\n  is_graded: z.boolean().optional(),\n});\n\n// Query parameters schema\nconst QueryParamsSchema = z.object({\n  page: z\n    .string()\n    .optional()\n    .transform((val) => (val ? parseInt(val) : 1)),\n  limit: z\n    .string()\n    .optional()\n    .transform((val) => (val ? parseInt(val) : 10)),\n  class_id: z.string().uuid().optional(),\n  teacher_id: z.string().uuid().optional(),\n  type: z.enum(['homework', 'exam', 'project', 'quiz', 'presentation']).optional(),\n  status: z.enum(['draft', 'published', 'completed', 'archived']).optional(),\n  subject: z.string().optional(),\n  due_date_from: z.string().datetime().optional(),\n  due_date_to: z.string().datetime().optional(),\n  search: z.string().optional(),\n});\n\n/**\n * GET /api/assignments\n * List assignments with filtering, pagination, and search\n */\nexport async function GET(request: NextRequest) {\n  try {\n    // Extract authentication headers\n    const userEmail = request.headers.get('X-User-Email') || 'teacher1@demo.local';\n    const userId = request.headers.get('X-User-ID') || 'demo-teacher-001';\n    const tenantId = request.headers.get('x-tenant-id') || 'localhost-tenant';\n\n    console.log('ðŸ”§ Assignments API - Auth headers:', { userEmail, userId, tenantId });\n\n    // For demo, return mock assignment data\n    const mockAssignments = [\n      {\n        id: 'assignment-001',\n        title: 'TÃ¼rkÃ§e Kompozisyon - Okulum',\n        description: 'Okulunuz hakkÄ±nda 200 kelimelik bir kompozisyon yazÄ±nÄ±z.',\n        type: 'homework',\n        subject: 'TÃ¼rkÃ§e',\n        class_id: 'class-5a',\n        teacher_id: userId,\n        due_date: new Date(Date.now() + 7 * 24 * 60 * 60 * 1000).toISOString(), // 7 days from now\n        max_score: 100,\n        instructions: 'Kompozisyonunuzda giriÅŸ, geliÅŸme ve sonuÃ§ bÃ¶lÃ¼mleri olsun.',\n        status: 'published',\n        is_graded: false,\n        tenant_id: tenantId,\n        created_at: new Date().toISOString(),\n        updated_at: new Date().toISOString()\n      },\n      {\n        id: 'assignment-002',\n        title: 'Matematik - Kesirler Konusu',\n        description: 'Kesirlerle toplama ve Ã§Ä±karma iÅŸlemleri Ã§alÄ±ÅŸma kaÄŸÄ±dÄ±.',\n        type: 'homework',\n        subject: 'Matematik',\n        class_id: 'class-5a',\n        teacher_id: userId,\n        due_date: new Date(Date.now() + 3 * 24 * 60 * 60 * 1000).toISOString(), // 3 days from now\n        max_score: 50,\n        instructions: 'TÃ¼m iÅŸlemleri gÃ¶steriniz.',\n        status: 'published',\n        is_graded: false,\n        tenant_id: tenantId,\n        created_at: new Date().toISOString(),\n        updated_at: new Date().toISOString()\n      }\n    ];\n\n    const result = {\n      data: mockAssignments,\n      pagination: {\n        total: mockAssignments.length,\n        page: 1,\n        limit: 10,\n        totalPages: 1,\n        hasNextPage: false,\n        hasPreviousPage: false\n      }\n    };\n\n    console.log('âœ… Assignments API - Returning mock data:', result);\n    return NextResponse.json(result);\n  } catch (error) {\n    console.error('Error fetching assignments:', error);\n\n    if (error instanceof z.ZodError) {\n      return NextResponse.json(\n        { error: 'Invalid query parameters', details: error.errors },\n        { status: 400 }\n      );\n    }\n\n    return NextResponse.json({ error: 'Internal server error' }, { status: 500 });\n  }\n}\n\n/**\n * POST /api/assignments\n * Create a new assignment\n */\nexport async function POST(request: NextRequest) {\n  try {\n    // Verify authentication and require teacher/admin role\n    const user = await requireRole(request, ['teacher', 'admin', 'super_admin']);\n    if (!user) {\n      return NextResponse.json(\n        { error: 'Authentication required or insufficient permissions' },\n        { status: 401 }\n      );\n    }\n\n    const tenantId = user.tenantId;\n\n    // Parse and validate request body\n    const body = await request.json();\n    const validatedData = CreateAssignmentSchema.parse(body);\n\n    // Initialize repository\n    const assignmentRepo = new AssignmentRepository(tenantId);\n\n    // Create assignment with tenant context\n    const assignmentData = {\n      ...validatedData,\n      tenant_id: tenantId,\n      created_by: user.id,\n      status: 'draft' as const,\n      is_graded: false, // Add missing required field\n    };\n\n    const newAssignment = await assignmentRepo.create(assignmentData);\n\n    return NextResponse.json(newAssignment, { status: 201 });\n  } catch (error) {\n    console.error('Error creating assignment:', error);\n\n    if (error instanceof z.ZodError) {\n      return NextResponse.json(\n        { error: 'Invalid request data', details: error.errors },\n        { status: 400 }\n      );\n    }\n\n    return NextResponse.json({ error: 'Internal server error' }, { status: 500 });\n  }\n}\n\n/**\n * PUT /api/assignments\n * Bulk update assignments\n */\nexport async function PUT(request: NextRequest) {\n  try {\n    // Verify authentication and require teacher/admin role\n    const user = await requireRole(request, ['teacher', 'admin', 'super_admin']);\n    if (!user) {\n      return NextResponse.json(\n        { error: 'Authentication required or insufficient permissions' },\n        { status: 401 }\n      );\n    }\n\n    const tenantId = user.tenantId;\n\n    // Parse request body\n    const body = await request.json();\n    const { ids, updates } = z\n      .object({\n        ids: z.array(z.string().uuid()),\n        updates: UpdateAssignmentSchema,\n      })\n      .parse(body);\n\n    // Initialize repository\n    const assignmentRepo = new AssignmentRepository(tenantId);\n\n    // TODO: Implement bulk update functionality\n    // For now, return not implemented error\n    return NextResponse.json({ error: 'Bulk update not implemented yet' }, { status: 501 });\n  } catch (error) {\n    console.error('Error bulk updating assignments:', error);\n\n    if (error instanceof z.ZodError) {\n      return NextResponse.json(\n        { error: 'Invalid request data', details: error.errors },\n        { status: 400 }\n      );\n    }\n\n    return NextResponse.json({ error: 'Internal server error' }, { status: 500 });\n  }\n}\n\n/**\n * DELETE /api/assignments\n * Bulk delete assignments\n */\nexport async function DELETE(request: NextRequest) {\n  try {\n    // Verify authentication and require teacher/admin role\n    const user = await requireRole(request, ['teacher', 'admin', 'super_admin']);\n    if (!user) {\n      return NextResponse.json(\n        { error: 'Authentication required or insufficient permissions' },\n        { status: 401 }\n      );\n    }\n\n    const tenantId = user.tenantId;\n\n    // Parse request body\n    const body = await request.json();\n    const { ids } = z\n      .object({\n        ids: z.array(z.string().uuid()),\n      })\n      .parse(body);\n\n    // Initialize repository\n    const assignmentRepo = new AssignmentRepository(tenantId);\n\n    // TODO: Implement bulk delete functionality\n    // For now, return not implemented error\n    return NextResponse.json({ error: 'Bulk delete not implemented yet' }, { status: 501 });\n  } catch (error) {\n    console.error('Error bulk deleting assignments:', error);\n\n    if (error instanceof z.ZodError) {\n      return NextResponse.json(\n        { error: 'Invalid request data', details: error.errors },\n        { status: 400 }\n      );\n    }\n\n    return NextResponse.json({ error: 'Internal server error' }, { status: 500 });\n  }\n}\n"],"names":["DELETE","GET","POST","PUT","CreateAssignmentSchema","z","object","title","string","min","max","description","optional","type","enum","subject","class_id","uuid","teacher_id","due_date","datetime","max_score","number","instructions","attachments","array","rubric","criteria","points","metadata","record","any","UpdateAssignmentSchema","partial","extend","status","is_graded","boolean","QueryParamsSchema","page","transform","val","parseInt","limit","due_date_from","due_date_to","search","request","userEmail","headers","get","userId","tenantId","console","log","mockAssignments","id","Date","now","toISOString","tenant_id","created_at","updated_at","result","data","pagination","total","length","totalPages","hasNextPage","hasPreviousPage","NextResponse","json","error","ZodError","details","errors","user","requireRole","body","validatedData","parse","assignmentRepo","AssignmentRepository","assignmentData","created_by","newAssignment","create","ids","updates"],"mappings":"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"}