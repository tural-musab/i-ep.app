69869e27f6efcb8b0fa1de1f049dde2d
/* eslint-disable @typescript-eslint/no-require-imports */
/**
 * ƒ∞-EP.APP - Integration Tests Global Setup
 * T√ºm integration testleri √∂ncesinde √ßalƒ±≈üƒ±r
 */

const {
  IntegrationTestManager
} = require('./integration-test-setup');
module.exports = async () => {
  console.log('üöÄ Starting integration tests global setup...');
  const startTime = Date.now();
  try {
    // Create test manager instance
    const testManager = new IntegrationTestManager();

    // Test database connection
    console.log('üîç Testing database connection...');
    const dbTest = await testManager.testDatabaseConnection();
    if (!dbTest.success) {
      throw new Error(`Database connection failed: ${dbTest.error}`);
    }
    console.log('‚úÖ Database connection successful');

    // Test Redis connection
    console.log('üîç Testing Redis connection...');
    const redisTest = await testManager.testRedisConnection();
    if (!redisTest.success) {
      console.warn('‚ö†Ô∏è  Redis connection failed:', redisTest.error);
      console.warn('‚ö†Ô∏è  Some tests may fail if they require Redis');
    } else {
      console.log('‚úÖ Redis connection successful');
    }

    // Setup clean test environment
    console.log('üßπ Setting up clean test environment...');
    await testManager.setupTestEnvironment();

    // Store global test manager for cleanup
    global.__INTEGRATION_TEST_MANAGER__ = testManager;
    const endTime = Date.now();
    console.log(`‚úÖ Integration tests global setup completed in ${endTime - startTime}ms`);
    console.log('üéØ Environment ready for integration testing');
  } catch (error) {
    console.error('‚ùå Integration tests global setup failed:', error.message);
    console.error('');
    console.error('üîß Common solutions:');
    console.error('   1. Make sure Supabase is running: npx supabase start');
    console.error('   2. Make sure Redis is running: redis-server');
    console.error('   3. Check .env.test file has correct DATABASE_URL and REDIS_URL');
    console.error('   4. Verify test database is accessible');
    console.error('');

    // Don't fail immediately, let individual tests handle connection errors
    console.warn('‚ö†Ô∏è  Continuing with setup warnings...');
  }
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJJbnRlZ3JhdGlvblRlc3RNYW5hZ2VyIiwicmVxdWlyZSIsIm1vZHVsZSIsImV4cG9ydHMiLCJjb25zb2xlIiwibG9nIiwic3RhcnRUaW1lIiwiRGF0ZSIsIm5vdyIsInRlc3RNYW5hZ2VyIiwiZGJUZXN0IiwidGVzdERhdGFiYXNlQ29ubmVjdGlvbiIsInN1Y2Nlc3MiLCJFcnJvciIsImVycm9yIiwicmVkaXNUZXN0IiwidGVzdFJlZGlzQ29ubmVjdGlvbiIsIndhcm4iLCJzZXR1cFRlc3RFbnZpcm9ubWVudCIsImdsb2JhbCIsIl9fSU5URUdSQVRJT05fVEVTVF9NQU5BR0VSX18iLCJlbmRUaW1lIiwibWVzc2FnZSJdLCJzb3VyY2VzIjpbImludGVncmF0aW9uLWdsb2JhbC1zZXR1cC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKiBlc2xpbnQtZGlzYWJsZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tcmVxdWlyZS1pbXBvcnRzICovXG4vKipcbiAqIMSwLUVQLkFQUCAtIEludGVncmF0aW9uIFRlc3RzIEdsb2JhbCBTZXR1cFxuICogVMO8bSBpbnRlZ3JhdGlvbiB0ZXN0bGVyaSDDtm5jZXNpbmRlIMOnYWzEscWfxLFyXG4gKi9cblxuY29uc3QgeyBJbnRlZ3JhdGlvblRlc3RNYW5hZ2VyIH0gPSByZXF1aXJlKCcuL2ludGVncmF0aW9uLXRlc3Qtc2V0dXAnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBhc3luYyAoKSA9PiB7XG4gIGNvbnNvbGUubG9nKCfwn5qAIFN0YXJ0aW5nIGludGVncmF0aW9uIHRlc3RzIGdsb2JhbCBzZXR1cC4uLicpO1xuICBcbiAgY29uc3Qgc3RhcnRUaW1lID0gRGF0ZS5ub3coKTtcbiAgXG4gIHRyeSB7XG4gICAgLy8gQ3JlYXRlIHRlc3QgbWFuYWdlciBpbnN0YW5jZVxuICAgIGNvbnN0IHRlc3RNYW5hZ2VyID0gbmV3IEludGVncmF0aW9uVGVzdE1hbmFnZXIoKTtcbiAgICBcbiAgICAvLyBUZXN0IGRhdGFiYXNlIGNvbm5lY3Rpb25cbiAgICBjb25zb2xlLmxvZygn8J+UjSBUZXN0aW5nIGRhdGFiYXNlIGNvbm5lY3Rpb24uLi4nKTtcbiAgICBjb25zdCBkYlRlc3QgPSBhd2FpdCB0ZXN0TWFuYWdlci50ZXN0RGF0YWJhc2VDb25uZWN0aW9uKCk7XG4gICAgaWYgKCFkYlRlc3Quc3VjY2Vzcykge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKGBEYXRhYmFzZSBjb25uZWN0aW9uIGZhaWxlZDogJHtkYlRlc3QuZXJyb3J9YCk7XG4gICAgfVxuICAgIGNvbnNvbGUubG9nKCfinIUgRGF0YWJhc2UgY29ubmVjdGlvbiBzdWNjZXNzZnVsJyk7XG4gICAgXG4gICAgLy8gVGVzdCBSZWRpcyBjb25uZWN0aW9uXG4gICAgY29uc29sZS5sb2coJ/CflI0gVGVzdGluZyBSZWRpcyBjb25uZWN0aW9uLi4uJyk7XG4gICAgY29uc3QgcmVkaXNUZXN0ID0gYXdhaXQgdGVzdE1hbmFnZXIudGVzdFJlZGlzQ29ubmVjdGlvbigpO1xuICAgIGlmICghcmVkaXNUZXN0LnN1Y2Nlc3MpIHtcbiAgICAgIGNvbnNvbGUud2Fybign4pqg77iPICBSZWRpcyBjb25uZWN0aW9uIGZhaWxlZDonLCByZWRpc1Rlc3QuZXJyb3IpO1xuICAgICAgY29uc29sZS53YXJuKCfimqDvuI8gIFNvbWUgdGVzdHMgbWF5IGZhaWwgaWYgdGhleSByZXF1aXJlIFJlZGlzJyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGNvbnNvbGUubG9nKCfinIUgUmVkaXMgY29ubmVjdGlvbiBzdWNjZXNzZnVsJyk7XG4gICAgfVxuICAgIFxuICAgIC8vIFNldHVwIGNsZWFuIHRlc3QgZW52aXJvbm1lbnRcbiAgICBjb25zb2xlLmxvZygn8J+nuSBTZXR0aW5nIHVwIGNsZWFuIHRlc3QgZW52aXJvbm1lbnQuLi4nKTtcbiAgICBhd2FpdCB0ZXN0TWFuYWdlci5zZXR1cFRlc3RFbnZpcm9ubWVudCgpO1xuICAgIFxuICAgIC8vIFN0b3JlIGdsb2JhbCB0ZXN0IG1hbmFnZXIgZm9yIGNsZWFudXBcbiAgICBnbG9iYWwuX19JTlRFR1JBVElPTl9URVNUX01BTkFHRVJfXyA9IHRlc3RNYW5hZ2VyO1xuICAgIFxuICAgIGNvbnN0IGVuZFRpbWUgPSBEYXRlLm5vdygpO1xuICAgIGNvbnNvbGUubG9nKGDinIUgSW50ZWdyYXRpb24gdGVzdHMgZ2xvYmFsIHNldHVwIGNvbXBsZXRlZCBpbiAke2VuZFRpbWUgLSBzdGFydFRpbWV9bXNgKTtcbiAgICBjb25zb2xlLmxvZygn8J+OryBFbnZpcm9ubWVudCByZWFkeSBmb3IgaW50ZWdyYXRpb24gdGVzdGluZycpO1xuICAgIFxuICB9IGNhdGNoIChlcnJvcikge1xuICAgIGNvbnNvbGUuZXJyb3IoJ+KdjCBJbnRlZ3JhdGlvbiB0ZXN0cyBnbG9iYWwgc2V0dXAgZmFpbGVkOicsIGVycm9yLm1lc3NhZ2UpO1xuICAgIGNvbnNvbGUuZXJyb3IoJycpO1xuICAgIGNvbnNvbGUuZXJyb3IoJ/CflKcgQ29tbW9uIHNvbHV0aW9uczonKTtcbiAgICBjb25zb2xlLmVycm9yKCcgICAxLiBNYWtlIHN1cmUgU3VwYWJhc2UgaXMgcnVubmluZzogbnB4IHN1cGFiYXNlIHN0YXJ0Jyk7XG4gICAgY29uc29sZS5lcnJvcignICAgMi4gTWFrZSBzdXJlIFJlZGlzIGlzIHJ1bm5pbmc6IHJlZGlzLXNlcnZlcicpO1xuICAgIGNvbnNvbGUuZXJyb3IoJyAgIDMuIENoZWNrIC5lbnYudGVzdCBmaWxlIGhhcyBjb3JyZWN0IERBVEFCQVNFX1VSTCBhbmQgUkVESVNfVVJMJyk7XG4gICAgY29uc29sZS5lcnJvcignICAgNC4gVmVyaWZ5IHRlc3QgZGF0YWJhc2UgaXMgYWNjZXNzaWJsZScpO1xuICAgIGNvbnNvbGUuZXJyb3IoJycpO1xuICAgIFxuICAgIC8vIERvbid0IGZhaWwgaW1tZWRpYXRlbHksIGxldCBpbmRpdmlkdWFsIHRlc3RzIGhhbmRsZSBjb25uZWN0aW9uIGVycm9yc1xuICAgIGNvbnNvbGUud2Fybign4pqg77iPICBDb250aW51aW5nIHdpdGggc2V0dXAgd2Fybmlu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