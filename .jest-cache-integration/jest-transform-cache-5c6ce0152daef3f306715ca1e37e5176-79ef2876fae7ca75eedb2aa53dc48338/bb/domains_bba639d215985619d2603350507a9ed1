d7395c318a4e94ac5a5d56f754b64281
/**
 * Cloudflare Domain API entegrasyonu
 * Bu modül, tenant domainlerinin Cloudflare DNS ile otomatik yapılandırılmasını sağlar
 * Referans: docs/architecture/domain-management.md, docs/architecture/domain-management-guide.md
 */ "use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    createDnsRecord: function() {
        return createDnsRecord;
    },
    deleteDnsRecord: function() {
        return deleteDnsRecord;
    },
    removeTenantDomain: function() {
        return removeTenantDomain;
    },
    setupTenantDomain: function() {
        return setupTenantDomain;
    },
    verifyCustomDomain: function() {
        return verifyCustomDomain;
    }
});
const _env = require("../../env");
const CLOUDFLARE_API_BASE = 'https://api.cloudflare.com/client/v4';
async function createDnsRecord({ subdomain, rootDomain, proxied = true, ttl = 1, priority = 10 }) {
    try {
        // Cloudflare zone ID'sini al
        const zoneId = await getZoneId(rootDomain);
        if (!zoneId) {
            return {
                success: false,
                errors: [
                    {
                        message: `${rootDomain} için zone bulunamadı`
                    }
                ],
                messages: []
            };
        }
        // API isteği için gerekli headers
        const headers = {
            'Content-Type': 'application/json',
            Authorization: `Bearer ${_env.env.CLOUDFLARE_API_TOKEN}`
        };
        // Tam domain adını oluştur
        const fullDomain = subdomain ? `${subdomain}.${rootDomain}` : rootDomain;
        // Vercel'in uygulama URL'i
        const vercelDomain = _env.env.VERCEL_URL || 'i-ep.app';
        // DNS kaydı oluşturma isteği gönder
        const response = await fetch(`${CLOUDFLARE_API_BASE}/zones/${zoneId}/dns_records`, {
            method: 'POST',
            headers,
            body: JSON.stringify({
                type: 'CNAME',
                name: fullDomain,
                content: vercelDomain,
                ttl,
                priority,
                proxied
            })
        });
        if (!response.ok) {
            const errorData = await response.json();
            return {
                success: false,
                errors: errorData.errors || [
                    {
                        message: 'API isteği başarısız oldu'
                    }
                ],
                messages: errorData.messages || []
            };
        }
        const data = await response.json();
        return data;
    } catch (error) {
        console.error('Cloudflare API hatası:', error);
        return {
            success: false,
            errors: [
                {
                    message: `API isteği sırasında hata: ${error}`
                }
            ],
            messages: []
        };
    }
}
async function deleteDnsRecord(subdomain, rootDomain) {
    try {
        // Cloudflare zone ID'sini al
        const zoneId = await getZoneId(rootDomain);
        if (!zoneId) {
            return {
                success: false,
                errors: [
                    {
                        message: `${rootDomain} için zone bulunamadı`
                    }
                ],
                messages: []
            };
        }
        // API isteği için gerekli headers
        const headers = {
            Authorization: `Bearer ${_env.env.CLOUDFLARE_API_TOKEN}`
        };
        // Tam domain adını oluştur
        const fullDomain = `${subdomain}.${rootDomain}`;
        // Önce DNS kaydının ID'sini bul
        const recordId = await getDnsRecordId(zoneId, fullDomain);
        if (!recordId) {
            return {
                success: false,
                errors: [
                    {
                        message: `${fullDomain} için DNS kaydı bulunamadı`
                    }
                ],
                messages: []
            };
        }
        // DNS kaydını silme isteği gönder
        const response = await fetch(`${CLOUDFLARE_API_BASE}/zones/${zoneId}/dns_records/${recordId}`, {
            method: 'DELETE',
            headers
        });
        if (!response.ok) {
            const errorData = await response.json();
            return {
                success: false,
                errors: errorData.errors || [
                    {
                        message: 'API isteği başarısız oldu'
                    }
                ],
                messages: errorData.messages || []
            };
        }
        const data = await response.json();
        return data;
    } catch (error) {
        console.error('Cloudflare API hatası:', error);
        return {
            success: false,
            errors: [
                {
                    message: `API isteği sırasında hata: ${error}`
                }
            ],
            messages: []
        };
    }
}
/**
 * Domain için zone ID'sini bulur
 */ async function getZoneId(domain) {
    try {
        const response = await fetch(`${CLOUDFLARE_API_BASE}/zones?name=${domain}`, {
            headers: {
                Authorization: `Bearer ${_env.env.CLOUDFLARE_API_TOKEN}`
            }
        });
        if (!response.ok) {
            console.error('Zone sorgusu başarısız oldu:', await response.text());
            return null;
        }
        const data = await response.json();
        if (!data.success || !data.result.length) {
            return null;
        }
        return data.result[0].id;
    } catch (error) {
        console.error('Zone ID alınamadı:', error);
        return null;
    }
}
/**
 * Belirtilen domain için DNS kaydının ID'sini bulur
 */ async function getDnsRecordId(zoneId, domain) {
    try {
        const response = await fetch(`${CLOUDFLARE_API_BASE}/zones/${zoneId}/dns_records?name=${domain}`, {
            headers: {
                Authorization: `Bearer ${_env.env.CLOUDFLARE_API_TOKEN}`
            }
        });
        if (!response.ok) {
            console.error('DNS kaydı sorgusu başarısız oldu:', await response.text());
            return null;
        }
        const data = await response.json();
        if (!data.success || !data.result.length) {
            return null;
        }
        return data.result[0].id;
    } catch (error) {
        console.error("DNS kaydı ID'si alınamadı:", error);
        return null;
    }
}
async function setupTenantDomain(tenantId, subdomain) {
    // Varsayılan root domain
    const rootDomain = _env.env.ROOT_DOMAIN || 'i-ep.app';
    // DNS kaydını oluştur
    const result = await createDnsRecord({
        subdomain,
        rootDomain
    });
    if (result.success) {
        console.log(`${subdomain}.${rootDomain} için DNS kaydı oluşturuldu`);
    } else {
        console.error(`DNS kaydı oluşturulamadı:`, result.errors);
    }
    return result;
}
async function removeTenantDomain(tenantId, subdomain) {
    // Varsayılan root domain
    const rootDomain = _env.env.ROOT_DOMAIN || 'i-ep.app';
    // DNS kaydını sil
    const result = await deleteDnsRecord(subdomain, rootDomain);
    if (result.success) {
        console.log(`${subdomain}.${rootDomain} için DNS kaydı silindi`);
    } else {
        console.error(`DNS kaydı silinemedi:`, result.errors);
    }
    return result;
}
async function verifyCustomDomain(domain) {
    try {
        // Domain doğrulama işlemleri (CNAME veya TXT kayıtları kontrol edilir)
        // Bu örnek basitleştirilmiştir, gerçek uygulamada daha kapsamlı olmalıdır
        // DNS sorgusu yapılır
        const vercelDomain = _env.env.VERCEL_URL || 'i-ep.app';
        // Burada gerçek bir DNS sorgusu yapılmalıdır
        // Şimdilik basit bir simülasyon
        const isValid = domain.includes('.');
        if (isValid) {
            return {
                success: true,
                validationRecord: `${domain} CNAME ${vercelDomain}`
            };
        } else {
            return {
                success: false,
                error: 'Geçersiz domain formatı'
            };
        }
    } catch (error) {
        console.error('Domain doğrulama hatası:', error);
        return {
            success: false,
            error: `Doğrulama sırasında hata: ${error}`
        };
    }
}

//# sourceMappingURL=data:application/json;base64,