{"version":3,"sources":["/Users/turanmusabosman/Projects/i-ep.app/src/lib/cloudflare/domains.ts"],"sourcesContent":["/**\n * Cloudflare Domain API entegrasyonu\n * Bu modül, tenant domainlerinin Cloudflare DNS ile otomatik yapılandırılmasını sağlar\n * Referans: docs/architecture/domain-management.md, docs/architecture/domain-management-guide.md\n */\n\nimport { env } from '@/env';\n\nconst CLOUDFLARE_API_BASE = 'https://api.cloudflare.com/client/v4';\n\ninterface CloudflareDomainConfig {\n  subdomain: string;\n  rootDomain: string;\n  proxied?: boolean;\n  ttl?: number;\n  priority?: number;\n}\n\ninterface CloudflareResponse {\n  success: boolean;\n  errors: any[];\n  messages: any[];\n  result?: any;\n}\n\n/**\n * DNS kaydı oluşturma için Cloudflare API'sine istek gönderir\n */\nexport async function createDnsRecord({\n  subdomain,\n  rootDomain,\n  proxied = true,\n  ttl = 1,\n  priority = 10,\n}: CloudflareDomainConfig): Promise<CloudflareResponse> {\n  try {\n    // Cloudflare zone ID'sini al\n    const zoneId = await getZoneId(rootDomain);\n    if (!zoneId) {\n      return {\n        success: false,\n        errors: [{ message: `${rootDomain} için zone bulunamadı` }],\n        messages: [],\n      };\n    }\n\n    // API isteği için gerekli headers\n    const headers = {\n      'Content-Type': 'application/json',\n      Authorization: `Bearer ${env.CLOUDFLARE_API_TOKEN}`,\n    };\n\n    // Tam domain adını oluştur\n    const fullDomain = subdomain ? `${subdomain}.${rootDomain}` : rootDomain;\n\n    // Vercel'in uygulama URL'i\n    const vercelDomain = env.VERCEL_URL || 'i-ep.app';\n\n    // DNS kaydı oluşturma isteği gönder\n    const response = await fetch(`${CLOUDFLARE_API_BASE}/zones/${zoneId}/dns_records`, {\n      method: 'POST',\n      headers,\n      body: JSON.stringify({\n        type: 'CNAME',\n        name: fullDomain,\n        content: vercelDomain,\n        ttl,\n        priority,\n        proxied,\n      }),\n    });\n\n    if (!response.ok) {\n      const errorData = await response.json();\n      return {\n        success: false,\n        errors: errorData.errors || [{ message: 'API isteği başarısız oldu' }],\n        messages: errorData.messages || [],\n      };\n    }\n\n    const data = await response.json();\n    return data;\n  } catch (error) {\n    console.error('Cloudflare API hatası:', error);\n    return {\n      success: false,\n      errors: [{ message: `API isteği sırasında hata: ${error}` }],\n      messages: [],\n    };\n  }\n}\n\n/**\n * Belirtilen domain için DNS kaydını siler\n */\nexport async function deleteDnsRecord(\n  subdomain: string,\n  rootDomain: string\n): Promise<CloudflareResponse> {\n  try {\n    // Cloudflare zone ID'sini al\n    const zoneId = await getZoneId(rootDomain);\n    if (!zoneId) {\n      return {\n        success: false,\n        errors: [{ message: `${rootDomain} için zone bulunamadı` }],\n        messages: [],\n      };\n    }\n\n    // API isteği için gerekli headers\n    const headers = {\n      Authorization: `Bearer ${env.CLOUDFLARE_API_TOKEN}`,\n    };\n\n    // Tam domain adını oluştur\n    const fullDomain = `${subdomain}.${rootDomain}`;\n\n    // Önce DNS kaydının ID'sini bul\n    const recordId = await getDnsRecordId(zoneId, fullDomain);\n    if (!recordId) {\n      return {\n        success: false,\n        errors: [{ message: `${fullDomain} için DNS kaydı bulunamadı` }],\n        messages: [],\n      };\n    }\n\n    // DNS kaydını silme isteği gönder\n    const response = await fetch(`${CLOUDFLARE_API_BASE}/zones/${zoneId}/dns_records/${recordId}`, {\n      method: 'DELETE',\n      headers,\n    });\n\n    if (!response.ok) {\n      const errorData = await response.json();\n      return {\n        success: false,\n        errors: errorData.errors || [{ message: 'API isteği başarısız oldu' }],\n        messages: errorData.messages || [],\n      };\n    }\n\n    const data = await response.json();\n    return data;\n  } catch (error) {\n    console.error('Cloudflare API hatası:', error);\n    return {\n      success: false,\n      errors: [{ message: `API isteği sırasında hata: ${error}` }],\n      messages: [],\n    };\n  }\n}\n\n/**\n * Domain için zone ID'sini bulur\n */\nasync function getZoneId(domain: string): Promise<string | null> {\n  try {\n    const response = await fetch(`${CLOUDFLARE_API_BASE}/zones?name=${domain}`, {\n      headers: {\n        Authorization: `Bearer ${env.CLOUDFLARE_API_TOKEN}`,\n      },\n    });\n\n    if (!response.ok) {\n      console.error('Zone sorgusu başarısız oldu:', await response.text());\n      return null;\n    }\n\n    const data = await response.json();\n    if (!data.success || !data.result.length) {\n      return null;\n    }\n\n    return data.result[0].id;\n  } catch (error) {\n    console.error('Zone ID alınamadı:', error);\n    return null;\n  }\n}\n\n/**\n * Belirtilen domain için DNS kaydının ID'sini bulur\n */\nasync function getDnsRecordId(zoneId: string, domain: string): Promise<string | null> {\n  try {\n    const response = await fetch(\n      `${CLOUDFLARE_API_BASE}/zones/${zoneId}/dns_records?name=${domain}`,\n      {\n        headers: {\n          Authorization: `Bearer ${env.CLOUDFLARE_API_TOKEN}`,\n        },\n      }\n    );\n\n    if (!response.ok) {\n      console.error('DNS kaydı sorgusu başarısız oldu:', await response.text());\n      return null;\n    }\n\n    const data = await response.json();\n    if (!data.success || !data.result.length) {\n      return null;\n    }\n\n    return data.result[0].id;\n  } catch (error) {\n    console.error(\"DNS kaydı ID'si alınamadı:\", error);\n    return null;\n  }\n}\n\n/**\n * Yeni bir tenant oluşturulduğunda DNS kaydı oluşturur\n */\nexport async function setupTenantDomain(\n  tenantId: string,\n  subdomain: string\n): Promise<CloudflareResponse> {\n  // Varsayılan root domain\n  const rootDomain = env.ROOT_DOMAIN || 'i-ep.app';\n\n  // DNS kaydını oluştur\n  const result = await createDnsRecord({\n    subdomain,\n    rootDomain,\n  });\n\n  if (result.success) {\n    console.log(`${subdomain}.${rootDomain} için DNS kaydı oluşturuldu`);\n  } else {\n    console.error(`DNS kaydı oluşturulamadı:`, result.errors);\n  }\n\n  return result;\n}\n\n/**\n * Tenant silindiğinde DNS kaydını siler\n */\nexport async function removeTenantDomain(\n  tenantId: string,\n  subdomain: string\n): Promise<CloudflareResponse> {\n  // Varsayılan root domain\n  const rootDomain = env.ROOT_DOMAIN || 'i-ep.app';\n\n  // DNS kaydını sil\n  const result = await deleteDnsRecord(subdomain, rootDomain);\n\n  if (result.success) {\n    console.log(`${subdomain}.${rootDomain} için DNS kaydı silindi`);\n  } else {\n    console.error(`DNS kaydı silinemedi:`, result.errors);\n  }\n\n  return result;\n}\n\n/**\n * Özel domain için DNS doğrulaması yapar\n */\nexport async function verifyCustomDomain(\n  domain: string\n): Promise<{ success: boolean; validationRecord?: string; error?: string }> {\n  try {\n    // Domain doğrulama işlemleri (CNAME veya TXT kayıtları kontrol edilir)\n    // Bu örnek basitleştirilmiştir, gerçek uygulamada daha kapsamlı olmalıdır\n\n    // DNS sorgusu yapılır\n    const vercelDomain = env.VERCEL_URL || 'i-ep.app';\n\n    // Burada gerçek bir DNS sorgusu yapılmalıdır\n    // Şimdilik basit bir simülasyon\n    const isValid = domain.includes('.');\n\n    if (isValid) {\n      return {\n        success: true,\n        validationRecord: `${domain} CNAME ${vercelDomain}`,\n      };\n    } else {\n      return {\n        success: false,\n        error: 'Geçersiz domain formatı',\n      };\n    }\n  } catch (error) {\n    console.error('Domain doğrulama hatası:', error);\n    return {\n      success: false,\n      error: `Doğrulama sırasında hata: ${error}`,\n    };\n  }\n}\n"],"names":["createDnsRecord","deleteDnsRecord","removeTenantDomain","setupTenantDomain","verifyCustomDomain","CLOUDFLARE_API_BASE","subdomain","rootDomain","proxied","ttl","priority","zoneId","getZoneId","success","errors","message","messages","headers","Authorization","env","CLOUDFLARE_API_TOKEN","fullDomain","vercelDomain","VERCEL_URL","response","fetch","method","body","JSON","stringify","type","name","content","ok","errorData","json","data","error","console","recordId","getDnsRecordId","domain","text","result","length","id","tenantId","ROOT_DOMAIN","log","isValid","includes","validationRecord"],"mappings":"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"}