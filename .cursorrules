# Sentry AI Rules for Code Editors

Sentry provides a set of rules to help your LLM use Sentry correctly in this project.

## Exception Catching

Use `Sentry.captureException(error)` to capture an exception and log the error in Sentry.
Use this in try catch blocks or areas where exceptions are expected

## Tracing Examples

Spans should be created for meaningful actions within an applications like button clicks, API calls, and function calls
Use the `Sentry.startSpan` function to create a span
Child spans can exist within a parent span

### Custom Span instrumentation in component actions

The `name` and `op` properties should be meaningful for the activities in the call.
Attach attributes based on relevant information and metrics from the request

```javascript
function TestComponent() {
  const handleTestButtonClick = () => {
    // Create a transaction/span to measure performance
    Sentry.startSpan(
      {
        op: "ui.click",
        name: "Test Button Click",
      },
      (span) => {
        const value = "some config";
        const metric = "some metric";

        // Metrics can be added to the span
        span.setAttribute("config", value);
        span.setAttribute("metric", metric);

        doSomething();
      },
    );
  };

  return (
    <button type="button" onClick={handleTestButtonClick}>
      Test Sentry
    </button>
  );
}
```

### Custom span instrumentation in API calls

The `name` and `op` properties should be meaningful for the activities in the call.
Attach attributes based on relevant information and metrics from the request

```javascript
async function fetchUserData(userId) {
  return Sentry.startSpan(
    {
      op: "http.client",
      name: `GET /api/users/${userId}`,
    },
    async () => {
      const response = await fetch(`/api/users/${userId}`);
      const data = await response.json();
      return data;
    },
  );
}
```

### Performance Monitoring Spans

```javascript
// Page Load Performance
Sentry.startSpan(
  {
    op: "ui.load",
    name: "Page Load Performance",
  },
  (span) => {
    span.setAttribute("tenant_type", tenantType);
    span.setAttribute("page_name", pageName);
    span.setAttribute("load_time", loadTime);
    span.setAttribute("tenant_plan", tenantPlan);
  }
);

// Feature Usage Tracking
Sentry.startSpan(
  {
    op: "feature.usage",
    name: "Feature Usage",
  },
  (span) => {
    span.setAttribute("feature_name", featureName);
    span.setAttribute("tenant_plan", tenantPlan);
    span.setAttribute("user_role", userRole);
    span.setAttribute("usage_count", usageCount);
  }
);
```

## Error Handling

### Tenant-Specific Error Handling

```javascript
try {
  // tenant operations
} catch (error) {
  Sentry.withScope((scope) => {
    scope.setTag("error_category", "tenant_operation");
    scope.setTag("tenant_plan", tenantPlan);
    scope.setTag("operation_type", operationType);
    scope.setContext("tenant_info", {
      id: tenantId,
      plan: tenantPlan,
      operation: operationType
    });
    Sentry.captureException(error);
  });
}
```

### API Error Handling

```javascript
try {
  // API call
} catch (error) {
  Sentry.withScope((scope) => {
    scope.setTag("error_category", "api_error");
    scope.setTag("endpoint", endpoint);
    scope.setTag("http_method", method);
    scope.setContext("request_info", {
      url: endpoint,
      method: method,
      headers: headers
    });
    Sentry.captureException(error);
  });
}
```

## Logs

Where logs are used, ensure Sentry is imported using `import * as Sentry from "@sentry/nextjs"`
Enable logging in Sentry using `Sentry.init({ _experiments: { enableLogs: true } })`
Reference the logger using `const { logger } = Sentry`
Sentry offers a consoleLoggingIntegration that can be used to log specific console error types automatically without instrumenting the individual logger calls

### Configuration

In NextJS the client side Sentry initialization is in `instrumentation-client.ts`, the server initialization is in `sentry.edge.config.ts` and the edge initialization is in `sentry.server.config.ts`
Initialization does not need to be repeated in other files, it only needs to happen the files mentioned above. You should use `import * as Sentry from "@sentry/nextjs"` to reference Sentry functionality

#### Baseline

```javascript
import * as Sentry from "@sentry/nextjs";

Sentry.init({
  dsn: "https://723ae992af5b929e62cbca67e13f1f95@o4508686736556032.ingest.de.sentry.io/4509633858764880",
  _experiments: {
    enableLogs: true,
  },
});
```

#### Logger Integration

```javascript
Sentry.init({
  dsn: "https://723ae992af5b929e62cbca67e13f1f95@o4508686736556032.ingest.de.sentry.io/4509633858764880",
  integrations: [
    // send console.log, console.error, and console.warn calls as logs to Sentry
    Sentry.consoleLoggingIntegration({ levels: ["log", "error", "warn"] }),
  ],
});
```

### Structured Logging Examples

`logger.fmt` is a template literal function that should be used to bring variables into the structured logs.

```javascript
const { logger } = Sentry;

// System Operations
logger.trace("Starting database connection", { 
  database: "users",
  tenant_id: tenantId 
});

// Cache Operations
logger.debug(logger.fmt`Cache miss for user: ${userId}`, {
  cache_type: "redis",
  tenant_id: tenantId
});

// Business Operations
logger.info("Updated profile", { 
  profileId: 345,
  tenant_id: tenantId,
  changes: profileChanges
});

// Warning Conditions
logger.warn("Rate limit reached for endpoint", {
  endpoint: "/api/results/",
  tenant_id: tenantId,
  current_rate: currentRate,
  limit: rateLimit
});

// Error Conditions
logger.error("Failed to process payment", {
  orderId: "order_123",
  amount: 99.99,
  tenant_id: tenantId,
  error_code: errorCode
});

// Critical System Issues
logger.fatal("Database connection pool exhausted", {
  database: "users",
  tenant_id: tenantId,
  activeConnections: 100,
  maxConnections: 150
});
```

## Project-Specific Guidelines

- Always use `import * as Sentry from "@sentry/nextjs"` for imports
- Initialize Sentry only in the designated configuration files
- Use structured logging with meaningful attributes
- Create spans for user interactions, API calls, and significant operations
- Capture exceptions with appropriate context
- Use the logger.fmt template function for dynamic log messages
- Include tenant context in all logs and spans
- Follow the defined error categorization
- Implement proper error boundaries with Sentry integration
- Use performance monitoring for critical user journeys
- Maintain consistent naming conventions for spans and logs 