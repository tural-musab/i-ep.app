#!/usr/bin/env node

/**
 * ƒ∞-EP.APP Documentation Auto-Sync Script
 * 
 * Bu script proje dosyalarƒ±ndaki deƒüi≈üiklikleri izler ve 
 * dok√ºmantasyon iyile≈ütirme planƒ±nƒ± otomatik olarak g√ºnceller.
 */

const fs = require('fs');
const path = require('path');
const chokidar = require('chokidar');
const { execSync } = require('child_process');

// Configuration
const CONFIG = {
  // ƒ∞zlenecek dosyalar
  watchFiles: [
    'docs-site/docs/PROGRESS.md',
    'docs-site/docs/SPRINT-PLANNING-2025.md', 
    'docs-site/docs/PROJECT-STATUS-REPORT-*.md',
    'docs-site/docs/DEVELOPMENT-ROADMAP-2025.md'
  ],
  
  // G√ºncellenmesi gereken dosya
  targetFile: 'docs-site/docs/meta/dokumantasyon-iyilestirme-plani-2025.html',
  
  // ƒ∞zleme yapƒ±lacak dizinler
  watchDirs: ['./'],
  
  // Hari√ß tutulacak dizinler
  ignorePatterns: [
    'node_modules/**',
    '.git/**',
    'dist/**',
    'build/**',
    '.next/**'
  ]
};

class DocumentationSyncService {
  constructor() {
    this.isUpdating = false;
    this.lastUpdate = new Date();
  }

  /**
   * PROGRESS.md dosyasƒ±ndan mevcut durumu oku
   */
  async readProgressStatus() {
    try {
      const progressPath = path.join(process.cwd(), 'docs-site/docs/PROGRESS.md');
      if (!fs.existsSync(progressPath)) return null;

      const content = fs.readFileSync(progressPath, 'utf8');
      
      // Progress y√ºzdesini bul
      const progressMatch = content.match(/Toplam ƒ∞lerleme:\s*(\d+)%/);
      const progress = progressMatch ? parseInt(progressMatch[1]) : 0;

      // Tamamlanan Sprint'i bul
      const sprintMatch = content.match(/Sprint (\d+(?:\.\d+)?)/g);
      const latestSprint = sprintMatch ? sprintMatch[sprintMatch.length - 1] : 'Sprint 1';

      // Son g√ºncelleme tarihini bul
      const dateMatch = content.match(/(\d{4}-\d{2}-\d{2})/);
      const lastUpdateDate = dateMatch ? dateMatch[1] : new Date().toISOString().split('T')[0];

      return {
        progress,
        latestSprint,
        lastUpdateDate,
        filePath: progressPath
      };
    } catch (error) {
      console.error('Progress dosyasƒ± okunamadƒ±:', error);
      return null;
    }
  }

  /**
   * Sprint planlama dosyasƒ±ndan sprint durumunu oku
   */
  async readSprintStatus() {
    try {
      const sprintPath = path.join(process.cwd(), 'docs-site/docs/SPRINT-PLANNING-2025.md');
      if (!fs.existsSync(sprintPath)) return null;

      const content = fs.readFileSync(sprintPath, 'utf8');
      
      // Aktif sprint'i bul
      const activeSprintMatch = content.match(/## (Sprint \d+(?:\.\d+)?)[^\n]*\n[\s\S]*?Status:\s*(\w+)/);
      
      return {
        activeSprint: activeSprintMatch ? activeSprintMatch[1] : 'Sprint 1',
        status: activeSprintMatch ? activeSprintMatch[2] : 'unknown',
        filePath: sprintPath
      };
    } catch (error) {
      console.error('Sprint planlama dosyasƒ± okunamadƒ±:', error);
      return null;
    }
  }

  /**
   * Storage implementation durumunu kontrol et
   */
  async checkStorageImplementation() {
    try {
      const storageIndexPath = path.join(process.cwd(), 'src/lib/storage/index.ts');
      const storageProviderPath = path.join(process.cwd(), 'src/lib/storage/providers/supabase.provider.ts');
      
      const hasStorageIndex = fs.existsSync(storageIndexPath);
      const hasStorageProvider = fs.existsSync(storageProviderPath);
      
      let implementationStatus = 'partial';
      if (hasStorageIndex && hasStorageProvider) {
        // Repository layer kontrol et
        const indexContent = fs.readFileSync(storageIndexPath, 'utf8');
        const hasRepositoryError = indexContent.includes('StorageRepository hen√ºz implement edilmedi');
        
        implementationStatus = hasRepositoryError ? 'repository-missing' : 'complete';
      }

      return {
        hasCore: hasStorageIndex,
        hasProvider: hasStorageProvider,
        status: implementationStatus,
        completion: implementationStatus === 'complete' ? 95 : 
                   implementationStatus === 'repository-missing' ? 75 : 50
      };
    } catch (error) {
      console.error('Storage implementation kontrol edilemedi:', error);
      return { status: 'unknown', completion: 0 };
    }
  }

  /**
   * Mevcut proje dosyalarƒ±ndan durum bilgilerini topla
   */
  async gatherProjectStatus() {
    console.log('üìä Proje durumu toplanƒ±yor...');
    
    const [progressStatus, sprintStatus, storageStatus] = await Promise.all([
      this.readProgressStatus(),
      this.readSprintStatus(), 
      this.checkStorageImplementation()
    ]);

    return {
      progress: progressStatus,
      sprint: sprintStatus,
      storage: storageStatus,
      timestamp: new Date().toISOString(),
      lastSync: this.lastUpdate.toISOString()
    };
  }

  /**
   * HTML dok√ºmantasyon planƒ±nƒ± g√ºncelle
   */
  async updateDocumentationPlan(projectStatus) {
    try {
      const targetPath = path.join(process.cwd(), CONFIG.targetFile);
      
      if (!fs.existsSync(targetPath)) {
        console.error('‚ùå Hedef dok√ºmantasyon dosyasƒ± bulunamadƒ±:', targetPath);
        return false;
      }

      let htmlContent = fs.readFileSync(targetPath, 'utf8');

      // Progress g√ºncellemeleri
      if (projectStatus.progress) {
        // Ana progress deƒüerini g√ºncelle
        htmlContent = htmlContent.replace(
          /(\d+)% ‚Üí (\d+)%/g,
          `${projectStatus.progress.progress - 15}% ‚Üí ${projectStatus.progress.progress}%`
        );

        // Storage system progress'i g√ºncelle
        if (projectStatus.storage) {
          htmlContent = htmlContent.replace(
            /<div class="number">95%<\/div>\s*<div class="label">Storage System<\/div>/,
            `<div class="number">${projectStatus.storage.completion}%</div>
            <div class="label">Storage System</div>`
          );
        }

        // Son g√ºncelleme tarihini g√ºncelle
        const today = new Date().toLocaleDateString('tr-TR', { 
          year: 'numeric', 
          month: 'long', 
          day: 'numeric' 
        });
        
        htmlContent = htmlContent.replace(
          /Son G√ºncelleme: [^<]+/g,
          `Son G√ºncelleme: ${today} - Otomatik Senkronizasyon`
        );
      }

      // Sprint bilgilerini g√ºncelle
      if (projectStatus.sprint) {
        htmlContent = htmlContent.replace(
          /Sprint \d+(?:\.\d+)? ba≈üarƒ±yla tamamlandƒ±/g,
          `${projectStatus.sprint.activeSprint} devam ediyor`
        );
      }

      // Storage repository status'unu g√ºncelle
      if (projectStatus.storage && projectStatus.storage.status === 'repository-missing') {
        // Acil √∂ncelikler kƒ±smƒ±nda storage repository task'ini vurgula
        htmlContent = htmlContent.replace(
          /<h3>Storage Repository Implementation Guide<\/h3>/,
          '<h3>üî• Storage Repository Implementation Guide (ACIL)</h3>'
        );
      }

      // G√ºncelleme tarih damgasƒ±nƒ± ekle
      const updateInfo = `
        <div class="update-info">
            <h3>üîÑ Otomatik G√ºncelleme - ${new Date().toLocaleDateString('tr-TR')}</h3>
            <p><strong>Mevcut Proje Durumu:</strong> %${projectStatus.progress?.progress || 50} tamamlandƒ±</p>
            <p><strong>Storage Durumu:</strong> ${projectStatus.storage?.status || 'unknown'} (%${projectStatus.storage?.completion || 0})</p>
            <p><strong>Aktif Sprint:</strong> ${projectStatus.sprint?.activeSprint || 'Bilinmiyor'}</p>
        </div>
      `;

      // Eski update-info'yu deƒüi≈ütir
      htmlContent = htmlContent.replace(
        /<div class="update-info">[\s\S]*?<\/div>/,
        updateInfo
      );

      // Dosyayƒ± g√ºncelle
      fs.writeFileSync(targetPath, htmlContent, 'utf8');
      
      console.log('‚úÖ Dok√ºmantasyon planƒ± g√ºncellendi:', targetPath);
      return true;

    } catch (error) {
      console.error('‚ùå Dok√ºmantasyon planƒ± g√ºncellenemedi:', error);
      return false;
    }
  }

  /**
   * File watcher ba≈ülat
   */
  startWatching() {
    console.log('üëÄ Dosya deƒüi≈üiklikleri izleniyor...');
    
    const watcher = chokidar.watch(CONFIG.watchFiles, {
      ignored: CONFIG.ignorePatterns,
      persistent: true,
      ignoreInitial: true
    });

    watcher.on('change', async (filePath) => {
      if (this.isUpdating) return;
      
      console.log(`üìù Dosya deƒüi≈üti: ${filePath}`);
      await this.performSync();
    });

    watcher.on('add', async (filePath) => {
      console.log(`‚ûï Yeni dosya eklendi: ${filePath}`);
      await this.performSync();
    });

    console.log('‚úÖ Dosya izleme ba≈ülatƒ±ldƒ±. Deƒüi≈üiklikler otomatik olarak senkronize edilecek.');
    
    return watcher;
  }

  /**
   * Senkronizasyon i≈ülemini ger√ßekle≈ütir
   */
  async performSync() {
    if (this.isUpdating) return;
    
    this.isUpdating = true;
    console.log('üîÑ Dok√ºmantasyon senkronizasyonu ba≈ülatƒ±lƒ±yor...');

    try {
      // Proje durumunu topla
      const projectStatus = await this.gatherProjectStatus();
      
      // Dok√ºmantasyon planƒ±nƒ± g√ºncelle
      const success = await this.updateDocumentationPlan(projectStatus);
      
      if (success) {
        console.log('‚úÖ Senkronizasyon tamamlandƒ±!');
        this.lastUpdate = new Date();
      } else {
        console.log('‚ùå Senkronizasyon ba≈üarƒ±sƒ±z!');
      }

    } catch (error) {
      console.error('‚ùå Senkronizasyon hatasƒ±:', error);
    } finally {
      this.isUpdating = false;
    }
  }

  /**
   * Manuel senkronizasyon
   */
  async manualSync() {
    console.log('üöÄ Manuel senkronizasyon ba≈ülatƒ±lƒ±yor...');
    await this.performSync();
  }
}

// CLI Interface
async function main() {
  const args = process.argv.slice(2);
  const command = args[0];

  const syncService = new DocumentationSyncService();

  switch (command) {
    case 'watch':
      console.log('üéØ ƒ∞-EP.APP Dok√ºmantasyon Auto-Sync ba≈ülatƒ±lƒ±yor...');
      syncService.startWatching();
      
      // ƒ∞lk senkronizasyonu √ßalƒ±≈ütƒ±r
      await syncService.manualSync();
      
      // Process'i a√ßƒ±k tut
      process.stdin.resume();
      break;

    case 'sync':
      await syncService.manualSync();
      break;

    case 'status':
      const status = await syncService.gatherProjectStatus();
      console.log('üìä Proje Durumu:');
      console.log(JSON.stringify(status, null, 2));
      break;

    default:
      console.log(`
üîÑ ƒ∞-EP.APP Dok√ºmantasyon Auto-Sync

Kullanƒ±m:
  node scripts/doc-sync.js watch   # S√ºrekli izleme modunu ba≈ülat
  node scripts/doc-sync.js sync    # Tek seferlik senkronizasyon
  node scripts/doc-sync.js status  # Proje durumunu g√∂ster

√ñrnekler:
  npm run doc:watch               # package.json script kullanarak
  npm run doc:sync                # Manuel senkronizasyon
      `);
  }
}

// Script'i √ßalƒ±≈ütƒ±r
if (require.main === module) {
  main().catch(console.error);
}

module.exports = { DocumentationSyncService };