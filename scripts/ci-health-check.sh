#!/usr/bin/env bash
set -euo pipefail

# Automated CI Health-Check & Fix
# Analyzes GitHub Actions workflow results and ZAP security reports

# 1) Temel deƒüi≈ükenler
REPO="tural-musab/i-ep.app"
API="https://api.github.com/repos/$REPO"

# GitHub token kontrol√º
if [[ -z "${GITHUB_TOKEN:-}" ]]; then
  echo "‚ùå Error: GITHUB_TOKEN environment variable is required"
  echo "Usage: GITHUB_TOKEN=<your_github_token> ./scripts/ci-health-check.sh"
  exit 1
fi

echo "üîé Checking CI health for repository: $REPO"
echo "üì° Fetching latest workflow run..."

HEAD_RUN_ID=$(curl -s -H "Authorization: Bearer $GITHUB_TOKEN" \
  "$API/actions/runs?per_page=1" | jq -r '.workflow_runs[0].id')

if [[ "$HEAD_RUN_ID" == "null" ]]; then
  echo "‚ùå Error: Could not fetch workflow runs. Check your GITHUB_TOKEN permissions."
  exit 1
fi

echo "üîç Analyzing CI run: $HEAD_RUN_ID"

# 2) √áalƒ±≈ümanƒ±n t√ºm job/step durumlarƒ±nƒ± al
echo "üìä Fetching job details..."
JOBS_JSON=$(curl -s -H "Authorization: Bearer $GITHUB_TOKEN" \
  "$API/actions/runs/$HEAD_RUN_ID/jobs")

FAILED_STEPS=$(echo "$JOBS_JSON" | jq -r '
  .jobs[].steps[] | select(.conclusion=="failure") |
  "\(.name) (job: \(.number))"')

if [[ -z "$FAILED_STEPS" ]]; then
  echo "‚úÖ All CI steps passed successfully!"
else
  echo "‚ùå Failed steps detected:"
  echo "$FAILED_STEPS"
  echo ""
  
  # 3) ƒ∞lk hatanƒ±n log'unu indir
  FIRST_JOB_ID=$(echo "$JOBS_JSON" | jq -r '.jobs[] | select(.steps[].conclusion=="failure") | .id' | head -n1)
  echo "üì• Downloading logs for failed job (ID: $FIRST_JOB_ID)..."
  
  curl -L -H "Authorization: Bearer $GITHUB_TOKEN" \
    "$API/actions/jobs/$FIRST_JOB_ID/logs" -o job.log
  
  echo ""
  echo "--- Last 40 lines of failed job log ---"
  tail -n 40 job.log
  echo "--- End of log ---"
  echo ""
  echo "üí° Full log saved to: job.log"
  exit 1
fi

# 4) ZAP SARIF raporunu indir ve √∂zetle
echo "üîê Checking ZAP security scan results..."

ARTIFACT_ID=$(curl -s -H "Authorization: Bearer $GITHUB_TOKEN" \
  "$API/actions/runs/$HEAD_RUN_ID/artifacts" | jq -r '
    .artifacts[] | select(.name=="zap-security-report") | .id')

if [[ -n "$ARTIFACT_ID" && "$ARTIFACT_ID" != "null" ]]; then
  echo "üì• Downloading ZAP security report..."
  
  curl -L -H "Authorization: Bearer $GITHUB_TOKEN" \
    "$API/actions/artifacts/$ARTIFACT_ID/zip" -o zap.zip
  
  unzip -o zap.zip -d zap-report > /dev/null 2>&1
  
  # SARIF dosyasƒ±nƒ± bul ve analiz et
  SARIF_FILE=$(find zap-report -name "*.sarif" -type f | head -n1)
  
  if [[ -n "$SARIF_FILE" && -f "$SARIF_FILE" ]]; then
    echo "üìã Analyzing SARIF report: $SARIF_FILE"
    
    # Severity sayƒ±larƒ±nƒ± hesapla
    CRIT=$(jq '.runs[0].results[]? | select(.properties.severity?=="High")' "$SARIF_FILE" 2>/dev/null | wc -l)
    MED=$(jq '.runs[0].results[]? | select(.properties.severity?=="Medium")' "$SARIF_FILE" 2>/dev/null | wc -l)
    LOW=$(jq '.runs[0].results[]? | select(.properties.severity?=="Low")' "$SARIF_FILE" 2>/dev/null | wc -l)
    INFO=$(jq '.runs[0].results[]? | select(.properties.severity?=="Informational")' "$SARIF_FILE" 2>/dev/null | wc -l)
    
    echo "üîê ZAP Security Scan Results:"
    echo "   High:          $CRIT"
    echo "   Medium:        $MED"
    echo "   Low:           $LOW"
    echo "   Informational: $INFO"
    echo ""
    
    # E≈üik kontrol√º
    if [[ $CRIT -eq 0 && $MED -le 5 ]]; then
      echo "‚úÖ Security thresholds passed! (High: 0, Medium: ‚â§5)"
    else
      echo "‚ùå Security thresholds EXCEEDED!"
      echo "   Current: High=$CRIT, Medium=$MED"
      echo "   Required: High=0, Medium‚â§5"
      echo ""
      echo "üîç High/Medium severity findings:"
      jq -r '.runs[0].results[]? | select(.properties.severity?=="High" or .properties.severity?=="Medium") | 
        "- \(.ruleId): \(.message.text) (\(.properties.severity?))"' "$SARIF_FILE" 2>/dev/null | head -10
      exit 1
    fi
  else
    echo "‚ö†Ô∏è  SARIF file not found in downloaded report"
    ls -la zap-report/ 2>/dev/null || echo "No files in zap-report directory"
  fi
else
  echo "‚ö†Ô∏è  ZAP security report artifact not found"
  echo "üìã Available artifacts:"
  curl -s -H "Authorization: Bearer $GITHUB_TOKEN" \
    "$API/actions/runs/$HEAD_RUN_ID/artifacts" | jq -r '.artifacts[].name'
fi

# 5) Jest security test sonu√ßlarƒ±nƒ± kontrol et
echo ""
echo "üß™ Checking Jest security test results..."

# Jest test log'unu job log'undan √ßƒ±kar
if [[ -f "job.log" ]]; then
  JEST_SECURITY_PASS=$(grep -c "PASS.*security" job.log 2>/dev/null || echo "0")
  JEST_SECURITY_FAIL=$(grep -c "FAIL.*security" job.log 2>/dev/null || echo "0")
  
  if [[ $JEST_SECURITY_FAIL -eq 0 && $JEST_SECURITY_PASS -gt 0 ]]; then
    echo "‚úÖ Jest security tests passed: $JEST_SECURITY_PASS test suites"
  elif [[ $JEST_SECURITY_FAIL -gt 0 ]]; then
    echo "‚ùå Jest security tests failed: $JEST_SECURITY_FAIL test suites"
    echo "üîç Security test failures:"
    grep -A 5 "FAIL.*security" job.log 2>/dev/null || echo "No detailed failure info found"
    exit 1
  else
    echo "‚ÑπÔ∏è  No Jest security test results found in logs"
  fi
fi

# 6) Genel workflow durumu
WORKFLOW_STATUS=$(curl -s -H "Authorization: Bearer $GITHUB_TOKEN" \
  "$API/actions/runs/$HEAD_RUN_ID" | jq -r '.conclusion')

echo ""
echo "üìä Overall Workflow Status: $WORKFLOW_STATUS"

if [[ "$WORKFLOW_STATUS" == "success" ]]; then
  echo ""
  echo "üéâ CI Health Check PASSED! All systems green."
  echo "‚úÖ Security tests completed successfully"
  echo "‚úÖ ZAP scan passed security thresholds"
  echo "‚úÖ All CI steps completed without errors"
  echo ""
  echo "üöÄ Ready to proceed with S2-001 (Tenant Backup & DR)"
elif [[ "$WORKFLOW_STATUS" == "failure" ]]; then
  echo ""
  echo "‚ùå CI Health Check FAILED!"
  echo "üîß Review the logs above and fix issues before proceeding"
  exit 1
elif [[ "$WORKFLOW_STATUS" == "in_progress" ]]; then
  echo ""
  echo "‚è≥ Workflow is still running. Please wait for completion."
  exit 1
else
  echo ""
  echo "‚ö†Ô∏è  Workflow status: $WORKFLOW_STATUS (unexpected)"
  exit 1
fi 