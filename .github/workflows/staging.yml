# .github/workflows/staging.yml  
name: Staging CI/CD Pipeline

on:
  push:
    branches: [ develop ]
  pull_request:
    branches: [ develop ]

jobs:
  # Test ve build job
  test-build-staging:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      security-events: write
    env:
      NEXT_ENV_PROFILE: staging

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Setup Docusaurus
        run: |
          cd docs-site
          npm ci

      - name: Check broken links in docs
        run: npm run docs:check-links
        continue-on-error: true

      - name: RLS Policy Tests
        run: npm run test:rls
        env:
          SUPABASE_SERVICE_ROLE_KEY: ${{ secrets.SUPABASE_STAGING_SERVICE_ROLE_KEY }}
        continue-on-error: true

      - name: Security Integration Tests
        run: npm run test:security
        continue-on-error: true

      - name: Validate Environment
        run: npm run validate:env
        env:
          NEXTAUTH_SECRET: ${{ secrets.NEXTAUTH_SECRET }}
          SUPABASE_SERVICE_ROLE_KEY: ${{ secrets.SUPABASE_STAGING_SERVICE_ROLE_KEY }}
          NEXT_PUBLIC_SUPABASE_URL: ${{ secrets.NEXT_PUBLIC_SUPABASE_STAGING_URL }}
          NEXT_PUBLIC_SUPABASE_ANON_KEY: ${{ secrets.NEXT_PUBLIC_SUPABASE_STAGING_ANON_KEY }}
          NEXT_PUBLIC_APP_NAME: ${{ secrets.NEXT_PUBLIC_APP_NAME }}

      - name: Lint
        run: npm run lint || echo "‚ö†Ô∏è Lint errors in staging, continuing"
        continue-on-error: true

      - name: Format check
        run: npm run format:check
        continue-on-error: true

      - name: Run Tests
        run: npm run test:ci
        env:
          CI: true
        continue-on-error: true

      - name: Build for Staging
        run: npm run build
        env:
          NEXTAUTH_SECRET: ${{ secrets.NEXTAUTH_SECRET }}
          SUPABASE_SERVICE_ROLE_KEY: ${{ secrets.SUPABASE_STAGING_SERVICE_ROLE_KEY }}
          VERCEL_ENV: staging
          NEXT_PUBLIC_SUPABASE_URL: ${{ secrets.NEXT_PUBLIC_SUPABASE_STAGING_URL }}
          NEXT_PUBLIC_SUPABASE_ANON_KEY: ${{ secrets.NEXT_PUBLIC_SUPABASE_STAGING_ANON_KEY }}
          NEXT_PUBLIC_APP_NAME: ${{ secrets.NEXT_PUBLIC_APP_NAME }}

      - name: Basic Security Scan
        run: |
          echo "üîç Running basic security scan for staging..."
          npm audit --audit-level moderate || {
            echo "‚ö†Ô∏è Security issues found in staging, but continuing..."
            exit 0
          }
        continue-on-error: true

  # Staging deployment job
  deploy-staging:
    needs: test-build-staging
    runs-on: ubuntu-latest
    environment: staging
    permissions:
      contents: read

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build for Staging
        run: npm run build
        env:
          NEXTAUTH_SECRET: ${{ secrets.NEXTAUTH_SECRET }}
          SUPABASE_SERVICE_ROLE_KEY: ${{ secrets.SUPABASE_STAGING_SERVICE_ROLE_KEY }}
          VERCEL_ENV: staging
          NEXT_PUBLIC_SUPABASE_URL: ${{ secrets.NEXT_PUBLIC_SUPABASE_STAGING_URL }}
          NEXT_PUBLIC_SUPABASE_ANON_KEY: ${{ secrets.NEXT_PUBLIC_SUPABASE_STAGING_ANON_KEY }}
          NEXT_PUBLIC_APP_NAME: ${{ secrets.NEXT_PUBLIC_APP_NAME }}

      - name: Install Supabase CLI
        run: npm install -g supabase@latest

      - name: Link Staging Supabase Project
        run: supabase link --project-ref ${{ secrets.SUPABASE_STAGING_PROJECT_REF }}
        env:
          SUPABASE_ACCESS_TOKEN: ${{ secrets.SUPABASE_STAGING_SERVICE_ROLE_KEY }}

      - name: Deploy Staging Database Migrations
        run: |
          echo "üóÑÔ∏è Deploying database migrations to Staging Supabase..."
          supabase db push --include-all
          echo "‚úÖ Staging database migrations completed successfully"
        env:
          SUPABASE_ACCESS_TOKEN: ${{ secrets.SUPABASE_STAGING_SERVICE_ROLE_KEY }}
        continue-on-error: true

      - name: Install Vercel CLI
        run: npm install -g vercel@latest

      - name: Deploy to Staging Vercel
        run: |
          echo "üöÄ Deploying to Staging (staging.i-ep.app)..."
          vercel --token ${{ secrets.VERCEL_TOKEN }} --yes
          echo "‚úÖ Staging deployment completed successfully"
        env:
          VERCEL_PROJECT_ID: ${{ secrets.VERCEL_STAGING_PROJECT_ID }}
          VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}