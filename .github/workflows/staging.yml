name: Staging CI/CD Pipeline

on:
  push:
    branches: [ develop ]
  pull_request:
    branches: [ develop ]

# Aynƒ± branch i√ßin eski √ßalƒ±≈ümalarƒ± iptal et
concurrency:
  group: staging-${{ github.ref }}
  cancel-in-progress: true

jobs:
  # 1) Test‚Äëbuild: tek build + artefact upload
  test-build-staging:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      security-events: write
    concurrency:
      group: test-build-staging-${{ github.ref }}
      cancel-in-progress: true
    env:
      NEXT_ENV_PROFILE: staging

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Validate Environment
        run: npm run validate:env
        env:
          NEXTAUTH_SECRET: ${{ secrets.NEXTAUTH_SECRET }}
          SUPABASE_SERVICE_ROLE_KEY: ${{ secrets.SUPABASE_STAGING_SERVICE_ROLE_KEY }}
          NEXT_PUBLIC_SUPABASE_URL: ${{ secrets.NEXT_PUBLIC_SUPABASE_STAGING_URL }}
          NEXT_PUBLIC_SUPABASE_ANON_KEY: ${{ secrets.NEXT_PUBLIC_SUPABASE_STAGING_ANON_KEY }}
          NEXT_PUBLIC_APP_NAME: ${{ secrets.NEXT_PUBLIC_APP_NAME }}

      - name: Lint
        run: npm run lint || echo "‚ö†Ô∏è Lint errors, continuing"
        continue-on-error: true

      - name: Format check
        run: npm run format:check
        continue-on-error: true

      - name: Run Critical Tests
        run: npm run test:ci
        env:
          CI: true
        continue-on-error: true

      - name: Build for Staging
        run: npm run build
        env:
          NEXTAUTH_SECRET: ${{ secrets.NEXTAUTH_SECRET }}
          SUPABASE_SERVICE_ROLE_KEY: ${{ secrets.SUPABASE_STAGING_SERVICE_ROLE_KEY }}
          VERCEL_ENV: preview
          NEXT_PUBLIC_BASE_URL: https://staging.i-ep.app
          NEXT_PUBLIC_SUPABASE_URL: ${{ secrets.NEXT_PUBLIC_SUPABASE_STAGING_URL }}
          NEXT_PUBLIC_SUPABASE_ANON_KEY: ${{ secrets.NEXT_PUBLIC_SUPABASE_STAGING_ANON_KEY }}
          NEXT_PUBLIC_APP_NAME: ${{ secrets.NEXT_PUBLIC_APP_NAME }}

      - name: Upload Build Artifact
        uses: actions/upload-artifact@v4
        with:
          name: staging-build
          path: .next
          retention-days: 3

  # 2) Security scan: CodeQL analizi
  security-scan-staging:
    needs: test-build-staging
    runs-on: ubuntu-latest
    permissions:
      contents: read
      security-events: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: javascript

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3

  # 3) Deploy: artefact download + Supabase migration + prebuilt Vercel
  deploy-staging:
    needs: [test-build-staging, security-scan-staging]
    runs-on: ubuntu-latest
    environment: staging
    permissions:
      contents: read
    concurrency:
      group: deploy-staging-${{ github.ref }}
      cancel-in-progress: true

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download Build Artifact
        uses: actions/download-artifact@v4
        with:
          name: staging-build
          path: .next

      - name: Cache Supabase CLI
        uses: actions/cache@v3
        id: cache-supabase
        with:
          path: ~/.local/bin/supabase
          key: supabase-cli-${{ runner.os }}-${{ hashFiles('package-lock.json') }}

      - name: Install Supabase CLI if missing
        if: steps.cache-supabase.outputs.cache-hit != 'true'
        run: |
          mkdir -p ~/.local/bin
          curl -L "https://github.com/supabase/cli/releases/latest/download/supabase_linux_amd64.tar.gz" \
            | tar -xz -C ~/.local/bin
          chmod +x ~/.local/bin/supabase
          echo "$HOME/.local/bin" >> $GITHUB_PATH

      - name: Deploy Database Migrations
        run: |
          echo "üóÑÔ∏è Deploying migrations to Staging Supabase..."
          supabase projects target set staging --project-ref ${{ secrets.SUPABASE_STAGING_PROJECT_REF }}
          supabase db push
          echo "‚úÖ Staging migrations completed"
        env:
          SUPABASE_ACCESS_TOKEN: ${{ secrets.SUPABASE_STAGING_SERVICE_ROLE_KEY }}
        continue-on-error: true

      - name: Install Vercel CLI
        run: npm install -g vercel@latest

      - name: Deploy to Staging Vercel
        run: |
          echo "üöÄ Deploying prebuilt to Staging (staging.i-ep.app)..."
          vercel --token ${{ secrets.VERCEL_TOKEN }} --prebuilt --yes
          echo "‚úÖ Staging deployment completed successfully"
        env:
          VERCEL_PROJECT_ID: ${{ secrets.VERCEL_STAGING_PROJECT_ID }}
          VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
          VERCEL_ENV: preview