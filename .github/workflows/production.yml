# .github/workflows/production.yml
name: Production CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

# Production deploy concurrency - sadece en son push'u √ßalƒ±≈ütƒ±r
concurrency:
  group: production-deploy
  cancel-in-progress: true

jobs:
  # Optimized test-build job: Sadece test + build + artifacts
  test-build:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      security-events: write
      actions: read
    env:
      NEXT_ENV_PROFILE: production

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Validate Environment
        run: npm run validate:env
        env:
          NEXTAUTH_SECRET: ${{ secrets.NEXTAUTH_SECRET }}
          SUPABASE_SERVICE_ROLE_KEY: ${{ secrets.SUPABASE_SERVICE_ROLE_KEY }}
          NEXT_PUBLIC_SUPABASE_URL: ${{ secrets.NEXT_PUBLIC_SUPABASE_URL }}
          NEXT_PUBLIC_SUPABASE_ANON_KEY: ${{ secrets.NEXT_PUBLIC_SUPABASE_ANON_KEY }}
          NEXT_PUBLIC_APP_NAME: ${{ secrets.NEXT_PUBLIC_APP_NAME }}

      - name: Lint
        run: npm run lint || echo "‚ö†Ô∏è Lint errors, but continuing"
        continue-on-error: true

      - name: Format check
        run: npm run format:check

      - name: Run Critical Tests
        run: npm run test:ci
        env:
          CI: true

      # SINGLE BUILD - sadece bir kez derleme (DYNAMIC URL)
      - name: Build for Production
        run: npm run build
        env:
          NEXTAUTH_SECRET: ${{ secrets.NEXTAUTH_SECRET }}
          SUPABASE_SERVICE_ROLE_KEY: ${{ secrets.SUPABASE_SERVICE_ROLE_KEY }}
          VERCEL_ENV: production
          NEXT_PUBLIC_SUPABASE_URL: ${{ secrets.NEXT_PUBLIC_SUPABASE_URL }}
          NEXT_PUBLIC_SUPABASE_ANON_KEY: ${{ secrets.NEXT_PUBLIC_SUPABASE_ANON_KEY }}
          NEXT_PUBLIC_APP_NAME: ${{ secrets.NEXT_PUBLIC_APP_NAME }}

      # Build artifacts upload - sadece .next yeterli
      - name: Upload Build Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: production-build
          path: .next
          retention-days: 1

      # Critical Security Scan Only (hƒ±zlƒ±)
      - name: Critical Security Scan
        run: |
          echo "üîç Running critical security checks..."
          npm audit --audit-level high --production || {
            echo "‚ö†Ô∏è High severity issues found, but continuing for now"
            exit 0
          }
        continue-on-error: true

      - name: Upload Coverage Reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: coverage-report
          path: coverage/
          retention-days: 7

  # Lightweight security job (paralel √ßalƒ±≈üƒ±r)
  security-scan:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      security-events: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: javascript

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3
        with:
          category: "/language:javascript"

      - name: Upload CodeQL SARIF Report
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: ${{ github.workspace }}/results
          category: "/language:javascript"

  # Optimized production deployment - artifact-based
  deploy-production:
    needs: [test-build, security-scan]
    runs-on: ubuntu-latest
    environment: production
    permissions:
      contents: read

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      # Build artifacts download - dependencies gereksiz
      - name: Download Build Artifacts
        uses: actions/download-artifact@v4
        with:
          name: production-build
          path: .next

      # Versioned Supabase CLI cache
      - name: Cache Supabase CLI
        uses: actions/cache@v3
        id: cache-supabase
        with:
          path: ~/.local/bin/supabase
          key: supabase-cli-${{ runner.os }}-${{ hashFiles('package-lock.json') }}

      - name: Install Supabase CLI
        if: steps.cache-supabase.outputs.cache-hit != 'true'
        run: |
          mkdir -p ~/.local/bin
          curl -L "https://github.com/supabase/cli/releases/latest/download/supabase_linux_amd64.tar.gz" | tar -xz -C ~/.local/bin
          chmod +x ~/.local/bin/supabase
        
      - name: Add Supabase CLI to PATH
        run: echo "$HOME/.local/bin" >> $GITHUB_PATH

      # Corrected Supabase operations
      - name: Deploy Database Migrations
        run: |
          echo "üóÑÔ∏è Deploying migrations to Production Supabase..."
          supabase projects target set production --project-ref ${{ secrets.SUPABASE_PROJECT_REF }}
          supabase db push
          echo "‚úÖ Production migrations completed"
        env:
          SUPABASE_ACCESS_TOKEN: ${{ secrets.SUPABASE_SERVICE_ROLE_KEY }}

      - name: Install Vercel CLI
        run: npm install -g vercel@latest

      # Prebuilt deployment - no dependencies needed
      - name: Deploy to Production Vercel
        run: |
          echo "üöÄ Deploying prebuilt to Production (i-ep.app)..."
          vercel --token ${{ secrets.VERCEL_TOKEN }} --prod --yes --prebuilt
          echo "‚úÖ Production deployment completed successfully"
        env:
          VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}
          VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
          VERCEL_ENV: production

