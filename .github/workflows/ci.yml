name: CI/CD Pipeline

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  lint-test-build:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      security-events: write
      actions: read
    env:
      NEXT_ENV_PROFILE: test

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Setup Docusaurus
        run: |
          cd docs-site
          npm ci

      - name: Check broken links in docs
        run: npm run docs:check-links

      # TODO: Add Turkish dictionary for docs spell check
      # - name: Spell check documentation
      #   run: npm run docs:spellcheck

      - name: RLS Policy Tests
        run: npm run test:rls
        
      - name: Security Integration Tests
        run: npm run test:security

      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: javascript

      - name: Security Scan
        run: |
          # Install Snyk if not available
          npm install -g snyk
          
          # Run Snyk test with high severity threshold
          npx snyk test --severity-threshold=high
          
          # Note: CodeQL analyze will be run automatically after build
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}

      - name: Validate Environment
        run: npm run validate:env
        env:
          NEXTAUTH_SECRET: ${{ secrets.NEXTAUTH_SECRET }}
          NEXTAUTH_URL: ${{ secrets.NEXTAUTH_URL }}
          SUPABASE_SERVICE_ROLE_KEY: ${{ secrets.SUPABASE_SERVICE_ROLE_KEY }}
          NEXT_PUBLIC_SUPABASE_URL: ${{ secrets.NEXT_PUBLIC_SUPABASE_URL }}
          NEXT_PUBLIC_SUPABASE_ANON_KEY: ${{ secrets.NEXT_PUBLIC_SUPABASE_ANON_KEY }}
          NEXT_PUBLIC_APP_NAME: ${{ secrets.NEXT_PUBLIC_APP_NAME }}
          NEXT_PUBLIC_APP_URL: ${{ secrets.NEXT_PUBLIC_APP_URL }}

      - name: Lint
        run: npm run lint

      - name: Format check
        run: npm run format:check

      - name: Test with coverage
        run: npm test -- --coverage --passWithNoTests

      - name: Upload Coverage Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: coverage/

      - name: Install Playwright Browsers
        run: npx playwright install --with-deps

      - name: Run E2E Tests
        run: npm run e2e

      - name: Upload Playwright HTML Report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: playwright-report
          path: playwright-report/**

      - name: Build
        run: npm run build

      - name: Start application for security testing
        run: |
          echo "Building application for security testing..."
          npm run build
          
          echo "Starting application in background..."
          npm run start &
          APP_PID=$!
          echo "App PID: $APP_PID"
          
          echo "Waiting for application to start (30 seconds)..."
          sleep 30
          
          echo "Checking application health..."
          for i in {1..10}; do
            if curl -f -s http://localhost:3000 > /dev/null; then
              echo "‚úÖ Application is running successfully!"
              break
            else
              echo "‚è≥ Attempt $i/10: Application not ready yet, waiting 5 more seconds..."
              sleep 5
            fi
            
            if [ $i -eq 10 ]; then
              echo "‚ùå Application failed to start properly"
              echo "Application logs:"
              jobs -l
              kill $APP_PID 2>/dev/null || true
              exit 1
            fi
          done
        env:
          PORT: 3000

      - name: Create ZAP reports directory
        run: mkdir -p ./zap-reports

      - name: OWASP ZAP Security Scan
        run: |
          echo "üîí Starting OWASP ZAP Security Scan..."
          
          # Ensure target is accessible
          echo "üì° Testing target accessibility..."
          curl -f -s http://localhost:3000 || {
            echo "‚ùå Target application is not accessible"
            exit 1
          }
          
          echo "üê≥ Running ZAP Full Scan..."
          docker run --network host \
            -v $(pwd)/zap-reports:/zap/wrk \
            ghcr.io/zaproxy/zaproxy:stable \
            zap-full-scan.py \
            -t http://localhost:3000 \
            -j \
            -I \
            -r zap.html \
            -w zap.sarif \
            -x zap.xml \
            -m 5 \
            -z "-addonupdate; -addoninstall pscanrulesBeta" || {
              echo "‚ö†Ô∏è ZAP scan completed with warnings (this is normal)"
              echo "üìÅ Checking generated reports..."
              ls -la zap-reports/ || echo "No reports directory found"
          }
          
          echo "üìã ZAP Scan Summary:"
          [ -f "zap-reports/zap.html" ] && echo "‚úÖ HTML report generated" || echo "‚ùå HTML report missing"
          [ -f "zap-reports/zap.sarif" ] && echo "‚úÖ SARIF report generated" || echo "‚ùå SARIF report missing"
          [ -f "zap-reports/zap.xml" ] && echo "‚úÖ XML report generated" || echo "‚ùå XML report missing"
        continue-on-error: true

      - name: Upload ZAP Security Report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: zap-security-report
          path: zap-reports/

      - name: Upload ZAP SARIF Report
        uses: github/codeql-action/upload-sarif@v3
        if: always() && hashFiles('zap-reports/zap.sarif') != ''
        with:
          sarif_file: zap-reports/zap.sarif
          category: zap-security-scan

      - name: Check ZAP Results
        if: always()
        run: |
          if [ -f "zap-reports/zap.xml" ]; then
            # Check for medium or high severity issues
            high_count=$(grep -c 'riskdesc="High"' zap-reports/zap.xml || echo "0")
            medium_count=$(grep -c 'riskdesc="Medium"' zap-reports/zap.xml || echo "0")
            
            echo "ZAP Scan Results:"
            echo "High severity issues: $high_count"
            echo "Medium severity issues: $medium_count"
            
            if [ "$high_count" -gt "0" ] || [ "$medium_count" -gt "5" ]; then
              echo "Security scan failed: Too many medium/high severity issues found"
              exit 1
            fi
          else
            echo "ZAP report not found, security scan may have failed"
            echo "Checking if ZAP reports directory exists:"
            ls -la zap-reports/ || echo "ZAP reports directory not found"
          fi

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3
        with:
          output: codeql-report.sarif
          upload: false

      - name: Upload Security Report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: security-report
          path: codeql-report.sarif

  deployment:
    needs: lint-test-build
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build
        run: npm run build

      - name: Deploy to Vercel
        uses: amondnet/vercel-action@v25
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
          working-directory: ./
          vercel-args: '--prod' 