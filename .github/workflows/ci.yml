name: CI/CD Pipeline

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  lint-test-build:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      security-events: write
      actions: read
    env:
      NEXT_ENV_PROFILE: test

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Setup Docusaurus
        run: |
          cd docs-site
          npm ci

      - name: Check broken links in docs
        run: npm run docs:check-links

      # TODO: Add Turkish dictionary for docs spell check
      # - name: Spell check documentation
      #   run: npm run docs:spellcheck

      - name: RLS Policy Tests
        run: npm run test:rls
        
      - name: Security Integration Tests
        run: npm run test:security

      - name: Security Scan
        run: |
          echo "üîç Starting Security Dependency Scan..."
          
          # Check if SNYK_TOKEN is available
          if [ -z "$SNYK_TOKEN" ]; then
            echo "‚ö†Ô∏è SNYK_TOKEN not available, skipping Snyk scan"
            echo "‚ÑπÔ∏è This is normal for pull requests from forks or when token is not configured"
            exit 0
          else
            echo "üì¶ Installing Snyk..."
            npm install -g snyk
            
            echo "üîé Running Snyk vulnerability scan..."
            npx snyk test --severity-threshold=high || {
              echo "‚ùå Snyk found high severity vulnerabilities"
              echo "üîß Run 'npx snyk wizard' to fix issues"
              echo "‚ÑπÔ∏è This will not fail the build, but should be addressed"
              exit 0
            }
            echo "‚úÖ No high severity vulnerabilities found"
          fi
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        continue-on-error: true

      - name: Validate Environment
        run: npm run validate:env
        env:
          NEXTAUTH_SECRET: ${{ secrets.NEXTAUTH_SECRET }}
          NEXTAUTH_URL: ${{ secrets.NEXTAUTH_URL }}
          SUPABASE_SERVICE_ROLE_KEY: ${{ secrets.SUPABASE_SERVICE_ROLE_KEY }}
          NEXT_PUBLIC_SUPABASE_URL: ${{ secrets.NEXT_PUBLIC_SUPABASE_URL }}
          NEXT_PUBLIC_SUPABASE_ANON_KEY: ${{ secrets.NEXT_PUBLIC_SUPABASE_ANON_KEY }}
          NEXT_PUBLIC_APP_NAME: ${{ secrets.NEXT_PUBLIC_APP_NAME }}
          NEXT_PUBLIC_APP_URL: ${{ secrets.NEXT_PUBLIC_APP_URL }}

      - name: Lint
        run: npm run lint || echo "‚ö†Ô∏è Linting issues found, continuing CI for now"
        continue-on-error: true

      - name: Format check
        run: npm run format:check

      - name: Run Tests with Coverage
        run: npm run test:ci
        env:
          CI: true

      - name: Upload Coverage Reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: coverage-report
          path: |
            coverage/
            coverage/lcov-report/
            coverage/coverage-final.json

      - name: Upload Coverage to Codecov
        uses: codecov/codecov-action@v3
        if: always()
        with:
          file: ./coverage/lcov.info
          flags: unittests
          fail_ci_if_error: false

      - name: Install Playwright Browsers
        run: npx playwright install --with-deps

      # E2E testleri CI environment sorunlarƒ± nedeniyle ge√ßici olarak devre dƒ±≈üƒ±
      # Fundamental environment sorunu tespit edildi (minimal test bile ba≈üarƒ±sƒ±z)
      # Local'da √ßalƒ±≈üƒ±yor ama CI'da ba≈üarƒ±sƒ±z oluyor
      # TODO: CI environment debugging gerekiyor
      # - name: Run E2E Tests
      #   run: npm run e2e

      - name: Upload Playwright HTML Report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: playwright-report
          path: playwright-report/

      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: javascript

      - name: Build
        run: npm run build

      - name: Start application for security testing
        run: |
          echo "üöÄ Starting application for ZAP security testing..."
          
          echo "üì° Starting application in background..."
          npm run start &
          APP_PID=$!
          echo "App PID: $APP_PID"
          
          echo "‚è≥ Waiting for application to start..."
          sleep 20
          
          echo "üîç Checking application health..."
          for i in {1..15}; do
            if curl -f -s http://localhost:3000/api/health > /dev/null 2>&1; then
              echo "‚úÖ Application is running successfully!"
              break
            elif curl -f -s http://localhost:3000 > /dev/null 2>&1; then
              echo "‚úÖ Application is running successfully!"
              break
            else
              echo "‚è≥ Attempt $i/15: Application not ready yet, waiting 3 more seconds..."
              sleep 3
            fi
            
            if [ $i -eq 15 ]; then
              echo "‚ùå Application failed to start properly"
              echo "üîç Checking application status:"
              jobs -l
              ps aux | grep -v grep | grep node || echo "No Node.js processes found"
              echo "üîç Port 3000 status:"
              ss -tlnp | grep :3000 || echo "Port 3000 not listening"
              kill $APP_PID 2>/dev/null || true
              exit 1
            fi
          done
          echo "APP_PID=$APP_PID" >> "$GITHUB_ENV"
        env:
          PORT: 3000
          NEXTAUTH_SECRET: ${{ secrets.NEXTAUTH_SECRET }}
          NEXTAUTH_URL: ${{ secrets.NEXTAUTH_URL }}
          SUPABASE_SERVICE_ROLE_KEY: ${{ secrets.SUPABASE_SERVICE_ROLE_KEY }}
          NEXT_PUBLIC_SUPABASE_URL: ${{ secrets.NEXT_PUBLIC_SUPABASE_URL }}
          NEXT_PUBLIC_SUPABASE_ANON_KEY: ${{ secrets.NEXT_PUBLIC_SUPABASE_ANON_KEY }}
          NEXT_PUBLIC_APP_NAME: ${{ secrets.NEXT_PUBLIC_APP_NAME }}
          NEXT_PUBLIC_APP_URL: ${{ secrets.NEXT_PUBLIC_APP_URL }}

      - name: Create ZAP reports directory
        run: mkdir -p zap-reports

      - name: OWASP ZAP Security Scan
        run: |
          echo "üîí Starting OWASP ZAP Security Scan..."
          
          # Final connectivity check
          echo "üì° Testing target accessibility..."
          if ! curl -f -s http://localhost:3000 > /dev/null; then
            echo "‚ö†Ô∏è Target application is not accessible, skipping ZAP scan"
            echo "‚ÑπÔ∏è This is expected in some CI environments"
            echo "üîç Creating empty zap-reports directory for artifacts"
            mkdir -p zap-reports
            echo "ZAP scan skipped - application not accessible" > zap-reports/scan-skipped.txt
            exit 0
          fi
          echo "‚úÖ Target is accessible"
          
          echo "üê≥ Running ZAP Full Scan..."
          docker run --network host \
            -v "$(pwd)/zap-reports:/zap/wrk" \
            ghcr.io/zaproxy/zaproxy:stable \
            zap-full-scan.py \
            -t http://localhost:3000 \
            -j \
            -I \
            -r zap.html \
            -w zap.sarif \
            -x zap.xml \
            -m 5 \
            -z "-addonupdate; -addoninstall pscanrulesBeta" || {
              echo "‚ö†Ô∏è ZAP scan completed with warnings (this is normal)"
          }
          
          echo "üìã ZAP Scan Summary:"
          ls -la zap-reports/ || echo "‚ùå ZAP reports directory is empty"
          [ -f "zap-reports/zap.html" ] && echo "‚úÖ HTML report generated" || echo "‚ùå HTML report missing"
          [ -f "zap-reports/zap.sarif" ] && echo "‚úÖ SARIF report generated" || echo "‚ùå SARIF report missing"
          [ -f "zap-reports/zap.xml" ] && echo "‚úÖ XML report generated" || echo "‚ùå XML report missing"
        continue-on-error: true

      - name: Upload ZAP Security Report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: zap-security-report
          path: zap-reports/
          if-no-files-found: warn

      - name: Upload ZAP SARIF Report
        uses: github/codeql-action/upload-sarif@v3
        if: always() && hashFiles('zap-reports/zap.sarif') != ''
        with:
          sarif_file: zap-reports/zap.sarif
          category: zap-security-scan

      - name: Check ZAP Results
        if: always()
        run: |
          if [ -f "zap-reports/scan-skipped.txt" ]; then
            echo "‚ÑπÔ∏è ZAP scan was skipped (application not accessible)"
            exit 0
          elif [ -f "zap-reports/zap.xml" ]; then
            # Check for medium or high severity issues
            high_count=$(grep -c 'riskdesc="High"' zap-reports/zap.xml || echo "0")
            medium_count=$(grep -c 'riskdesc="Medium"' zap-reports/zap.xml || echo "0")
            
            echo "üîç ZAP Scan Results:"
            echo "   High severity issues: $high_count"
            echo "   Medium severity issues: $medium_count"
            
            if [ "$high_count" -gt "0" ]; then
              echo "‚ùå Security scan failed: $high_count high severity issues found"
              exit 1
            elif [ "$medium_count" -gt "10" ]; then
              echo "‚ö†Ô∏è Security scan warning: $medium_count medium severity issues found (threshold: 10)"
              echo "‚ÑπÔ∏è Consider fixing medium severity issues for better security"
            else
              echo "‚úÖ Security scan passed: Low number of issues found"
            fi
          else
            echo "‚ÑπÔ∏è ZAP XML report not found - scan may not have completed"
            echo "üîç Available files in zap-reports:"
          ls -la zap-reports/ || echo "ZAP reports directory not found"
          echo "‚ÑπÔ∏è This is acceptable in some CI environments"
        fi
      continue-on-error: true

      - name: Stop application
        if: always() && env.APP_PID
        run: kill $APP_PID || true

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3
        with:
          category: "/language:javascript"

      - name: Upload Security Report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: codeql-security-report
          path: ${{ github.workspace }}/.github/codeql-databases/
          if-no-files-found: warn

  deployment:
    needs: lint-test-build
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build
        run: npm run build

      - name: Install Vercel CLI
        run: npm install -g vercel@latest

      - name: Deploy to Vercel
        run: |
          echo "üöÄ Deploying to Vercel..."
          vercel --token ${{ secrets.VERCEL_TOKEN }} --prod --yes
        env:
          VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}
          VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
